/* eslint-disable */
// Auto-generated by generate-protos script on Mon Aug 12 2024 19:40:35 GMT-0400 (Eastern Daylight Time)

import EAccountFlags from '../enums/EAccountFlags';
import EAccountType from '../enums/EAccountType';
import EACState from '../enums/EACState';
import EActivationCodeClass from '../enums/EActivationCodeClass';
import EAgreementType from '../enums/EAgreementType';
import EAppAssociationType from '../enums/EAppAssociationType';
import EAppCloudStatus from '../enums/EAppCloudStatus';
import EAppControllerSupportLevel from '../enums/EAppControllerSupportLevel';
import EAppGamepadGyroTrackpadSupportLevel from '../enums/EAppGamepadGyroTrackpadSupportLevel';
import EAppInfoSection from '../enums/EAppInfoSection';
import EAppType from '../enums/EAppType';
import EAppUsageEvent from '../enums/EAppUsageEvent';
import EAudioFormat from '../enums/EAudioFormat';
import EAuthSessionGuardType from '../enums/EAuthSessionGuardType';
import EAuthSessionResponse from '../enums/EAuthSessionResponse';
import EAuthSessionSecurityHistory from '../enums/EAuthSessionSecurityHistory';
import EAuthTokenPlatformType from '../enums/EAuthTokenPlatformType';
import EAuthTokenRevokeAction from '../enums/EAuthTokenRevokeAction';
import EAuthTokenState from '../enums/EAuthTokenState';
import EBanContentCheckResult from '../enums/EBanContentCheckResult';
import EBatteryState from '../enums/EBatteryState';
import EBillingType from '../enums/EBillingType';
import EBluetoothDeviceType from '../enums/EBluetoothDeviceType';
import EBroadcastChatPermission from '../enums/EBroadcastChatPermission';
import EBroadcastImageType from '../enums/EBroadcastImageType';
import EBroadcastWatchLocation from '../enums/EBroadcastWatchLocation';
import EChatAction from '../enums/EChatAction';
import EChatActionResult from '../enums/EChatActionResult';
import EChatEntryType from '../enums/EChatEntryType';
import EChatFlags from '../enums/EChatFlags';
import EChatInfoType from '../enums/EChatInfoType';
import EChatMemberStateChange from '../enums/EChatMemberStateChange';
import EChatPermission from '../enums/EChatPermission';
import EChatRoomEnterResponse from '../enums/EChatRoomEnterResponse';
import EChatRoomGroupAction from '../enums/EChatRoomGroupAction';
import EChatRoomGroupPermissions from '../enums/EChatRoomGroupPermissions';
import EChatRoomGroupRank from '../enums/EChatRoomGroupRank';
import EChatRoomGroupType from '../enums/EChatRoomGroupType';
import EChatRoomJoinState from '../enums/EChatRoomJoinState';
import EChatRoomMemberStateChange from '../enums/EChatRoomMemberStateChange';
import EChatRoomMessageReactionType from '../enums/EChatRoomMessageReactionType';
import EChatRoomNotificationLevel from '../enums/EChatRoomNotificationLevel';
import EChatRoomServerMessage from '../enums/EChatRoomServerMessage';
import EChatRoomServerMsg from '../enums/EChatRoomServerMsg';
import EChatRoomType from '../enums/EChatRoomType';
import EClanPermission from '../enums/EClanPermission';
import EClanRank from '../enums/EClanRank';
import EClanRelationship from '../enums/EClanRelationship';
import EClientNotificationType from '../enums/EClientNotificationType';
import EClientPersonaStateFlag from '../enums/EClientPersonaStateFlag';
import EClientSettingStore from '../enums/EClientSettingStore';
import EClientStat from '../enums/EClientStat';
import EClientStatAggregateMethod from '../enums/EClientStatAggregateMethod';
import ECloudPendingRemoteOperation from '../enums/ECloudPendingRemoteOperation';
import ECloudStoragePersistState from '../enums/ECloudStoragePersistState';
import ECodecUsagePlatform from '../enums/ECodecUsagePlatform';
import ECodecUsageReason from '../enums/ECodecUsageReason';
import EColorProfile from '../enums/EColorProfile';
import ECommunityItemClass from '../enums/ECommunityItemClass';
import EContentCheckProvider from '../enums/EContentCheckProvider';
import EContentDeltaChunkDataLocation from '../enums/EContentDeltaChunkDataLocation';
import EContentDescriptorID from '../enums/EContentDescriptorID';
import EContentDownloadSourceType from '../enums/EContentDownloadSourceType';
import EContentHubDiscountFilterType from '../enums/EContentHubDiscountFilterType';
import EControllerElementType from '../enums/EControllerElementType';
import ECPUGovernor from '../enums/ECPUGovernor';
import ECurrencyCode from '../enums/ECurrencyCode';
import EDenyReason from '../enums/EDenyReason';
import EDepotFileFlag from '../enums/EDepotFileFlag';
import EDisplayStatus from '../enums/EDisplayStatus';
import EDRMBlobDownloadErrorDetail from '../enums/EDRMBlobDownloadErrorDetail';
import EDRMBlobDownloadType from '../enums/EDRMBlobDownloadType';
import EEconTradeResponse from '../enums/EEconTradeResponse';
import EExternalAccountType from '../enums/EExternalAccountType';
import EFrameAccumulatedStat from '../enums/EFrameAccumulatedStat';
import EFriendFlags from '../enums/EFriendFlags';
import EFriendRelationship from '../enums/EFriendRelationship';
import EGameSearchAction from '../enums/EGameSearchAction';
import EGameSearchResult from '../enums/EGameSearchResult';
import EGetChannelsAlgorithm from '../enums/EGetChannelsAlgorithm';
import EGetGamesAlgorithm from '../enums/EGetGamesAlgorithm';
import EGPUPerformanceLevel from '../enums/EGPUPerformanceLevel';
import EGraphicsPerfOverlayLevel from '../enums/EGraphicsPerfOverlayLevel';
import EHDRToneMapOperator from '../enums/EHDRToneMapOperator';
import EHIDDeviceDisconnectMethod from '../enums/EHIDDeviceDisconnectMethod';
import EHIDDeviceLocation from '../enums/EHIDDeviceLocation';
import EInputMode from '../enums/EInputMode';
import EInternalAccountType from '../enums/EInternalAccountType';
import EIntroducerRouting from '../enums/EIntroducerRouting';
import EJSRegisterMethodType from '../enums/EJSRegisterMethodType';
import EKeyEscrowUsage from '../enums/EKeyEscrowUsage';
import ELauncherType from '../enums/ELauncherType';
import ELeaderboardDataRequest from '../enums/ELeaderboardDataRequest';
import ELeaderboardDisplayType from '../enums/ELeaderboardDisplayType';
import ELeaderboardSortMethod from '../enums/ELeaderboardSortMethod';
import ELeaderboardUploadScoreMethod from '../enums/ELeaderboardUploadScoreMethod';
import ELicenseFlags from '../enums/ELicenseFlags';
import ELicenseType from '../enums/ELicenseType';
import ELobbyComparison from '../enums/ELobbyComparison';
import ELobbyFilterType from '../enums/ELobbyFilterType';
import ELobbyStatus from '../enums/ELobbyStatus';
import ELobbyType from '../enums/ELobbyType';
import ELogFileType from '../enums/ELogFileType';
import EMarketingMessageAssociationType from '../enums/EMarketingMessageAssociationType';
import EMarketingMessageFlags from '../enums/EMarketingMessageFlags';
import EMarketingMessageLookupType from '../enums/EMarketingMessageLookupType';
import EMarketingMessageType from '../enums/EMarketingMessageType';
import EMarketingMessageVisibility from '../enums/EMarketingMessageVisibility';
import EMessageReactionType from '../enums/EMessageReactionType';
import EMMSLobbyStatus from '../enums/EMMSLobbyStatus';
import EMouseMode from '../enums/EMouseMode';
import EMsg from '../enums/EMsg';
import EMsgClanAccountFlags from '../enums/EMsgClanAccountFlags';
import ENewSteamAnnouncementState from '../enums/ENewSteamAnnouncementState';
import ENewsUpdateType from '../enums/ENewsUpdateType';
import ENotificationSetting from '../enums/ENotificationSetting';
import EOSBranch from '../enums/EOSBranch';
import EOSType from '../enums/EOSType';
import EPackageStatus from '../enums/EPackageStatus';
import EPaymentMethod from '../enums/EPaymentMethod';
import EPersonaState from '../enums/EPersonaState';
import EPersonaStateFlag from '../enums/EPersonaStateFlag';
import EPlatformType from '../enums/EPlatformType';
import EPlaytestStatus from '../enums/EPlaytestStatus';
import EProfileCustomizationStyle from '../enums/EProfileCustomizationStyle';
import EProfileCustomizationType from '../enums/EProfileCustomizationType';
import EProtoAppType from '../enums/EProtoAppType';
import EProtoClanEventType from '../enums/EProtoClanEventType';
import EProtoExecutionSite from '../enums/EProtoExecutionSite';
import EProvideDeckFeedbackPreference from '../enums/EProvideDeckFeedbackPreference';
import EPublishedFileForSaleStatus from '../enums/EPublishedFileForSaleStatus';
import EPublishedFileInappropriateProvider from '../enums/EPublishedFileInappropriateProvider';
import EPublishedFileInappropriateResult from '../enums/EPublishedFileInappropriateResult';
import EPublishedFileQueryType from '../enums/EPublishedFileQueryType';
import EPublishedFileRevision from '../enums/EPublishedFileRevision';
import EPublishedFileStorageSystem from '../enums/EPublishedFileStorageSystem';
import EPublishedFileVisibility from '../enums/EPublishedFileVisibility';
import EPurchaseResultDetail from '../enums/EPurchaseResultDetail';
import ERegionCode from '../enums/ERegionCode';
import ERemoteClientBroadcastMsg from '../enums/ERemoteClientBroadcastMsg';
import ERemoteClientService from '../enums/ERemoteClientService';
import ERemoteDeviceAuthorizationResult from '../enums/ERemoteDeviceAuthorizationResult';
import ERemoteDeviceStreamingResult from '../enums/ERemoteDeviceStreamingResult';
import ERemoteStoragePlatform from '../enums/ERemoteStoragePlatform';
import EResult from '../enums/EResult';
import EScalingFilter from '../enums/EScalingFilter';
import ESDCardFormatStage from '../enums/ESDCardFormatStage';
import EServerFlags from '../enums/EServerFlags';
import EServerType from '../enums/EServerType';
import ESessionPersistence from '../enums/ESessionPersistence';
import ESplitScalingFilter from '../enums/ESplitScalingFilter';
import ESplitScalingScaler from '../enums/ESplitScalingScaler';
import ESteamDatagramMsgID from '../enums/ESteamDatagramMsgID';
import ESteamDeckCompatibilityCategory from '../enums/ESteamDeckCompatibilityCategory';
import ESteamDeckCompatibilityFeedback from '../enums/ESteamDeckCompatibilityFeedback';
import ESteamDeckCompatibilityResultDisplayType from '../enums/ESteamDeckCompatibilityResultDisplayType';
import ESteamDeckKeyboardLayout from '../enums/ESteamDeckKeyboardLayout';
import ESteamNetworkingSocketsCipher from '../enums/ESteamNetworkingSocketsCipher';
import ESteamNetworkingUDPMsgID from '../enums/ESteamNetworkingUDPMsgID';
import ESteamPipeOperationType from '../enums/ESteamPipeOperationType';
import ESteamPipeWorkType from '../enums/ESteamPipeWorkType';
import ESteamReviewScore from '../enums/ESteamReviewScore';
import ESteamTVContentTemplate from '../enums/ESteamTVContentTemplate';
import EStorageBlockContentType from '../enums/EStorageBlockContentType';
import EStorageBlockFileSystemType from '../enums/EStorageBlockFileSystemType';
import EStorageDriveMediaType from '../enums/EStorageDriveMediaType';
import EStoreAppType from '../enums/EStoreAppType';
import EStoreCategoryType from '../enums/EStoreCategoryType';
import EStoreDiscoveryQueueType from '../enums/EStoreDiscoveryQueueType';
import EStoreItemType from '../enums/EStoreItemType';
import EStreamActivity from '../enums/EStreamActivity';
import EStreamAudioCodec from '../enums/EStreamAudioCodec';
import EStreamBitrate from '../enums/EStreamBitrate';
import EStreamChannel from '../enums/EStreamChannel';
import EStreamColorspace from '../enums/EStreamColorspace';
import EStreamControllerConfigMsg from '../enums/EStreamControllerConfigMsg';
import EStreamControlMessage from '../enums/EStreamControlMessage';
import EStreamDataMessage from '../enums/EStreamDataMessage';
import EStreamDeviceFormFactor from '../enums/EStreamDeviceFormFactor';
import EStreamDiscoveryMessage from '../enums/EStreamDiscoveryMessage';
import EStreamFrameEvent from '../enums/EStreamFrameEvent';
import EStreamFramerateLimiter from '../enums/EStreamFramerateLimiter';
import EStreamFrameResult from '../enums/EStreamFrameResult';
import EStreamHostPlayAudioPreference from '../enums/EStreamHostPlayAudioPreference';
import EStreamingDataType from '../enums/EStreamingDataType';
import EStreamInterface from '../enums/EStreamInterface';
import EStreamMouseButton from '../enums/EStreamMouseButton';
import EStreamMouseWheelDirection from '../enums/EStreamMouseWheelDirection';
import EStreamP2PScope from '../enums/EStreamP2PScope';
import EStreamQualityPreference from '../enums/EStreamQualityPreference';
import EStreamStatsMessage from '../enums/EStreamStatsMessage';
import EStreamTransport from '../enums/EStreamTransport';
import EStreamVersion from '../enums/EStreamVersion';
import EStreamVideoCodec from '../enums/EStreamVideoCodec';
import ESystemAudioChannel from '../enums/ESystemAudioChannel';
import ESystemAudioDirection from '../enums/ESystemAudioDirection';
import ESystemAudioPortDirection from '../enums/ESystemAudioPortDirection';
import ESystemAudioPortType from '../enums/ESystemAudioPortType';
import ESystemDisplayCompatibilityMode from '../enums/ESystemDisplayCompatibilityMode';
import ESystemFanControlMode from '../enums/ESystemFanControlMode';
import ESystemIMType from '../enums/ESystemIMType';
import ESystemServiceState from '../enums/ESystemServiceState';
import ESystemUpdateNotificationType from '../enums/ESystemUpdateNotificationType';
import ETextFilterSetting from '../enums/ETextFilterSetting';
import ETokenRenewalType from '../enums/ETokenRenewalType';
import ETouchGesture from '../enums/ETouchGesture';
import ETradeOfferConfirmationMethod from '../enums/ETradeOfferConfirmationMethod';
import ETradeOfferState from '../enums/ETradeOfferState';
import EUCMFilePrivacyState from '../enums/EUCMFilePrivacyState';
import EUdpPacketType from '../enums/EUdpPacketType';
import EUniverse from '../enums/EUniverse';
import EUpdaterState from '../enums/EUpdaterState';
import EUpdaterType from '../enums/EUpdaterType';
import EUserReviewScore from '../enums/EUserReviewScore';
import EUserReviewScorePreference from '../enums/EUserReviewScorePreference';
import EValveIndexComponent from '../enums/EValveIndexComponent';
import EVideoFormat from '../enums/EVideoFormat';
import EVoiceCallState from '../enums/EVoiceCallState';
import EWorkshopEnumerationType from '../enums/EWorkshopEnumerationType';
import EWorkshopFileAction from '../enums/EWorkshopFileAction';
import EWorkshopFileType from '../enums/EWorkshopFileType';
import E_STAR_GlyphWriteResult from '../enums/E_STAR_GlyphWriteResult';

///////////////////////////////////////////////
// clientmetrics.proto
///////////////////////////////////////////////

export interface CClientMetrics_ClientBootstrap_RequestInfo {
	original_hostname?: string;
	actual_hostname?: string;
	path?: string;
	base_name?: string;
	success?: boolean;
	status_code?: number;
	address_of_request_url?: string;
	response_time_ms?: number;
	bytes_received?: string;
	num_retries?: number;
}

export interface CClientMetrics_ClientBootstrap_Summary {
	launcher_type?: number;
	steam_realm?: number;
	beta_name?: string;
	download_completed?: boolean;
	total_time_ms?: number;
	manifest_requests?: CClientMetrics_ClientBootstrap_RequestInfo[];
	package_requests?: CClientMetrics_ClientBootstrap_RequestInfo[];
}

export interface CClientMetrics_ContentDownloadResponse_Counts {
	class_100?: number;
	class_200?: number;
	class_300?: number;
	class_400?: number;
	class_500?: number;
	no_response?: number;
	class_unknown?: number;
}

export interface CClientMetrics_ContentDownloadResponse_HostCounts {
	hostname?: string;
	source_type?: number;
	counts?: CClientMetrics_ContentDownloadResponse_Counts;
}

export interface CClientMetrics_ContentDownloadResponse_Hosts {
	hosts?: CClientMetrics_ContentDownloadResponse_HostCounts[];
}

///////////////////////////////////////////////
// contenthubs.proto
///////////////////////////////////////////////

export interface CStorePageFilter {
	sale_filter?: CStorePageFilter_SalePageFilter;
	content_hub_filter?: CStorePageFilter_ContentHubFilter;
	store_filters?: CStorePageFilter_StoreFilter[];
}

export interface CStorePageFilter_SalePageFilter {
	sale_tagid?: number;
}

export interface CStorePageFilter_ContentHubFilter {
	hub_type?: string;
	hub_category?: string;
	hub_tagid?: number;
	discount_filter?: EContentHubDiscountFilterType;
	optin?: CStorePageFilter_ContentHubFilter_OptInInfo;
}

export interface CStorePageFilter_ContentHubFilter_OptInInfo {
	name?: string;
	optin_tagid?: number;
	prune_tagid?: number;
	optin_only?: boolean;
}

export interface CStorePageFilter_StoreFilter {
	filter_json?: string;
	cache_key?: string;
}

export interface CMsgIPAddress {
	v4?: number;
	v6?: Buffer;
}

export interface CMsgIPAddressBucket {
	original_ip_address?: CMsgIPAddress;
	bucket?: string;
}

export interface CMsgGCRoutingProtoBufHeader {
	dst_gcid_queue?: string;
	dst_gc_dir_index?: number;
}

export interface CMsgProtoBufHeader {
	steamid?: string;
	client_sessionid?: number;
	routing_appid?: number;
	jobid_source?: string;
	jobid_target?: string;
	target_job_name?: string;
	seq_num?: number;
	eresult?: EResult;
	error_message?: string;
	auth_account_flags?: number;
	token_source?: number;
	admin_spoofing_user?: boolean;
	transport_error?: number;
	messageid?: string;
	publisher_group_id?: number;
	sysid?: number;
	trace_tag?: string;
	webapi_key_id?: number;
	is_from_external_source?: boolean;
	forward_to_sysid?: number[];
	cm_sysid?: number;
	launcher_type?: number;
	realm?: number;
	timeout_ms?: number;
	debug_source?: string;
	debug_source_string_index?: number;
	token_id?: string;
	routing_gc?: CMsgGCRoutingProtoBufHeader;
	ip?: number;
	ip_v6?: Buffer;
}

export interface CMsgMulti {
	size_unzipped?: number;
	message_body?: Buffer;
}

export interface CMsgProtobufWrapped {
	message_body?: Buffer;
}

export interface CMsgAuthTicket {
	estate?: number;
	eresult?: EResult;
	steamid?: string;
	gameid?: string;
	h_steam_pipe?: number;
	ticket_crc?: number;
	ticket?: Buffer;
	server_secret?: Buffer;
}

export interface CCDDBAppDetailCommon {
	appid?: number;
	name?: string;
	icon?: string;
	tool?: boolean;
	demo?: boolean;
	media?: boolean;
	community_visible_stats?: boolean;
	friendly_name?: string;
	propagation?: string;
	has_adult_content?: boolean;
	is_visible_in_steam_china?: boolean;
	app_type?: number;
	has_adult_content_sex?: boolean;
	has_adult_content_violence?: boolean;
	content_descriptorids?: number[];
}

export interface CMsgAppRights {
	edit_info?: boolean;
	publish?: boolean;
	view_error_data?: boolean;
	download?: boolean;
	upload_cdkeys?: boolean;
	generate_cdkeys?: boolean;
	view_financials?: boolean;
	manage_ceg?: boolean;
	manage_signing?: boolean;
	manage_cdkeys?: boolean;
	edit_marketing?: boolean;
	economy_support?: boolean;
	economy_support_supervisor?: boolean;
	manage_pricing?: boolean;
	broadcast_live?: boolean;
	view_marketing_traffic?: boolean;
	edit_store_display_content?: boolean;
}

export interface CCuratorPreferences {
	supported_languages?: number;
	platform_windows?: boolean;
	platform_mac?: boolean;
	platform_linux?: boolean;
	vr_content?: boolean;
	adult_content_violence?: boolean;
	adult_content_sex?: boolean;
	timestamp_updated?: number;
	tagids_curated?: number[];
	tagids_filtered?: number[];
	website_title?: string;
	website_url?: string;
	discussion_url?: string;
	show_broadcast?: boolean;
}

export interface CLocalizationToken {
	language?: number;
	localized_string?: string;
}

export interface CClanEventUserNewsTuple {
	clanid?: number;
	event_gid?: string;
	announcement_gid?: string;
	rtime_start?: number;
	rtime_end?: number;
	priority_score?: number;
	type?: number;
	clamp_range_slot?: number;
	appid?: number;
	rtime32_last_modified?: number;
}

export interface CClanMatchEventByRange {
	rtime_before?: number;
	rtime_after?: number;
	qualified?: number;
	events?: CClanEventUserNewsTuple[];
}

export interface CCommunity_ClanAnnouncementInfo {
	gid?: string;
	clanid?: string;
	posterid?: string;
	headline?: string;
	posttime?: number;
	updatetime?: number;
	body?: string;
	commentcount?: number;
	tags?: string[];
	language?: number;
	hidden?: boolean;
	forum_topic_id?: string;
	event_gid?: string;
	voteupcount?: number;
	votedowncount?: number;
	ban_check_result?: EBanContentCheckResult;
	banned?: boolean;
}

export interface CClanEventData {
	gid?: string;
	clan_steamid?: string;
	event_name?: string;
	event_type?: EProtoClanEventType;
	appid?: number;
	server_address?: string;
	server_password?: string;
	rtime32_start_time?: number;
	rtime32_end_time?: number;
	comment_count?: number;
	creator_steamid?: string;
	last_update_steamid?: string;
	event_notes?: string;
	jsondata?: string;
	announcement_body?: CCommunity_ClanAnnouncementInfo;
	published?: boolean;
	hidden?: boolean;
	rtime32_visibility_start?: number;
	rtime32_visibility_end?: number;
	broadcaster_accountid?: number;
	follower_count?: number;
	ignore_count?: number;
	forum_topic_id?: string;
	rtime32_last_modified?: number;
	news_post_gid?: string;
	rtime_mod_reviewed?: number;
	featured_app_tagid?: number;
	referenced_appids?: number[];
	build_id?: number;
	build_branch?: string;
}

export interface CBilling_Address {
	first_name?: string;
	last_name?: string;
	address1?: string;
	address2?: string;
	city?: string;
	us_state?: string;
	country_code?: string;
	postcode?: string;
	zip_plus4?: number;
	phone?: string;
}

export interface CPackageReservationStatus {
	packageid?: number;
	reservation_state?: number;
	queue_position?: number;
	total_queue_size?: number;
	reservation_country_code?: string;
	expired?: boolean;
	time_expires?: number;
	time_reserved?: number;
}

export interface CMsgKeyValuePair {
	name?: string;
	value?: string;
}

export interface CMsgKeyValueSet {
	pairs?: CMsgKeyValuePair[];
}

///////////////////////////////////////////////
// content_manifest.proto
///////////////////////////////////////////////

export interface ContentManifestPayload {
	mappings?: ContentManifestPayload_FileMapping[];
}

export interface ContentManifestPayload_FileMapping {
	filename?: string;
	size?: string;
	flags?: number;
	sha_filename?: Buffer;
	sha_content?: Buffer;
	chunks?: ContentManifestPayload_FileMapping_ChunkData[];
	linktarget?: string;
}

export interface ContentManifestPayload_FileMapping_ChunkData {
	sha?: Buffer;
	crc?: number;
	offset?: string;
	cb_original?: number;
	cb_compressed?: number;
}

export interface ContentManifestMetadata {
	depot_id?: number;
	gid_manifest?: string;
	creation_time?: number;
	filenames_encrypted?: boolean;
	cb_disk_original?: string;
	cb_disk_compressed?: string;
	unique_chunks?: number;
	crc_encrypted?: number;
	crc_clear?: number;
}

export interface ContentManifestSignature {
	signature?: Buffer;
}

export interface ContentDeltaChunks {
	depot_id?: number;
	manifest_id_source?: string;
	manifest_id_target?: string;
	deltaChunks?: ContentDeltaChunks_DeltaChunk[];
	chunk_data_location?: EContentDeltaChunkDataLocation;
}

export interface ContentDeltaChunks_DeltaChunk {
	sha_source?: Buffer;
	sha_target?: Buffer;
	size_original?: number;
	patch_method?: number;
	chunk?: Buffer;
	size_delta?: number;
}

///////////////////////////////////////////////
// encrypted_app_ticket.proto
///////////////////////////////////////////////

export interface EncryptedAppTicket {
	ticket_version_no?: number;
	crc_encryptedticket?: number;
	cb_encrypteduserdata?: number;
	cb_encrypted_appownershipticket?: number;
	encrypted_ticket?: Buffer;
}

///////////////////////////////////////////////
// enums.proto
///////////////////////////////////////////////

///////////////////////////////////////////////
// enums_clientserver.proto
///////////////////////////////////////////////

///////////////////////////////////////////////
// enums_productinfo.proto
///////////////////////////////////////////////

///////////////////////////////////////////////
// friends_mobile.proto
///////////////////////////////////////////////

export interface CHelpRequestLogs_UploadUserApplicationLog_Request {
	appid?: number;
	log_type?: string;
	version_string?: string;
	log_contents?: string;
}

export interface CHelpRequestLogs_UploadUserApplicationLog_Response {
	id?: string;
}

export interface CMsgClientAppMinutesPlayedData {
	minutes_played?: CMsgClientAppMinutesPlayedData_AppMinutesPlayedData[];
}

export interface CMsgClientAppMinutesPlayedData_AppMinutesPlayedData {
	app_id?: number;
	forever?: number;
	last_two_weeks?: number;
}

export interface CCommunity_GetApps_Request {
	appids?: number[];
	language?: number;
}

export interface CCommunity_GetApps_Response {
	apps?: CCDDBAppDetailCommon[];
}

export interface CCommunity_GetAppRichPresenceLocalization_Request {
	appid?: number;
	language?: string;
}

export interface CCommunity_GetAppRichPresenceLocalization_Response {
	appid?: number;
	token_lists?: CCommunity_GetAppRichPresenceLocalization_Response_TokenList[];
}

export interface CCommunity_GetAppRichPresenceLocalization_Response_Token {
	name?: string;
	value?: string;
}

export interface CCommunity_GetAppRichPresenceLocalization_Response_TokenList {
	language?: string;
	tokens?: CCommunity_GetAppRichPresenceLocalization_Response_Token[];
}

export interface CCommunity_GetCommentThread_Request {
	steamid?: string;
	comment_thread_type?: number;
	gidfeature?: string;
	gidfeature2?: string;
	commentthreadid?: string;
	start?: number;
	count?: number;
	upvoters?: number;
	include_deleted?: boolean;
	gidcomment?: string;
	time_oldest?: number;
	oldest_first?: boolean;
}

export interface CCommunity_Comment {
	gidcomment?: string;
	steamid?: string;
	timestamp?: number;
	text?: string;
	upvotes?: number;
	hidden?: boolean;
	hidden_by_user?: boolean;
	deleted?: boolean;
	ipaddress?: CMsgIPAddress;
	total_hidden?: number;
	upvoted_by_user?: boolean;
}

export interface CCommunity_GetCommentThread_Response {
	comments?: CCommunity_Comment[];
	deleted_comments?: CCommunity_Comment[];
	steamid?: string;
	commentthreadid?: string;
	start?: number;
	count?: number;
	total_count?: number;
	upvotes?: number;
	upvoters?: number[];
	user_subscribed?: boolean;
	user_upvoted?: boolean;
	answer_commentid?: string;
	answer_actor?: number;
	answer_actor_rank?: number;
	can_post?: boolean;
}

export interface CCommunity_PostCommentToThread_Request {
	steamid?: string;
	comment_thread_type?: number;
	gidfeature?: string;
	gidfeature2?: string;
	text?: string;
	gidparentcomment?: string;
	suppress_notifications?: boolean;
}

export interface CCommunity_PostCommentToThread_Response {
	gidcomment?: string;
	commentthreadid?: string;
	count?: number;
	upvotes?: number;
}

export interface CCommunity_DeleteCommentFromThread_Request {
	steamid?: string;
	comment_thread_type?: number;
	gidfeature?: string;
	gidfeature2?: string;
	gidcomment?: string;
	undelete?: boolean;
}

export interface CCommunity_DeleteCommentFromThread_Response {
}

export interface CCommunity_RateCommentThread_Request {
	commentthreadtype?: string;
	steamid?: string;
	gidfeature?: string;
	gidfeature2?: string;
	gidcomment?: string;
	rate_up?: boolean;
	suppress_notifications?: boolean;
}

export interface CCommunity_RateCommentThread_Response {
	gidcomment?: string;
	commentthreadid?: string;
	count?: number;
	upvotes?: number;
	has_upvoted?: boolean;
}

export interface CCommunity_GetCommentThreadRatings_Request {
	commentthreadtype?: string;
	steamid?: string;
	gidfeature?: string;
	gidfeature2?: string;
	gidcomment?: string;
	max_results?: number;
}

export interface CCommunity_GetCommentThreadRatings_Response {
	commentthreadid?: string;
	gidcomment?: string;
	upvotes?: number;
	has_upvoted?: boolean;
	upvoter_accountids?: number[];
}

export interface CCommunity_RateClanAnnouncement_Request {
	announcementid?: string;
	vote_up?: boolean;
}

export interface CCommunity_RateClanAnnouncement_Response {
}

export interface CCommunity_GetClanAnnouncementVoteForUser_Request {
	announcementid?: string;
}

export interface CCommunity_GetClanAnnouncementVoteForUser_Response {
	voted_up?: boolean;
	voted_down?: boolean;
}

export interface CAppPriority {
	priority?: number;
	appid?: number[];
}

export interface CCommunity_GetUserPartnerEventNews_Request {
	count?: number;
	offset?: number;
	rtime32_start_time?: number;
	rtime32_end_time?: number;
	language_preference?: number[];
	filter_event_type?: number[];
	filter_to_appid?: boolean;
	app_list?: CAppPriority[];
	count_after?: number;
	count_before?: number;
}

export interface CCommunity_GetUserPartnerEventNews_Response {
	results?: CClanMatchEventByRange[];
}

export interface CCommunity_GetBestEventsForUser_Request {
	include_steam_blog?: boolean;
	filter_to_played_within_days?: number;
}

export interface CCommunity_PartnerEventResult {
	clanid?: number;
	event_gid?: string;
	announcement_gid?: string;
	appid?: number;
	possible_takeover?: boolean;
	rtime32_last_modified?: number;
	user_app_priority?: number;
}

export interface CCommunity_GetBestEventsForUser_Response {
	results?: CCommunity_PartnerEventResult[];
}

export interface CCommunity_ClearUserPartnerEventsAppPriorities_Request {
}

export interface CCommunity_ClearUserPartnerEventsAppPriorities_Response {
}

export interface CCommunity_PartnerEventsAppPriority {
	appid?: number;
	user_app_priority?: number;
}

export interface CCommunity_GetUserPartnerEventsAppPriorities_Request {
}

export interface CCommunity_GetUserPartnerEventsAppPriorities_Response {
	priorities?: CCommunity_PartnerEventsAppPriority[];
}

export interface CCommunity_ClearSinglePartnerEventsAppPriority_Request {
	appid?: number;
}

export interface CCommunity_ClearSinglePartnerEventsAppPriority_Response {
}

export interface CCommunity_PartnerEventsShowMoreForApp_Request {
	appid?: number;
}

export interface CCommunity_PartnerEventsShowMoreForApp_Response {
}

export interface CCommunity_PartnerEventsShowLessForApp_Request {
	appid?: number;
}

export interface CCommunity_PartnerEventsShowLessForApp_Response {
}

export interface CCommunity_MarkPartnerEventsForUser_Request {
	markings?: CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking[];
}

export interface CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking {
	clanid?: number;
	event_gid?: string;
	display_location?: number;
	mark_shown?: boolean;
	mark_read?: boolean;
}

export interface CCommunity_MarkPartnerEventsForUser_Response {
}

export interface CProductImpressionsFromClient_Notification {
	impressions?: CProductImpressionsFromClient_Notification_Impression[];
}

export interface CProductImpressionsFromClient_Notification_Impression {
	type?: number;
	appid?: number;
	num_impressions?: number;
}

export interface CFriendsListCategory {
	groupid?: number;
	name?: string;
	accountid_members?: number[];
}

export interface CFriendsList_GetCategories_Request {
}

export interface CFriendsList_GetCategories_Response {
	categories?: CFriendsListCategory[];
}

export interface CFriendsListFavoriteEntry {
	accountid?: number;
	clanid?: number;
	chat_group_id?: string;
}

export interface CFriendsList_GetFavorites_Request {
}

export interface CFriendsList_GetFavorites_Response {
	favorites?: CFriendsListFavoriteEntry[];
}

export interface CFriendsList_SetFavorites_Request {
	favorites?: CFriendsListFavoriteEntry[];
}

export interface CFriendsList_SetFavorites_Response {
}

export interface CFriendsList_FavoritesChanged_Notification {
	favorites?: CFriendsListFavoriteEntry[];
}

export interface CFriendsList_GetFriendsList_Request {
}

export interface CFriendsList_GetFriendsList_Response {
	friendslist?: CMsgClientFriendsList;
}

export interface CMsgClientUCMEnumerateUserPublishedFiles {
	app_id?: number;
	start_index?: number;
	sort_order?: number;
}

export interface CMsgClientUCMEnumerateUserPublishedFilesResponse {
	eresult?: EResult;
	published_files?: CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId[];
	total_results?: number;
}

export interface CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId {
	published_file_id?: string;
}

export interface CMsgClientUCMEnumerateUserSubscribedFiles {
	app_id?: number;
	start_index?: number;
	list_type?: number;
	matching_file_type?: number;
	count?: number;
}

export interface CMsgClientUCMEnumerateUserSubscribedFilesResponse {
	eresult?: EResult;
	subscribed_files?: CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId[];
	total_results?: number;
}

export interface CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId {
	published_file_id?: string;
	rtime32_subscribed?: number;
}

export interface CMsgClientUCMPublishedFileDeleted {
	published_file_id?: string;
	app_id?: number;
}

export interface CMsgClientWorkshopItemInfoRequest {
	app_id?: number;
	last_time_updated?: number;
	workshop_items?: CMsgClientWorkshopItemInfoRequest_WorkshopItem[];
}

export interface CMsgClientWorkshopItemInfoRequest_WorkshopItem {
	published_file_id?: string;
	time_updated?: number;
}

export interface CMsgClientWorkshopItemInfoResponse {
	eresult?: EResult;
	update_time?: number;
	workshop_items?: CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo[];
	private_items?: string[];
}

export interface CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo {
	published_file_id?: string;
	time_updated?: number;
	manifest_id?: string;
	is_legacy?: boolean;
}

export interface CMsgClientUCMGetPublishedFilesForUser {
	app_id?: number;
	creator_steam_id?: string;
	required_tags?: string[];
	excluded_tags?: string[];
	start_index?: number;
}

export interface CMsgClientUCMGetPublishedFilesForUserResponse {
	eresult?: EResult;
	published_files?: CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId[];
	total_results?: number;
}

export interface CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId {
	published_file_id?: string;
}

export interface CMsgCREEnumeratePublishedFiles {
	app_id?: number;
	query_type?: number;
	start_index?: number;
	days?: number;
	count?: number;
	tags?: string[];
	user_tags?: string[];
	matching_file_type?: number;
}

export interface CMsgCREEnumeratePublishedFilesResponse {
	eresult?: EResult;
	published_files?: CMsgCREEnumeratePublishedFilesResponse_PublishedFileId[];
	total_results?: number;
}

export interface CMsgCREEnumeratePublishedFilesResponse_PublishedFileId {
	published_file_id?: string;
	votes_for?: number;
	votes_against?: number;
	reports?: number;
	score?: number;
}

export interface CMsgGameServerPingSample {
	my_ip?: number;
	gs_app_id?: number;
	gs_samples?: CMsgGameServerPingSample_Sample[];
}

export interface CMsgGameServerPingSample_Sample {
	ip?: number;
	avg_ping_ms?: number;
	stddev_ping_ms_x10?: number;
}

export interface CClan_RespondToClanInvite_Request {
	steamid?: string;
	accept?: boolean;
}

export interface CClan_RespondToClanInvite_Response {
}

export interface CVoiceChat_RequestOneOnOneChat_Request {
	steamid_partner?: string;
}

export interface CVoiceChat_RequestOneOnOneChat_Response {
	voice_chatid?: string;
}

export interface CVoiceChat_OneOnOneChatRequested_Notification {
	voice_chatid?: string;
	steamid_partner?: string;
}

export interface CVoiceChat_AnswerOneOnOneChat_Request {
	voice_chatid?: string;
	steamid_partner?: string;
	accepted_request?: boolean;
}

export interface CVoiceChat_AnswerOneOnOneChat_Response {
}

export interface CVoiceChat_OneOnOneChatRequestResponse_Notification {
	voicechat_id?: string;
	steamid_partner?: string;
	accepted_request?: boolean;
}

export interface CVoiceChat_EndOneOnOneChat_Request {
	steamid_partner?: string;
}

export interface CVoiceChat_EndOneOnOneChat_Response {
}

export interface CVoiceChat_LeaveOneOnOneChat_Request {
	steamid_partner?: string;
	voice_chatid?: string;
}

export interface CVoiceChat_LeaveOneOnOneChat_Response {
}

export interface CVoiceChat_UserJoinedVoiceChat_Notification {
	voice_chatid?: string;
	user_steamid?: string;
	chatid?: string;
	one_on_one_steamid_lower?: string;
	one_on_one_steamid_higher?: string;
	chat_group_id?: string;
	user_sessionid?: number;
}

export interface CVoiceChat_UserVoiceStatus_Notification {
	voice_chatid?: string;
	user_steamid?: string;
	user_muted_mic_locally?: boolean;
	user_muted_output_locally?: boolean;
	user_has_no_mic_for_session?: boolean;
	user_webaudio_sample_rate?: number;
}

export interface CVoiceChat_AllMembersStatus_Notification {
	voice_chatid?: string;
	users?: CVoiceChat_UserVoiceStatus_Notification[];
}

export interface CVoiceChat_UpdateVoiceChatWebRTCData_Request {
	voice_chatid?: string;
	ip_webrtc_server?: number;
	port_webrtc_server?: number;
	ip_webrtc_client?: number;
	port_webrtc_client?: number;
	ssrc_my_sending_stream?: number;
	user_agent?: string;
	has_audio_worklets_support?: boolean;
}

export interface CVoiceChat_UpdateVoiceChatWebRTCData_Response {
	send_client_voice_logs?: boolean;
}

export interface CVoiceChat_UploadClientVoiceChatLogs_Request {
	voice_chatid?: string;
	client_voice_logs_new_lines?: string;
}

export interface CVoiceChat_UploadClientVoiceChatLogs_Response {
}

export interface CVoiceChat_LeaveVoiceChat_Request {
	voice_chatid?: string;
}

export interface CVoiceChat_LeaveVoiceChat_Response {
}

export interface CVoiceChat_UserLeftVoiceChat_Notification {
	voice_chatid?: string;
	user_steamid?: string;
	chatid?: string;
	one_on_one_steamid_lower?: string;
	one_on_one_steamid_higher?: string;
	chat_group_id?: string;
	user_sessionid?: number;
}

export interface CVoiceChat_VoiceChatEnded_Notification {
	voice_chatid?: string;
	one_on_one_steamid_lower?: string;
	one_on_one_steamid_higher?: string;
	chatid?: string;
	chat_group_id?: string;
}

export interface CWebRTCClient_InitiateWebRTCConnection_Request {
	sdp?: string;
}

export interface CWebRTCClient_InitiateWebRTCConnection_Response {
	remote_description?: string;
}

export interface CWebRTC_WebRTCSessionConnected_Notification {
	ssrc?: number;
	client_ip?: number;
	client_port?: number;
	server_ip?: number;
	server_port?: number;
}

export interface CWebRTC_WebRTCUpdateRemoteDescription_Notification {
	remote_description?: string;
	remote_description_version?: string;
	ssrcs_to_accountids?: CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping[];
}

export interface CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping {
	ssrc?: number;
	accountid?: number;
}

export interface CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request {
	ip_webrtc_server?: number;
	port_webrtc_server?: number;
	ip_webrtc_session_client?: number;
	port_webrtc_session_client?: number;
	remote_description_version?: string;
}

export interface CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response {
}

export interface CMobilePerAccount_GetSettings_Request {
}

export interface CMobilePerAccount_GetSettings_Response {
	has_settings?: boolean;
	allow_sale_push?: boolean;
	allow_wishlist_push?: boolean;
	chat_notification_level?: number;
	notify_direct_chat?: boolean;
	notify_group_chat?: boolean;
	allow_event_push?: boolean;
}

export interface CMobilePerAccount_SetSettings_Request {
	allow_sale_push?: boolean;
	allow_wishlist_push?: boolean;
	chat_notification_level?: number;
	notify_direct_chat?: boolean;
	notify_group_chat?: boolean;
	allow_event_push?: boolean;
}

export interface CMobilePerAccount_SetSettings_Response {
}

export interface CMobileDevice_RegisterMobileDevice_Request {
	deviceid?: string;
	language?: string;
	push_enabled?: boolean;
	app_version?: string;
	os_version?: string;
	device_model?: string;
	twofactor_device_identifier?: string;
	mobile_app?: number;
}

export interface CMobileDevice_RegisterMobileDevice_Response {
	unique_deviceid?: number;
}

export interface CMobileDevice_DeregisterMobileDevice_Notification {
	deviceid?: string;
}

export interface UnknownProto {
}

export interface HelpRequestLogs {
}

export interface Community {
}

export interface ExperimentService {
}

export interface FriendsList {
}

export interface FriendsListClient {
}

export interface Clan {
}

export interface VoiceChat {
}

export interface VoiceChatClient {
}

export interface WebRTCClient {
}

export interface WebRTCClientNotifications {
}

export interface MobilePerAccount {
}

export interface MobileDevice {
}

export interface NoResponse {
}

export interface CMsgClientFriendMsg {
	steamid?: string;
	chat_entry_type?: number;
	message?: Buffer;
	rtime32_server_timestamp?: number;
	echo_to_sender?: boolean;
}

export interface CMsgClientFriendMsgIncoming {
	steamid_from?: string;
	chat_entry_type?: number;
	from_limited_account?: boolean;
	message?: Buffer;
	rtime32_server_timestamp?: number;
}

export interface CMsgClientAddFriend {
	steamid_to_add?: string;
	accountname_or_email_to_add?: string;
}

export interface CMsgClientAddFriendResponse {
	eresult?: EResult;
	steam_id_added?: string;
	persona_name_added?: string;
}

export interface CMsgClientRemoveFriend {
	friendid?: string;
}

export interface CMsgClientHideFriend {
	friendid?: string;
	hide?: boolean;
}

export interface CMsgClientFriendsList {
	bincremental?: boolean;
	friends?: CMsgClientFriendsList_Friend[];
	max_friend_count?: number;
	active_friend_count?: number;
	friends_limit_hit?: boolean;
}

export interface CMsgClientFriendsList_Friend {
	ulfriendid?: string;
	efriendrelationship?: number;
}

export interface CMsgClientFriendsGroupsList {
	bremoval?: boolean;
	bincremental?: boolean;
	friendGroups?: CMsgClientFriendsGroupsList_FriendGroup[];
	memberships?: CMsgClientFriendsGroupsList_FriendGroupsMembership[];
}

export interface CMsgClientFriendsGroupsList_FriendGroup {
	nGroupID?: number;
	strGroupName?: string;
}

export interface CMsgClientFriendsGroupsList_FriendGroupsMembership {
	ulSteamID?: string;
	nGroupID?: number;
}

export interface CMsgClientPlayerNicknameList {
	removal?: boolean;
	incremental?: boolean;
	nicknames?: CMsgClientPlayerNicknameList_PlayerNickname[];
}

export interface CMsgClientPlayerNicknameList_PlayerNickname {
	steamid?: string;
	nickname?: string;
}

export interface CMsgClientSetPlayerNickname {
	steamid?: string;
	nickname?: string;
}

export interface CMsgClientSetPlayerNicknameResponse {
	eresult?: EResult;
}

export interface CMsgClientRequestFriendData {
	persona_state_requested?: number;
	friends?: string[];
}

export interface CMsgClientChangeStatus {
	persona_state?: number;
	player_name?: string;
	is_auto_generated_name?: boolean;
	high_priority?: boolean;
	persona_set_by_user?: boolean;
	persona_state_flags?: number;
	need_persona_response?: boolean;
	is_client_idle?: boolean;
}

export interface CMsgPersonaChangeResponse {
	result?: EResult;
	player_name?: string;
}

export interface CMsgClientPersonaState {
	status_flags?: number;
	friends?: CMsgClientPersonaState_Friend[];
}

export interface CMsgClientPersonaState_Friend {
	friendid?: string;
	persona_state?: number;
	game_played_app_id?: number;
	game_server_ip?: number;
	game_server_port?: number;
	persona_state_flags?: number;
	online_session_instances?: number;
	persona_set_by_user?: boolean;
	player_name?: string;
	query_port?: number;
	steamid_source?: string;
	avatar_hash?: Buffer;
	last_logoff?: number;
	last_logon?: number;
	last_seen_online?: number;
	clan_rank?: number;
	game_name?: string;
	gameid?: string;
	game_data_blob?: Buffer;
	clan_data?: CMsgClientPersonaState_Friend_ClanData;
	clan_tag?: string;
	rich_presence?: CMsgClientPersonaState_Friend_KV[];
	broadcast_id?: string;
	game_lobby_id?: string;
	watching_broadcast_accountid?: number;
	watching_broadcast_appid?: number;
	watching_broadcast_viewers?: number;
	watching_broadcast_title?: string;
	is_community_banned?: boolean;
	player_name_pending_review?: boolean;
	avatar_pending_review?: boolean;
}

export interface CMsgClientPersonaState_Friend_ClanData {
	ogg_app_id?: number;
	chat_group_id?: string;
}

export interface CMsgClientPersonaState_Friend_KV {
	key?: string;
	value?: string;
}

export interface CMsgClientFriendProfileInfo {
	steamid_friend?: string;
}

export interface CMsgClientFriendProfileInfoResponse {
	eresult?: EResult;
	steamid_friend?: string;
	time_created?: number;
	real_name?: string;
	city_name?: string;
	state_name?: string;
	country_name?: string;
	headline?: string;
	summary?: string;
}

export interface CMsgClientCreateFriendsGroup {
	steamid?: string;
	groupname?: string;
	steamid_friends?: string[];
}

export interface CMsgClientCreateFriendsGroupResponse {
	eresult?: EResult;
	groupid?: number;
}

export interface CMsgClientDeleteFriendsGroup {
	steamid?: string;
	groupid?: number;
}

export interface CMsgClientDeleteFriendsGroupResponse {
	eresult?: EResult;
}

export interface CMsgClientManageFriendsGroup {
	groupid?: number;
	groupname?: string;
	steamid_friends_added?: string[];
	steamid_friends_removed?: string[];
}

export interface CMsgClientManageFriendsGroupResponse {
	eresult?: EResult;
}

export interface CMsgClientAddFriendToGroup {
	groupid?: number;
	steamiduser?: string;
}

export interface CMsgClientAddFriendToGroupResponse {
	eresult?: EResult;
}

export interface CMsgClientRemoveFriendFromGroup {
	groupid?: number;
	steamiduser?: string;
}

export interface CMsgClientRemoveFriendFromGroupResponse {
	eresult?: EResult;
}

export interface CMsgClientGetEmoticonList {
}

export interface CMsgClientEmoticonList {
	emoticons?: CMsgClientEmoticonList_Emoticon[];
	stickers?: CMsgClientEmoticonList_Sticker[];
	effects?: CMsgClientEmoticonList_Effect[];
}

export interface CMsgClientEmoticonList_Emoticon {
	name?: string;
	count?: number;
	time_last_used?: number;
	use_count?: number;
	time_received?: number;
	appid?: number;
}

export interface CMsgClientEmoticonList_Sticker {
	name?: string;
	count?: number;
	time_received?: number;
	appid?: number;
	time_last_used?: number;
	use_count?: number;
}

export interface CMsgClientEmoticonList_Effect {
	name?: string;
	count?: number;
	time_received?: number;
	infinite_use?: boolean;
	appid?: number;
}

///////////////////////////////////////////////
// htmlmessages.proto
///////////////////////////////////////////////

export interface CMsgKeyUp {
	browser_handle?: number;
	keyCode?: number;
	modifiers?: number;
	nativeKeyCode?: number;
}

export interface CMsgKeyDown {
	browser_handle?: number;
	keyCode?: number;
	modifiers?: number;
	is_system_key?: boolean;
	nativeKeyCode?: number;
}

export interface CMsgKeyChar {
	browser_handle?: number;
	unichar?: number;
	modifiers?: number;
	keyCode?: number;
	nativeKeyCode?: number;
}

export interface CMsgMouseDown {
	browser_handle?: number;
	mouse_button?: number;
	modifiers?: number;
}

export interface CMsgMouseUp {
	browser_handle?: number;
	mouse_button?: number;
	modifiers?: number;
	is_off_panel?: boolean;
	x?: number;
	y?: number;
}

export interface CMsgMouseDblClick {
	browser_handle?: number;
	mouse_button?: number;
	modifiers?: number;
}

export interface CMsgMouseWheel {
	browser_handle?: number;
	deltax?: number;
	deltay?: number;
	modifiers?: number;
}

export interface CMsgMouseMove {
	browser_handle?: number;
	x?: number;
	y?: number;
	modifiers?: number;
}

export interface CMsgMouseLeave {
	browser_handle?: number;
}

export interface CMsgBrowserCreate {
	request_id?: number;
	useragent?: string;
	user_css?: string;
	native_dropdowns?: boolean;
	dpi_scaling?: number;
	offscreen?: boolean;
	initial_width?: number;
	initial_height?: number;
	window_icon?: string;
	borderless?: boolean;
	vroverlay_key?: string;
	browser_type?: number;
	initial_top?: number;
	initial_left?: number;
	only_allow_trusted_popups?: boolean;
	initial_url?: string;
	hwnd_parent?: string;
	creation_flags?: number;
}

export interface CMsgBrowserCreateResponse {
	browser_handle?: number;
	request_id?: number;
}

export interface CMsgBrowserRemove {
	browser_handle?: number;
}

export interface CMsgSetLocalFileRequestMapping {
	browser_handle?: number;
	request_url?: string;
	default_local_path?: string;
	routes?: CMsgSetLocalFileRequestMapping_AdditionalRoute[];
}

export interface CMsgSetLocalFileRequestMapping_AdditionalRoute {
	relative_url?: string;
	local_path?: string;
	allowed_extensions?: string;
	url_rewrite?: boolean;
}

export interface CMsgBrowserErrorStrings {
	browser_handle?: number;
	title?: string;
	header?: string;
	cache_miss?: string;
	bad_url?: string;
	connection_problem?: string;
	proxy_problem?: string;
	unknown?: string;
}

export interface CMsgBrowserSetName {
	browser_handle?: number;
	name?: string;
}

export interface CMsgBrowserSize {
	browser_handle?: number;
	width?: number;
	height?: number;
}

export interface CMsgBrowserSetMinSize {
	browser_handle?: number;
	width?: number;
	height?: number;
}

export interface CMsgBrowserPosition {
	browser_handle?: number;
	x?: number;
	y?: number;
	x_local?: number;
	y_local?: number;
}

export interface CMsgBrowserResized {
	browser_handle?: number;
	x?: number;
	y?: number;
	width?: number;
	height?: number;
	dpi_horizontal?: number;
	dpi_vertical?: number;
	display_name?: string;
}

export interface CMsgPostURL {
	browser_handle?: number;
	url?: string;
	post?: string;
	pageserial?: number;
}

export interface CMsgAddHeader {
	browser_handle?: number;
	key?: string;
	value?: string;
}

export interface CMsgStopLoad {
	browser_handle?: number;
}

export interface CMsgReload {
	browser_handle?: number;
}

export interface CMsgGoForward {
	browser_handle?: number;
}

export interface CMsgGoBack {
	browser_handle?: number;
}

export interface CMsgWasHidden {
	browser_handle?: number;
	hidden?: boolean;
}

export interface CMsgSetWindowVisibility {
	browser_handle?: number;
	visible?: boolean;
}

export interface CMsgClearHistory {
	browser_handle?: number;
}

export interface CMsgClearAllBrowsingData {
	browser_handle?: number;
}

export interface CMsgCopy {
	browser_handle?: number;
}

export interface CMsgPaste {
	browser_handle?: number;
}

export interface CMsgExecuteJavaScript {
	browser_handle?: number;
	script?: string;
}

export interface CMsgSetFocus {
	browser_handle?: number;
	focus?: boolean;
}

export interface CMsgHorizontalScrollBarSize {
	browser_handle?: number;
}

export interface CMsgHorizontalScrollBarSizeResponse {
	browser_handle?: number;
	scroll_max?: number;
	scroll?: number;
	zoom?: number;
	visible?: boolean;
	page_size?: number;
}

export interface CMsgVerticalScrollBarSize {
	browser_handle?: number;
}

export interface CMsgVerticalScrollBarSizeResponse {
	browser_handle?: number;
	scroll_max?: number;
	scroll?: number;
	zoom?: number;
	visible?: boolean;
	page_size?: number;
}

export interface CMsgFind {
	browser_handle?: number;
	find?: string;
	infind?: boolean;
	reverse?: boolean;
}

export interface CMsgStopFind {
	browser_handle?: number;
}

export interface CMsgSetHorizontalScroll {
	browser_handle?: number;
	scroll?: number;
}

export interface CMsgSetVerticalScroll {
	browser_handle?: number;
	scroll?: number;
}

export interface CMsgSetZoomLevel {
	browser_handle?: number;
	zoom?: number;
}

export interface CMsgViewSource {
	browser_handle?: number;
}

export interface CMsgBrowserReady {
	browser_handle?: number;
	vr_overlay_key?: string;
	hwnd_browser?: string;
}

export interface CMsgURLChanged {
	browser_handle?: number;
	url?: string;
	postData?: string;
	bIsRedirect?: boolean;
	pagetitle?: string;
	bNewNavigation?: boolean;
}

export interface CHistoryEntry {
	url?: string;
}

export interface CMsgHistoryChanged {
	browser_handle?: number;
	index?: number;
	entries?: CHistoryEntry[];
}

export interface CMsgLoadError {
	browser_handle?: number;
	error_code?: number;
	url?: string;
	error_description?: string;
}

export interface CHTMLHeader {
	key?: string;
	value?: string;
}

export interface CHTMLPageSecurityInfo {
	bIsSecure?: boolean;
	bHasCertError?: boolean;
	issuerName?: string;
	certName?: string;
	certExpiry?: number;
	nCertBits?: number;
	bIsEVCert?: boolean;
}

export interface CMsgFinishedRequest {
	browser_handle?: number;
	url?: string;
	pageTitle?: string;
}

export interface CMsgLoadedRequest {
	browser_handle?: number;
	url?: string;
	pageTitle?: string;
	headers?: CHTMLHeader[];
}

export interface CMsgPageSecurity {
	browser_handle?: number;
	url?: string;
	security_info?: CHTMLPageSecurityInfo;
}

export interface CMsgStartRequest {
	browser_handle?: number;
	url?: string;
	target?: string;
	postData?: string;
	bIsRedirect?: boolean;
}

export interface CMsgStartRequestResponse {
	browser_handle?: number;
	bAllow?: boolean;
}

export interface CMsgShowPopup {
	browser_handle?: number;
}

export interface CMsgHidePopup {
	browser_handle?: number;
}

export interface CMsgSizePopup {
	browser_handle?: number;
	x?: number;
	y?: number;
	wide?: number;
	tall?: number;
}

export interface CMsgOpenNewTab {
	browser_handle?: number;
	url?: string;
	bForeground?: boolean;
}

export interface CMsgPopupHTMLWindow {
	browser_handle?: number;
	url?: string;
	x?: number;
	y?: number;
	wide?: number;
	tall?: number;
	popup_index?: number;
	trusted_creator?: boolean;
	name?: string;
	hwnd?: string;
	parent_popup_index?: number;
}

export interface CMsgPopupHTMLWindowResponse {
	browser_handle?: number;
	bAllow?: boolean;
}

export interface CMsgSetHTMLTitle {
	browser_handle?: number;
	title?: string;
}

export interface CMsgLoadingResource {
	browser_handle?: number;
	url?: string;
}

export interface CMsgStatusText {
	browser_handle?: number;
	text?: string;
}

export interface CMsgSetCursor {
	browser_handle?: number;
	cursor?: number;
	custom_data?: Buffer;
	wide?: number;
	tall?: number;
	xhotspot?: number;
	yhotspot?: number;
}

export interface CMsgFileLoadDialog {
	browser_handle?: number;
	title?: string;
	initialFile?: string;
	accept_types?: string[];
	is_save?: boolean;
}

export interface CMsgFileLoadDialogResponse {
	browser_handle?: number;
	files?: string[];
}

export interface CMsgShowToolTip {
	browser_handle?: number;
	text?: string;
}

export interface CMsgUpdateToolTip {
	browser_handle?: number;
	text?: string;
}

export interface CMsgHideToolTip {
	browser_handle?: number;
}

export interface CMsgSearchResults {
	browser_handle?: number;
	activeMatch?: number;
	results?: number;
}

export interface CMsgClose {
	browser_handle?: number;
}

export interface CMsgSetSharedPaintBuffers {
	browser_handle?: number;
	wide?: number;
	tall?: number;
	source_pid?: string;
	source_handle?: string;
	handle?: string;
}

export interface CMsgAckSharedPaintBuffers {
	browser_handle?: number;
}

export interface CMsgNeedsPaint {
	browser_handle?: number;
	scrollx?: number;
	scrolly?: number;
	pagescale?: number;
	pageserial?: number;
	avg_frame_ms?: number;
	stddev_sum_frame_ms?: number;
	long_frame_ms?: number;
}

export interface CMsgComboNeedsPaint {
	browser_handle?: number;
	rgba?: string;
	combobox_wide?: number;
	combobox_tall?: number;
	shared_memory_handle?: string;
	shared_memory_size?: string;
}

export interface CMsgNeedsSharedTexturePaint {
	browser_handle?: number;
	share_handle?: number;
	width?: number;
	height?: number;
	scrollx?: number;
	scrolly?: number;
	pagescale?: number;
	pageserial?: number;
}

export interface CMsgGameOverlayTexturePaint {
	browser_handle?: number;
	width?: number;
	height?: number;
	scrollx?: number;
	scrolly?: number;
	pagescale?: number;
	pageserial?: number;
}

export interface CMsgGetZoom {
	browser_handle?: number;
}

export interface CMsgGetZoomResponse {
	browser_handle?: number;
	zoom?: number;
}

export interface CMsgLinkAtPosition {
	browser_handle?: number;
	x?: number;
	y?: number;
}

export interface CMsgLinkAtPositionResponse {
	browser_handle?: number;
	x?: number;
	y?: number;
	url?: string;
	blivelink?: boolean;
	binput?: boolean;
}

export interface CMsgZoomToElementAtPosition {
	browser_handle?: number;
	x?: number;
	y?: number;
}

export interface CMsgZoomToElementAtPositionResponse {
	browser_handle?: number;
	scale?: number;
	duration?: number;
}

export interface CMsgScalePageToValue {
	browser_handle?: number;
	scale?: number;
	x?: number;
	y?: number;
}

export interface CMsgForcePopupsToDirectHWND {
	browser_handle?: number;
	force_direct_hwnd_popups?: boolean;
}

export interface CMsgScalePageToValueResponse {
	browser_handle?: number;
	zoom?: number;
}

export interface CMsgSavePageToJPEG {
	browser_handle?: number;
	url?: string;
	filename?: string;
	width?: number;
	height?: number;
}

export interface CMsgSavePageToJPEGResponse {
	browser_handle?: number;
	url?: string;
	filename?: string;
}

export interface CMsgJSAlert {
	browser_handle?: number;
	message?: string;
}

export interface CMsgJSConfirm {
	browser_handle?: number;
	message?: string;
}

export interface CMsgJSDialogResponse {
	browser_handle?: number;
	result?: boolean;
}

export interface CMsgCanGoBackAndForward {
	browser_handle?: number;
	bgoback?: boolean;
	bgoforward?: boolean;
}

export interface CMsgOpenSteamURL {
	browser_handle?: number;
	url?: string;
	referrer?: string;
}

export interface CMsgSetCookie {
	key?: string;
	value?: string;
	path?: string;
	host?: string;
	expires?: number;
	secure?: boolean;
	httponly?: boolean;
}

export interface CMsgSetTargetFrameRate {
	browser_handle?: number;
	nTargetFrameRate?: number;
}

export interface CMsgPauseRepaint {
	browser_handle?: number;
}

export interface CMsgFullRepaint {
	browser_handle?: number;
}

export interface CMsgRequestFullScreen {
	browser_handle?: number;
}

export interface CMsgExitFullScreen {
	browser_handle?: number;
}

export interface CMsgToggleFindInPageDialog {
	browser_handle?: number;
}

export interface CMsgSetPIDShuttingDown {
	browser_handle?: number;
}

export interface CMsgDisableBackgroundThrottling {
	browser_handle?: number;
}

export interface CMsgAckPIDShuttingDown {
	browser_handle?: number;
}

export interface CMsgGetCookiesForURL {
	browser_handle?: number;
	url?: string;
}

export interface CCookie {
	name?: string;
	value?: string;
	domain?: string;
	path?: string;
}

export interface CMsgGetCookiesForURLResponse {
	browser_handle?: number;
	url?: string;
	cookies?: CCookie[];
}

export interface CMsgNodeHasFocus {
	browser_handle?: number;
	bInput?: boolean;
	name?: string;
	elementtagname?: string;
	searchbuttontext?: string;
	bHasMultipleInputs?: boolean;
	input_type?: string;
	bIsMainFrame?: boolean;
}

export interface CMsgZoomToFocusedElement {
	browser_handle?: number;
}

export interface CMsgCloseFullScreenFlashIfOpen {
	browser_handle?: number;
}

export interface CMsgPauseFullScreenFlashMovieIfOpen {
	browser_handle?: number;
}

export interface CMsgFocusedNodeText {
	browser_handle?: number;
}

export interface CMsgFocusedNodeTextResponse {
	browser_handle?: number;
	value?: string;
}

export interface CMsgBuildID {
	build_id?: string;
}

export interface CMsgOpenDevTools {
	browser_handle?: number;
}

export interface CMsgCloseDevTools {
	browser_handle?: number;
}

export interface CMsgUnlockH264 {
	browser_handle?: number;
	unlock_code?: string;
}

export interface CMsgScreenInformationChanged {
	browser_handle?: number;
	override_width?: number;
	override_height?: number;
	monitor_left?: number;
	monitor_top?: number;
	monitor_right?: number;
	monitor_bottom?: number;
	usable_left?: number;
	usable_top?: number;
	usable_right?: number;
	usable_bottom?: number;
}

export interface CMsgClearAllCookies {
	browser_handle?: number;
}

export interface CMsgScreenDPI {
	browser_handle?: number;
	dpi_scaling?: number;
}

export interface CMsgAckScreenDPI {
	browser_handle?: number;
}

export interface CMsgAuthedSteamDomains {
	domains?: string[];
}

export interface CMsgSteamAuthNeeded {
	filler?: boolean;
}

export interface CMsgSteamAuthCookiesSet {
	success?: boolean;
}

export interface CMsgJSRegisterMethod {
	browser_handle?: number;
	name?: string;
	method_type?: EJSRegisterMethodType;
}

export interface CMsgJSValue {
	bool_value?: boolean;
	int_value?: number;
	uint_value?: number;
	double_value?: number;
	string_value?: string;
	function_handle?: string;
	bytes_value?: Buffer;
	is_array?: boolean;
	array_values?: CMsgJSValue[];
	is_object?: boolean;
	object_properties?: CMsgJSValue_JSObjectProperty[];
}

export interface CMsgJSValue_JSObjectProperty {
	name?: string;
	value?: CMsgJSValue;
}

export interface CMsgJSMethodCall {
	browser_handle?: number;
	owning_browser_handle?: number;
	name?: string;
	arguments?: CMsgJSValue[];
}

export interface CMsgJSExecuteCallback {
	browser_handle?: number;
	owning_browser_handle?: number;
	function_handle?: string;
	arguments?: CMsgJSValue[];
}

export interface CMsgJSReleaseCallback {
	browser_handle?: number;
	owning_browser_handle?: number;
	function_handle?: string;
}

export interface CMsgJSRaiseException {
	browser_handle?: number;
	owning_browser_handle?: number;
	exception?: string;
}

export interface CMsgLoadLocalization {
	browser_handle?: number;
	localization_path?: string;
	language?: string;
}

export interface CMsgNotifyUserActivation {
	browser_handle?: number;
}

export interface CMsgSetNetFakeLocalSystemState {
	state?: number;
}

export interface CMsgJumpListLink {
	display_name?: string;
	url_link?: string;
	icon_path?: string;
}

export interface CMSgJumpListMRUApp {
	appid?: number;
	display_name?: string;
	url_link?: string;
	icon_path?: string;
}

export interface CMsgSetJumpList {
	steam_path?: string;
	mru_title?: string;
	apps?: CMSgJumpListMRUApp[];
	links?: CMsgJumpListLink[];
}

export interface CMsgSetGameOverlayTargetPIDs {
	browser_handle?: number;
	target_pid?: number[];
}

export interface CMsgGameOverlayTargetTextureID {
	browser_handle?: number;
	target_pid?: number;
	texture_handle?: number;
}

export interface CMsgDraggableRegionsChanged {
	browser_handle?: number;
	rects?: CMsgDraggableRegionsChanged_DraggableRects[];
}

export interface CMsgDraggableRegionsChanged_DraggableRects {
	x?: number;
	y?: number;
	width?: number;
	height?: number;
	draggable?: boolean;
}

export interface CMsgResizeGripChanged {
	browser_handle?: number;
	width?: number;
	height?: number;
}

export interface CMsgSetWindowPosition {
	browser_handle?: number;
	x?: number;
	y?: number;
	width?: number;
	height?: number;
	min_width?: number;
	min_height?: number;
}

export interface CMsgShowWindow {
	browser_handle?: number;
}

export interface CMsgHideWindow {
	browser_handle?: number;
}

export interface CMsgBringWindowToFront {
	browser_handle?: number;
}

export interface CMsgSetForegroundWindow {
	browser_handle?: number;
}

export interface CMsgMaximizeRestoreWindow {
	browser_handle?: number;
}

export interface CMsgMinimizeWindow {
	browser_handle?: number;
}

export interface CMsgShowBrowserContextMenu {
	browser_handle?: number;
	custom_commands?: CMsgShowBrowserContextMenu_ContextCommand[];
}

export interface CMsgShowBrowserContextMenu_ContextCommand {
	id?: number;
	label?: string;
}

export interface CMsgHandleContextMenuCommand {
	browser_handle?: number;
	command_id?: number;
}

export interface CMsgTouchGesture {
	browser_handle?: number;
	id?: number;
	gesture?: number;
	x?: number;
	y?: number;
	width?: number;
	height?: number;
	tap_count?: number;
	pinch_scale?: number;
}

export interface CMsgSetTouchGesturesToCancel {
	browser_handle?: number;
	gestures?: number[];
}

export interface CMsgImeSetComposition {
	browser_handle?: number;
	text?: string;
}

export interface CMsgImeCommitText {
	browser_handle?: number;
	text?: string;
}

export interface CMsgImeCancelComposition {
	browser_handle?: number;
}

export interface CMsgImeCompositionRangeChanged {
	browser_handle?: number;
	x?: number;
	y?: number;
}

export interface CMsgInspectElement {
	browser_handle?: number;
	x?: number;
	y?: number;
}

export interface CMsgDisableF5 {
	browser_handle?: number;
	disable?: boolean;
}

export interface CMsgStartDownload {
	browser_handle?: number;
	url?: string;
}

export interface CMsgSetTopWindow {
	browser_handle?: number;
}

export interface CMsgBrowserViewPostMessageToParentRequest {
	browser_handle?: number;
	message?: string;
	args?: string;
	requesting_url?: string;
}

export interface CMsgBlockedRequest {
	browser_handle?: number;
	url?: string;
}

export interface CMsgBrowserFocusChanged {
	browser_handle?: number;
	focused?: boolean;
}

export interface CMsgSetProtocolBlockList {
	browser_handle?: number;
	list?: string;
}

export interface CMsgSetForceDeviceScaleFactors {
	dpi_scale?: number;
	browser_scale?: number;
}

export interface CMsgSetUIMode {
	ui_mode?: number;
}

export interface CMsgPopupCreated {
	browser_handle?: number;
}

///////////////////////////////////////////////
// offline_ticket.proto
///////////////////////////////////////////////

export interface Offline_Ticket {
	encrypted_ticket?: Buffer;
	signature?: Buffer;
	kdf1?: number;
	salt1?: Buffer;
	kdf2?: number;
	salt2?: Buffer;
}

///////////////////////////////////////////////
// steamdatagram_messages_auth.proto
///////////////////////////////////////////////

export interface CMsgSteamDatagramRelayAuthTicket {
	time_expiry?: number;
	authorized_client_identity_string?: string;
	gameserver_identity_string?: string;
	authorized_public_ip?: number;
	gameserver_address?: Buffer;
	app_id?: number;
	virtual_port?: number;
	extra_fields?: CMsgSteamDatagramRelayAuthTicket_ExtraField[];
	legacy_authorized_steam_id?: string;
	legacy_gameserver_steam_id?: string;
	legacy_gameserver_pop_id?: number;
	legacy_authorized_client_identity_binary?: Buffer;
	legacy_gameserver_identity_binary?: Buffer;
}

export interface CMsgSteamDatagramRelayAuthTicket_ExtraField {
	name?: string;
	string_value?: string;
	int64_value?: string;
	fixed64_value?: string;
}

export interface CMsgSteamDatagramSignedRelayAuthTicket {
	reserved_do_not_use?: string;
	ticket?: Buffer;
	signature?: Buffer;
	key_id?: string;
	certs?: CMsgSteamDatagramCertificateSigned[];
}

export interface CMsgSteamDatagramCachedCredentialsForApp {
	private_key?: Buffer;
	cert?: Buffer;
	relay_tickets?: Buffer[];
}

export interface CMsgSteamDatagramGameCoordinatorServerLogin {
	time_generated?: number;
	appid?: number;
	routing?: Buffer;
	appdata?: Buffer;
	legacy_identity_binary?: Buffer;
	identity_string?: string;
	dummy_steam_id?: string;
}

export interface CMsgSteamDatagramSignedGameCoordinatorServerLogin {
	cert?: CMsgSteamDatagramCertificateSigned;
	login?: Buffer;
	signature?: Buffer;
}

export interface CMsgSteamDatagramHostedServerAddressPlaintext {
	ipv4?: number;
	ipv6?: Buffer;
	port?: number;
	routing_secret?: string;
	protocol_version?: number;
}

export interface CMsgSteamNetworkingIdentityLegacyBinary {
	steam_id?: string;
	xbox_pairwise_id?: string;
	generic_bytes?: Buffer;
	generic_string?: string;
	ipv6_and_port?: Buffer;
}

export interface CMsgSteamDatagramCertificate {
	key_type?: CMsgSteamDatagramCertificate_EKeyType;
	key_data?: Buffer;
	legacy_steam_id?: string;
	legacy_identity_binary?: CMsgSteamNetworkingIdentityLegacyBinary;
	identity_string?: string;
	gameserver_datacenter_ids?: number[];
	time_created?: number;
	time_expiry?: number;
	app_ids?: number[];
	ip_addresses?: string[];
}

export enum CMsgSteamDatagramCertificate_EKeyType {
	INVALID = 0,
	ED25519 = 1,
}

export interface CMsgSteamDatagramCertificateSigned {
	cert?: Buffer;
	ca_key_id?: string;
	ca_signature?: Buffer;
	private_key_data?: Buffer;
}

export interface CMsgSteamDatagramCertificateRequest {
	cert?: CMsgSteamDatagramCertificate;
}

///////////////////////////////////////////////
// steamdatagram_messages_sdr.proto
///////////////////////////////////////////////

export interface CMsgSteamNetworkingIPAddress {
	v4?: number;
	v6?: Buffer;
}

export interface CMsgSteamDatagramSignedMessageGeneric {
	cert?: CMsgSteamDatagramCertificateSigned;
	signed_data?: Buffer;
	signature?: Buffer;
	dummy_pad?: Buffer;
}

export interface CMsgSteamDatagramRouterPingReply {
	client_timestamp?: number;
	latency_datacenter_ids?: number[];
	latency_ping_ms?: number[];
	latency_datacenter_ids_p2p?: number[];
	latency_ping_ms_p2p?: number[];
	your_public_ip?: number;
	your_public_port?: number;
	server_time?: number;
	challenge?: string;
	seconds_until_shutdown?: number;
	client_cookie?: number;
	scoring_penalty_relay_cluster?: number;
	flags?: number;
	route_exceptions?: CMsgSteamDatagramRouterPingReply_RouteException[];
	alt_addresses?: CMsgSteamDatagramRouterPingReply_AltAddress[];
}

export interface CMsgSteamDatagramRouterPingReply_RouteException {
	data_center_id?: number;
	flags?: number;
	penalty?: number;
}

export interface CMsgSteamDatagramRouterPingReply_AltAddress {
	ipv4?: number;
	port?: number;
	penalty?: number;
	protocol?: CMsgSteamDatagramRouterPingReply_AltAddress_Protocol;
	id?: string;
}

export enum CMsgSteamDatagramRouterPingReply_AltAddress_Protocol {
	DefaultProtocol = 0,
	NetworkNext = 1,
}

export enum CMsgSteamDatagramRouterPingReply_Flags {
	FLAG_MAYBE_MORE_DATA_CENTERS = 1,
	FLAG_MAYBE_MORE_ALT_ADDRESSES = 2,
}

export interface CMsgSteamDatagramGameserverPingRequestBody {
	relay_popid?: number;
	your_public_ip?: CMsgSteamNetworkingIPAddress;
	your_public_port?: number;
	relay_unix_time?: string;
	routing_secret?: string;
	my_ips?: CMsgSteamNetworkingIPAddress[];
	echo?: Buffer;
}

export interface CMsgSteamDatagramGameserverPingRequestEnvelope {
	cert?: CMsgSteamDatagramCertificateSigned;
	signed_data?: Buffer;
	signature?: Buffer;
	legacy_your_public_ip?: number;
	legacy_your_public_port?: number;
	legacy_relay_unix_time?: number;
	legacy_challenge?: string;
	legacy_router_timestamp?: number;
	dummy_pad?: Buffer;
}

export interface CMsgSteamDatagramGameserverPingReplyData {
	echo_relay_unix_time?: number;
	echo?: Buffer;
	legacy_challenge?: string;
	legacy_router_timestamp?: number;
	data_center_id?: number;
	appid?: number;
	protocol_version?: number;
	build?: string;
	network_config_version?: string;
	my_unix_time?: number;
}

export interface CMsgSteamDatagramNoSessionRelayToClient {
	connection_id?: number;
	your_public_ip?: number;
	your_public_port?: number;
	server_time?: number;
	challenge?: string;
	seconds_until_shutdown?: number;
}

export interface CMsgSteamDatagramNoSessionRelayToPeer {
	legacy_relay_session_id?: number;
	from_relay_session_id?: number;
	from_connection_id?: number;
	kludge_pad?: string;
}

export interface CMsgSteamDatagramClientPingSampleRequest {
	connection_id?: number;
}

export interface CMsgSteamDatagramClientPingSampleReply {
	connection_id?: number;
	override_active?: boolean;
	pops?: CMsgSteamDatagramClientPingSampleReply_POP[];
	legacy_data_centers?: CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter[];
}

export interface CMsgSteamDatagramClientPingSampleReply_POP {
	pop_id?: number;
	default_front_ping_ms?: number;
	cluster_penalty?: number;
	alt_addresses?: CMsgSteamDatagramClientPingSampleReply_POP_AltAddress[];
	default_e2e_ping_ms?: number;
	default_e2e_score?: number;
	p2p_via_peer_relay_pop_id?: number;
	best_dc_ping_ms?: number;
	best_dc_score?: number;
	best_dc_via_relay_pop_id?: number;
	default_dc_ping_ms?: number;
	default_dc_score?: number;
	default_dc_via_relay_pop_id?: number;
	test_dc_ping_ms?: number;
	test_dc_score?: number;
	test_dc_via_relay_pop_id?: number;
}

export interface CMsgSteamDatagramClientPingSampleReply_POP_AltAddress {
	id?: string;
	front_ping_ms?: number;
	penalty?: number;
}

export interface CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter {
	data_center_id?: number;
	best_dc_via_relay_pop_id?: number;
	best_dc_ping_ms?: number;
}

export interface CMsgSteamDatagramClientSwitchedPrimary {
	connection_id?: number;
	from_ip?: number;
	from_port?: number;
	from_router_cluster?: number;
	from_active_time?: number;
	from_active_packets_recv?: number;
	from_dropped_reason?: string;
	gap_ms?: number;
	from_quality_now?: CMsgSteamDatagramClientSwitchedPrimary_RouterQuality;
	to_quality_now?: CMsgSteamDatagramClientSwitchedPrimary_RouterQuality;
	from_quality_then?: CMsgSteamDatagramClientSwitchedPrimary_RouterQuality;
	to_quality_then?: CMsgSteamDatagramClientSwitchedPrimary_RouterQuality;
}

export interface CMsgSteamDatagramClientSwitchedPrimary_RouterQuality {
	score?: number;
	front_ping?: number;
	back_ping?: number;
	seconds_until_down?: number;
}

export interface CMsgSteamDatagramConnectRequest {
	connection_id?: number;
	my_timestamp?: string;
	ping_est_ms?: number;
	virtual_port?: number;
	gameserver_relay_session_id?: number;
	crypt?: CMsgSteamDatagramSessionCryptInfoSigned;
	cert?: CMsgSteamDatagramCertificateSigned;
	routing_secret?: string;
	legacy_client_steam_id?: string;
}

export interface CMsgSteamDatagramConnectOK {
	client_connection_id?: number;
	server_connection_id?: number;
	your_timestamp?: string;
	delay_time_usec?: number;
	gameserver_relay_session_id?: number;
	crypt?: CMsgSteamDatagramSessionCryptInfoSigned;
	cert?: CMsgSteamDatagramCertificateSigned;
}

export interface CMsgSteamNetworkingP2PSDRRoutingSummary {
	initial_ping?: number;
	initial_ping_front_local?: number;
	initial_ping_front_remote?: number;
	initial_score?: number;
	initial_pop_local?: number;
	initial_pop_remote?: number;
	best_ping?: number;
	best_ping_front_local?: number;
	best_ping_front_remote?: number;
	best_score?: number;
	best_pop_local?: number;
	best_pop_remote?: number;
	best_time?: number;
	negotiation_ms?: number;
	selected_seconds?: number;
}

export interface CMsgSteamDatagramP2PRoutingSummary {
	ice?: CMsgSteamNetworkingICESessionSummary;
	sdr?: CMsgSteamNetworkingP2PSDRRoutingSummary;
}

export interface CMsgSteamDatagramConnectionClosed {
	to_connection_id?: number;
	from_connection_id?: number;
	from_identity_string?: string;
	legacy_from_identity_binary?: CMsgSteamNetworkingIdentityLegacyBinary;
	legacy_from_steam_id?: string;
	legacy_gameserver_relay_session_id?: number;
	to_relay_session_id?: number;
	from_relay_session_id?: number;
	forward_target_relay_routing_token?: Buffer;
	forward_target_revision?: number;
	relay_mode?: CMsgSteamDatagramConnectionClosed_ERelayMode;
	debug?: string;
	reason_code?: number;
	routing_secret?: string;
	not_primary_session?: boolean;
	not_primary_transport?: boolean;
	quality_relay?: CMsgSteamDatagramConnectionQuality;
	quality_e2e?: CMsgSteamDatagramConnectionQuality;
	p2p_routing_summary?: CMsgSteamDatagramP2PRoutingSummary;
}

export enum CMsgSteamDatagramConnectionClosed_ERelayMode {
	None = 0,
	EndToEnd = 1,
	ClosedByPeer = 2,
}

export interface CMsgSteamDatagramNoConnection {
	to_connection_id?: number;
	from_connection_id?: number;
	legacy_gameserver_relay_session_id?: number;
	to_relay_session_id?: number;
	from_relay_session_id?: number;
	from_identity_string?: string;
	legacy_from_steam_id?: string;
	end_to_end?: boolean;
	not_primary_session?: boolean;
	not_primary_transport?: boolean;
	quality_relay?: CMsgSteamDatagramConnectionQuality;
	quality_e2e?: CMsgSteamDatagramConnectionQuality;
	p2p_routing_summary?: CMsgSteamDatagramP2PRoutingSummary;
	routing_secret?: string;
	dummy_pad?: number;
}

export interface CMsgSteamDatagramGameserverSessionRequest {
	ticket?: Buffer;
	challenge_time?: number;
	challenge?: string;
	client_connection_id?: number;
	server_connection_id?: number;
	network_config_version?: string;
	protocol_version?: number;
	platform?: string;
	build?: string;
	dev_gameserver_identity?: string;
	dev_client_cert?: CMsgSteamDatagramCertificateSigned;
}

export interface CMsgSteamDatagramGameserverSessionEstablished {
	connection_id?: number;
	gameserver_identity_string?: string;
	seconds_until_shutdown?: number;
	seq_num_r2c?: number;
	dummy_legacy_identity_binary?: Buffer;
	legacy_gameserver_steamid?: string;
}

export interface CMsgSteamDatagramConnectionStatsClientToRouter {
	quality_relay?: CMsgSteamDatagramConnectionQuality;
	quality_e2e?: CMsgSteamDatagramConnectionQuality;
	ack_relay?: number[];
	legacy_ack_e2e?: number[];
	flags?: number;
	client_connection_id?: number;
	seq_num_c2r?: number;
	seq_num_e2e?: number;
}

export enum CMsgSteamDatagramConnectionStatsClientToRouter_Flags {
	ACK_REQUEST_RELAY = 1,
	ACK_REQUEST_E2E = 2,
	ACK_REQUEST_IMMEDIATE = 4,
	NOT_PRIMARY_SESSION = 8,
}

export interface CMsgSteamDatagramConnectionStatsRouterToClient {
	quality_relay?: CMsgSteamDatagramConnectionQuality;
	quality_e2e?: CMsgSteamDatagramConnectionQuality;
	seconds_until_shutdown?: number;
	migrate_request_ip?: number;
	migrate_request_port?: number;
	scoring_penalty_relay_cluster?: number;
	ack_relay?: number[];
	legacy_ack_e2e?: number[];
	flags?: number;
	client_connection_id?: number;
	seq_num_r2c?: number;
	seq_num_e2e?: number;
}

export enum CMsgSteamDatagramConnectionStatsRouterToClient_Flags {
	ACK_REQUEST_RELAY = 1,
	ACK_REQUEST_E2E = 2,
	ACK_REQUEST_IMMEDIATE = 4,
}

export interface CMsgSteamDatagramConnectionStatsRouterToServer {
	quality_relay?: CMsgSteamDatagramConnectionQuality;
	quality_e2e?: CMsgSteamDatagramConnectionQuality;
	ack_relay?: number[];
	legacy_ack_e2e?: number[];
	flags?: number;
	seq_num_r2s?: number;
	seq_num_e2e?: number;
	client_identity_string?: string;
	legacy_client_steam_id?: string;
	relay_session_id?: number;
	client_connection_id?: number;
	server_connection_id?: number;
	routing_secret?: string;
}

export enum CMsgSteamDatagramConnectionStatsRouterToServer_Flags {
	ACK_REQUEST_RELAY = 1,
	ACK_REQUEST_E2E = 2,
	ACK_REQUEST_IMMEDIATE = 4,
}

export interface CMsgSteamDatagramConnectionStatsServerToRouter {
	quality_relay?: CMsgSteamDatagramConnectionQuality;
	quality_e2e?: CMsgSteamDatagramConnectionQuality;
	ack_relay?: number[];
	legacy_ack_e2e?: number[];
	flags?: number;
	seq_num_s2r?: number;
	seq_num_e2e?: number;
	relay_session_id?: number;
	client_connection_id?: number;
	server_connection_id?: number;
}

export enum CMsgSteamDatagramConnectionStatsServerToRouter_Flags {
	ACK_REQUEST_RELAY = 1,
	ACK_REQUEST_E2E = 2,
	ACK_REQUEST_IMMEDIATE = 4,
}

export interface CMsgSteamDatagramP2PSessionRequestBody {
	challenge_time?: number;
	challenge?: string;
	client_connection_id?: number;
	legacy_peer_steam_id?: string;
	peer_identity_string?: string;
	peer_connection_id?: number;
	encrypted_data?: Buffer;
	encryption_your_public_key_lead_byte?: number;
	encryption_my_ephemeral_public_key?: Buffer;
	protocol_version?: number;
	network_config_version?: string;
	platform?: string;
	build?: string;
}

export interface CMsgSteamDatagramP2PSessionRequestBody_EncryptedData {
	peer_identity_string?: string;
}

export interface CMsgSteamDatagramP2PSessionRequest {
	cert?: CMsgSteamDatagramCertificateSigned;
	body?: Buffer;
	signature?: Buffer;
}

export interface CMsgSteamDatagramP2PSessionEstablished {
	connection_id?: number;
	seconds_until_shutdown?: number;
	relay_routing_token?: Buffer;
	seq_num_r2c?: number;
}

export interface CMsgSteamDatagramConnectionStatsP2PClientToRouter {
	quality_relay?: CMsgSteamDatagramConnectionQuality;
	quality_e2e?: CMsgSteamDatagramConnectionQuality;
	p2p_routing_summary?: CMsgSteamDatagramP2PRoutingSummary;
	ack_relay?: number[];
	legacy_ack_e2e?: number[];
	flags?: number;
	forward_target_relay_routing_token?: Buffer;
	forward_target_revision?: number;
	routes?: Buffer;
	ack_peer_routes_revision?: number;
	connection_id?: number;
	seq_num_c2r?: number;
	seq_num_e2e?: number;
}

export enum CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags {
	ACK_REQUEST_RELAY = 1,
	ACK_REQUEST_E2E = 2,
	ACK_REQUEST_IMMEDIATE = 4,
	NOT_PRIMARY_SESSION = 8,
	NOT_PRIMARY_TRANSPORT_E2E = 16,
}

export interface CMsgSteamDatagramConnectionStatsP2PRouterToClient {
	quality_relay?: CMsgSteamDatagramConnectionQuality;
	quality_e2e?: CMsgSteamDatagramConnectionQuality;
	seconds_until_shutdown?: number;
	migrate_request_ip?: number;
	migrate_request_port?: number;
	scoring_penalty_relay_cluster?: number;
	ack_relay?: number[];
	legacy_ack_e2e?: number[];
	flags?: number;
	ack_forward_target_revision?: number;
	routes?: Buffer;
	ack_peer_routes_revision?: number;
	connection_id?: number;
	seq_num_r2c?: number;
	seq_num_e2e?: number;
}

export enum CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags {
	ACK_REQUEST_RELAY = 1,
	ACK_REQUEST_E2E = 2,
	ACK_REQUEST_IMMEDIATE = 4,
	NOT_PRIMARY_TRANSPORT_E2E = 16,
}

export interface CMsgSteamDatagramP2PBadRouteRouterToClient {
	connection_id?: number;
	failed_relay_routing_token?: Buffer;
	ack_forward_target_revision?: number;
	kludge_pad?: string;
}

export interface CMsgSteamDatagramP2PRoutes {
	relay_clusters?: CMsgSteamDatagramP2PRoutes_RelayCluster[];
	routes?: CMsgSteamDatagramP2PRoutes_Route[];
	revision?: number;
}

export interface CMsgSteamDatagramP2PRoutes_RelayCluster {
	pop_id?: number;
	ping_ms?: number;
	score_penalty?: number;
	session_relay_routing_token?: Buffer;
}

export interface CMsgSteamDatagramP2PRoutes_Route {
	my_pop_id?: number;
	your_pop_id?: number;
	legacy_score?: number;
	interior_score?: number;
}

export interface CMsgSteamDatagramSetSecondaryAddressRequest {
	client_main_ip?: number;
	client_main_port?: number;
	client_connection_id?: number;
	client_identity?: string;
	request_send_duplication?: boolean;
	kludge_pad?: Buffer;
}

export interface CMsgSteamDatagramSetSecondaryAddressResult {
	success?: boolean;
	message?: string;
}

export interface CMsgSteamDatagramSessionCryptInfo {
	key_type?: CMsgSteamDatagramSessionCryptInfo_EKeyType;
	key_data?: Buffer;
	nonce?: string;
	protocol_version?: number;
	ciphers?: ESteamNetworkingSocketsCipher[];
}

export enum CMsgSteamDatagramSessionCryptInfo_EKeyType {
	INVALID = 0,
	CURVE25519 = 1,
}

export interface CMsgSteamDatagramSessionCryptInfoSigned {
	info?: Buffer;
	signature?: Buffer;
}

export interface CMsgSteamDatagramDiagnostic {
	severity?: number;
	text?: string;
}

export interface CMsgSteamDatagramLinkInstantaneousStats {
	out_packets_per_sec_x10?: number;
	out_bytes_per_sec?: number;
	in_packets_per_sec_x10?: number;
	in_bytes_per_sec?: number;
	ping_ms?: number;
	packets_dropped_pct?: number;
	packets_weird_sequence_pct?: number;
	peak_jitter_usec?: number;
}

export interface CMsgSteamDatagramLinkLifetimeStats {
	connected_seconds?: number;
	packets_sent?: string;
	kb_sent?: string;
	packets_recv?: string;
	kb_recv?: string;
	packets_recv_sequenced?: string;
	packets_recv_dropped?: string;
	packets_recv_out_of_order?: string;
	packets_recv_duplicate?: string;
	packets_recv_lurch?: string;
	multipath_packets_recv_sequenced?: string[];
	multipath_packets_recv_later?: string[];
	multipath_send_enabled?: number;
	quality_histogram_100?: number;
	quality_histogram_99?: number;
	quality_histogram_97?: number;
	quality_histogram_95?: number;
	quality_histogram_90?: number;
	quality_histogram_75?: number;
	quality_histogram_50?: number;
	quality_histogram_1?: number;
	quality_histogram_dead?: number;
	quality_ntile_2nd?: number;
	quality_ntile_5th?: number;
	quality_ntile_25th?: number;
	quality_ntile_50th?: number;
	ping_histogram_25?: number;
	ping_histogram_50?: number;
	ping_histogram_75?: number;
	ping_histogram_100?: number;
	ping_histogram_125?: number;
	ping_histogram_150?: number;
	ping_histogram_200?: number;
	ping_histogram_300?: number;
	ping_histogram_max?: number;
	ping_ntile_5th?: number;
	ping_ntile_50th?: number;
	ping_ntile_75th?: number;
	ping_ntile_95th?: number;
	ping_ntile_98th?: number;
	jitter_histogram_negligible?: number;
	jitter_histogram_1?: number;
	jitter_histogram_2?: number;
	jitter_histogram_5?: number;
	jitter_histogram_10?: number;
	jitter_histogram_20?: number;
	txspeed_max?: number;
	txspeed_histogram_16?: number;
	txspeed_histogram_32?: number;
	txspeed_histogram_64?: number;
	txspeed_histogram_128?: number;
	txspeed_histogram_256?: number;
	txspeed_histogram_512?: number;
	txspeed_histogram_1024?: number;
	txspeed_histogram_max?: number;
	txspeed_ntile_5th?: number;
	txspeed_ntile_50th?: number;
	txspeed_ntile_75th?: number;
	txspeed_ntile_95th?: number;
	txspeed_ntile_98th?: number;
	rxspeed_max?: number;
	rxspeed_histogram_16?: number;
	rxspeed_histogram_32?: number;
	rxspeed_histogram_64?: number;
	rxspeed_histogram_128?: number;
	rxspeed_histogram_256?: number;
	rxspeed_histogram_512?: number;
	rxspeed_histogram_1024?: number;
	rxspeed_histogram_max?: number;
	rxspeed_ntile_5th?: number;
	rxspeed_ntile_50th?: number;
	rxspeed_ntile_75th?: number;
	rxspeed_ntile_95th?: number;
	rxspeed_ntile_98th?: number;
}

export interface CMsgSteamDatagramConnectionQuality {
	instantaneous?: CMsgSteamDatagramLinkInstantaneousStats;
	lifetime?: CMsgSteamDatagramLinkLifetimeStats;
}

export interface CMsgICECandidate {
	candidate?: string;
}

export interface CMsgICERendezvous {
	auth?: CMsgICERendezvous_Auth;
	add_candidate?: CMsgICECandidate;
}

export interface CMsgICERendezvous_Auth {
	pwd_frag?: string;
}

export interface CMsgSteamNetworkingP2PRendezvous {
	from_identity?: string;
	from_connection_id?: number;
	to_identity?: string;
	to_connection_id?: number;
	sdr_routes?: Buffer;
	ack_peer_routes_revision?: number;
	ice_enabled?: boolean;
	hosted_server_ticket?: Buffer;
	connect_request?: CMsgSteamNetworkingP2PRendezvous_ConnectRequest;
	connect_ok?: CMsgSteamNetworkingP2PRendezvous_ConnectOK;
	connection_closed?: CMsgSteamNetworkingP2PRendezvous_ConnectionClosed;
	ack_reliable_msg?: number;
	first_reliable_msg?: number;
	reliable_messages?: CMsgSteamNetworkingP2PRendezvous_ReliableMessage[];
	application_messages?: CMsgSteamNetworkingP2PRendezvous_ApplicationMessage[];
}

export interface CMsgSteamNetworkingP2PRendezvous_ConnectRequest {
	crypt?: CMsgSteamDatagramSessionCryptInfoSigned;
	cert?: CMsgSteamDatagramCertificateSigned;
	to_virtual_port?: number;
	from_virtual_port?: number;
	from_fakeip?: string;
}

export interface CMsgSteamNetworkingP2PRendezvous_ConnectOK {
	crypt?: CMsgSteamDatagramSessionCryptInfoSigned;
	cert?: CMsgSteamDatagramCertificateSigned;
}

export interface CMsgSteamNetworkingP2PRendezvous_ConnectionClosed {
	debug?: string;
	reason_code?: number;
}

export interface CMsgSteamNetworkingP2PRendezvous_ReliableMessage {
	ice?: CMsgICERendezvous;
}

export interface CMsgSteamNetworkingP2PRendezvous_ApplicationMessage {
	data?: Buffer;
	msg_num?: string;
	flags?: number;
	lane_idx?: number;
}

export interface CMsgSteamNetworkingICESessionSummary {
	failure_reason_code?: number;
	local_candidate_types?: number;
	remote_candidate_types?: number;
	initial_route_kind?: number;
	initial_ping?: number;
	initial_score?: number;
	negotiation_ms?: number;
	best_route_kind?: number;
	best_ping?: number;
	best_score?: number;
	best_time?: number;
	selected_seconds?: number;
	user_settings?: number;
	ice_enable_var?: number;
	local_candidate_types_allowed?: number;
}

///////////////////////////////////////////////
// steammessages_accounthardware.steamclient.proto
///////////////////////////////////////////////

export interface CAccountHardware_RegisterSteamController_Request {
	serial_number?: string;
	controller_code?: string;
}

export interface CAccountHardware_RegisterSteamController_Response {
}

export interface CAccountHardware_CompleteSteamControllerRegistration_Request {
	serial_number?: string;
	controller_code?: string;
}

export interface CAccountHardware_CompleteSteamControllerRegistration_Response {
}

export interface CAccountHardware_QueryAccountsRegisteredToSerial_Request {
	serial_number?: string;
	controller_code?: string;
}

export interface CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
	accountid?: number;
	registration_complete?: boolean;
}

export interface CAccountHardware_QueryAccountsRegisteredToSerial_Response {
	accounts?: CAccountHardware_QueryAccountsRegisteredToSerial_Accounts[];
}

export interface CAccountHardware_SteamControllerSetConfig_ControllerConfig {
	appidorname?: string;
	publishedfileid?: string;
	templatename?: string;
}

export interface CAccountHardware_SteamControllerSetConfig_Request {
	serial_number?: string;
	controller_code?: string;
	accountid?: number;
	configurations?: CAccountHardware_SteamControllerSetConfig_ControllerConfig[];
	controller_type?: number;
	only_for_this_serial?: boolean;
}

export interface CAccountHardware_SteamControllerSetConfig_Response {
}

export interface CAccountHardware_SteamControllerGetConfig_Request {
	serial_number?: string;
	controller_code?: string;
	accountid?: number;
	appidorname?: string;
	controller_type?: number;
	only_for_this_serial?: boolean;
}

export interface CAccountHardware_SteamControllerGetConfig_ControllerConfig {
	appidorname?: string;
	publishedfileid?: string;
	templatename?: string;
	serial_number?: string;
	autosave?: boolean;
}

export interface CAccountHardware_SteamControllerGetConfig_Response {
	configurations?: CAccountHardware_SteamControllerGetConfig_ControllerConfig[];
}

export interface CAccountHardware_DeRegisterSteamController_Request {
	serial_number?: string;
	controller_code?: string;
	accountid?: number;
}

export interface CAccountHardware_DeRegisterSteamController_Response {
}

export interface CAccountHardware_SetPersonalizationFile_Request {
	serial_number?: string;
	publishedfileid?: string;
	accountid?: number;
}

export interface CAccountHardware_SetPersonalizationFile_Response {
}

export interface CAccountHardware_GetPersonalizationFile_Request {
	serial_number?: string;
	accountid?: number;
}

export interface CAccountHardware_GetPersonalizationFile_Response {
	publishedfileid?: string;
}

export interface CAccountHardware_VRCompatibilityCheck_Request {
	product_name?: string;
	values?: CAccountHardware_VRCompatibilityCheck_Request_Pair[];
}

export interface CAccountHardware_VRCompatibilityCheck_Request_Pair {
	key?: string;
	value?: string;
}

export interface CAccountHardware_VRCompatibilityCheck_Response {
	values?: CAccountHardware_VRCompatibilityCheck_Response_Pair[];
	components?: CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay[];
}

export interface CAccountHardware_VRCompatibilityCheck_Response_Pair {
	key?: string;
	value?: string;
}

export interface CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay {
	name?: string;
	image?: string;
	value?: string;
}

export interface CAccountHardware_RegisterValveIndexComponent_Request {
	serial_number?: string;
	manufacturer_serial_number?: string;
	component_code?: string;
	component_type?: EValveIndexComponent;
	estimated_time_registered?: number;
}

export interface CAccountHardware_RegisterValveIndexComponent_Response {
}

export interface CAccountHardware_GetSteamDeckComponents_Request {
	serial_number?: string;
	controller_code?: string;
}

export interface CAccountHardware_GetSteamDeckComponents_Response {
	json_components?: string;
}

export interface AccountHardware {
}

///////////////////////////////////////////////
// steammessages_appoverview.proto
///////////////////////////////////////////////

export interface CAppOverview_AppAssociation {
	type?: EAppAssociationType;
	name?: string;
}

export interface CAppOverview_PerClientData {
	clientid?: string;
	client_name?: string;
	display_status?: EDisplayStatus;
	status_percentage?: number;
	active_beta?: string;
	installed?: boolean;
	bytes_downloaded?: string;
	bytes_total?: string;
	streaming_to_local_client?: boolean;
	is_available_on_current_platform?: boolean;
	is_invalid_os_type?: boolean;
	playtime_left?: number;
	cloud_status?: EAppCloudStatus;
}

export interface CAppOverview {
	appid?: number;
	display_name?: string;
	visible_in_game_list?: boolean;
	sort_as?: string;
	app_type?: EProtoAppType;
	mru_index?: number;
	rt_recent_activity_time?: number;
	minutes_playtime_forever?: number;
	minutes_playtime_last_two_weeks?: number;
	rt_last_time_played?: number;
	store_tag?: number[];
	association?: CAppOverview_AppAssociation[];
	store_category?: number[];
	rt_original_release_date?: number;
	rt_steam_release_date?: number;
	icon_hash?: string;
	controller_support?: EAppControllerSupportLevel;
	vr_supported?: boolean;
	metacritic_score?: number;
	size_on_disk?: string;
	third_party_mod?: boolean;
	icon_data?: string;
	icon_data_format?: string;
	gameid?: string;
	library_capsule_filename?: string;
	per_client_data?: CAppOverview_PerClientData[];
	most_available_clientid?: string;
	selected_clientid?: string;
	rt_store_asset_mtime?: number;
	rt_custom_image_mtime?: number;
	optional_parent_app_id?: number;
	owner_account_id?: number;
	review_score_with_bombs?: number;
	review_percentage_with_bombs?: number;
	review_score_without_bombs?: number;
	review_percentage_without_bombs?: number;
	library_id?: string;
	vr_only?: boolean;
	mastersub_appid?: number;
	mastersub_includedwith_logo?: string;
	site_license_site_name?: string;
	shortcut_override_appid?: number;
	steam_deck_compat_category?: ESteamDeckCompatibilityCategory;
	rt_last_time_locally_played?: number;
	rt_purchased_time?: number;
	header_filename?: string;
}

export interface CAppOverview_Change {
	app_overview?: CAppOverview[];
	removed_appid?: number[];
	full_update?: boolean;
	update_complete?: boolean;
}

export interface CAppBootstrapData {
	appid?: number;
	hidden?: boolean;
	user_tag?: string[];
}

export interface CLibraryBootstrapData {
	app_data?: CAppBootstrapData[];
}

///////////////////////////////////////////////
// steammessages_auth.steamclient.proto
///////////////////////////////////////////////

export interface CAuthentication_GetPasswordRSAPublicKey_Request {
	account_name?: string;
}

export interface CAuthentication_GetPasswordRSAPublicKey_Response {
	publickey_mod?: string;
	publickey_exp?: string;
	timestamp?: string;
}

export interface CAuthentication_DeviceDetails {
	device_friendly_name?: string;
	platform_type?: EAuthTokenPlatformType;
	os_type?: number;
	gaming_device_type?: number;
	client_count?: number;
	machine_id?: Buffer;
}

export interface CAuthentication_BeginAuthSessionViaQR_Request {
	device_friendly_name?: string;
	platform_type?: EAuthTokenPlatformType;
	device_details?: CAuthentication_DeviceDetails;
	website_id?: string;
}

export interface CAuthentication_AllowedConfirmation {
	confirmation_type?: EAuthSessionGuardType;
	associated_message?: string;
}

export interface CAuthentication_BeginAuthSessionViaQR_Response {
	client_id?: string;
	challenge_url?: string;
	request_id?: Buffer;
	interval?: number;
	allowed_confirmations?: CAuthentication_AllowedConfirmation[];
	version?: number;
}

export interface CAuthentication_BeginAuthSessionViaCredentials_Request {
	device_friendly_name?: string;
	account_name?: string;
	encrypted_password?: string;
	encryption_timestamp?: string;
	remember_login?: boolean;
	platform_type?: EAuthTokenPlatformType;
	persistence?: ESessionPersistence;
	website_id?: string;
	device_details?: CAuthentication_DeviceDetails;
	guard_data?: string;
	language?: number;
	qos_level?: number;
}

export interface CAuthentication_BeginAuthSessionViaCredentials_Response {
	client_id?: string;
	request_id?: Buffer;
	interval?: number;
	allowed_confirmations?: CAuthentication_AllowedConfirmation[];
	steamid?: string;
	weak_token?: string;
	agreement_session_url?: string;
	extended_error_message?: string;
}

export interface CAuthentication_PollAuthSessionStatus_Request {
	client_id?: string;
	request_id?: Buffer;
	token_to_revoke?: string;
}

export interface CAuthentication_PollAuthSessionStatus_Response {
	new_client_id?: string;
	new_challenge_url?: string;
	refresh_token?: string;
	access_token?: string;
	had_remote_interaction?: boolean;
	account_name?: string;
	new_guard_data?: string;
	agreement_session_url?: string;
}

export interface CAuthentication_GetAuthSessionInfo_Request {
	client_id?: string;
}

export interface CAuthentication_GetAuthSessionInfo_Response {
	ip?: string;
	geoloc?: string;
	city?: string;
	state?: string;
	country?: string;
	platform_type?: EAuthTokenPlatformType;
	device_friendly_name?: string;
	version?: number;
	login_history?: EAuthSessionSecurityHistory;
	requestor_location_mismatch?: boolean;
	high_usage_login?: boolean;
	requested_persistence?: ESessionPersistence;
}

export interface CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
	version?: number;
	client_id?: string;
	steamid?: string;
	signature?: Buffer;
	confirm?: boolean;
	persistence?: ESessionPersistence;
}

export interface CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
}

export interface CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
	client_id?: string;
	steamid?: string;
	code?: string;
	code_type?: EAuthSessionGuardType;
}

export interface CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
	agreement_session_url?: string;
}

export interface CAuthentication_AccessToken_GenerateForApp_Request {
	refresh_token?: string;
	steamid?: string;
	renewal_type?: ETokenRenewalType;
}

export interface CAuthentication_AccessToken_GenerateForApp_Response {
	access_token?: string;
	refresh_token?: string;
}

export interface CAuthentication_RefreshToken_Enumerate_Request {
}

export interface CAuthentication_RefreshToken_Enumerate_Response {
	refresh_tokens?: CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription[];
	requesting_token?: string;
}

export interface CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent {
	time?: number;
	ip?: CMsgIPAddress;
	locale?: string;
	country?: string;
	state?: string;
	city?: string;
}

export interface CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription {
	token_id?: string;
	token_description?: string;
	time_updated?: number;
	platform_type?: EAuthTokenPlatformType;
	logged_in?: boolean;
	os_platform?: number;
	auth_type?: number;
	gaming_device_type?: number;
	first_seen?: CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent;
	last_seen?: CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent;
	os_type?: number;
}

export interface CAuthentication_GetAuthSessionsForAccount_Request {
}

export interface CAuthentication_GetAuthSessionsForAccount_Response {
	client_ids?: string[];
}

export interface CAuthentication_MigrateMobileSession_Request {
	steamid?: string;
	token?: string;
	signature?: string;
}

export interface CAuthentication_MigrateMobileSession_Response {
	refresh_token?: string;
	access_token?: string;
}

export interface CAuthentication_Token_Revoke_Request {
	token?: string;
	revoke_action?: EAuthTokenRevokeAction;
}

export interface CAuthentication_Token_Revoke_Response {
}

export interface CAuthentication_RefreshToken_Revoke_Request {
	token_id?: string;
	steamid?: string;
	revoke_action?: EAuthTokenRevokeAction;
	signature?: Buffer;
}

export interface CAuthentication_RefreshToken_Revoke_Response {
}

export interface CAuthenticationSupport_QueryRefreshTokensByAccount_Request {
	steamid?: string;
	include_revoked_tokens?: boolean;
}

export interface CSupportRefreshTokenDescription {
	token_id?: string;
	token_description?: string;
	time_updated?: number;
	platform_type?: EAuthTokenPlatformType;
	token_state?: EAuthTokenState;
	owner_steamid?: string;
	os_platform?: number;
	os_type?: number;
	auth_type?: number;
	gaming_device_type?: number;
	first_seen?: CSupportRefreshTokenDescription_TokenUsageEvent;
	last_seen?: CSupportRefreshTokenDescription_TokenUsageEvent;
}

export interface CSupportRefreshTokenDescription_TokenUsageEvent {
	time?: number;
	ip?: CMsgIPAddress;
	country?: string;
	state?: string;
	city?: string;
}

export interface CAuthenticationSupport_QueryRefreshTokensByAccount_Response {
	refresh_tokens?: CSupportRefreshTokenDescription[];
	last_token_reset?: number;
}

export interface CAuthenticationSupport_QueryRefreshTokenByID_Request {
	token_id?: string;
}

export interface CAuthenticationSupport_QueryRefreshTokenByID_Response {
	refresh_tokens?: CSupportRefreshTokenDescription[];
}

export interface CAuthenticationSupport_RevokeToken_Request {
	token_id?: string;
	steamid?: string;
}

export interface CAuthenticationSupport_RevokeToken_Response {
}

export interface CAuthenticationSupport_GetTokenHistory_Request {
	token_id?: string;
}

export interface CSupportRefreshTokenAudit {
	action?: number;
	time?: number;
	ip?: CMsgIPAddress;
	actor?: string;
}

export interface CAuthenticationSupport_GetTokenHistory_Response {
	history?: CSupportRefreshTokenAudit[];
}

export interface CCloudGaming_CreateNonce_Request {
	platform?: string;
	appid?: number;
}

export interface CCloudGaming_CreateNonce_Response {
	nonce?: string;
	expiry?: number;
}

export interface CCloudGaming_GetTimeRemaining_Request {
	platform?: string;
	appid_list?: number[];
}

export interface CCloudGaming_TimeRemaining {
	appid?: number;
	minutes_remaining?: number;
}

export interface CCloudGaming_GetTimeRemaining_Response {
	entries?: CCloudGaming_TimeRemaining[];
}

export interface Authentication {
}

export interface AuthenticationSupport {
}

export interface CloudGaming {
}

///////////////////////////////////////////////
// steammessages_base.proto
///////////////////////////////////////////////

///////////////////////////////////////////////
// steammessages_broadcast.steamclient.proto
///////////////////////////////////////////////

export interface CBroadcast_BeginBroadcastSession_Request {
	permission?: number;
	gameid?: string;
	client_instance_id?: string;
	title?: string;
	cellid?: number;
	rtmp_token?: string;
	thumbnail_upload?: boolean;
	client_beta?: string;
	sysid?: number;
	allow_webrtc?: boolean;
}

export interface CBroadcast_BeginBroadcastSession_Response {
	broadcast_id?: string;
	thumbnail_upload_address?: string;
	thumbnail_upload_token?: string;
	thumbnail_interval_seconds?: number;
	heartbeat_interval_seconds?: number;
}

export interface CBroadcast_EndBroadcastSession_Request {
	broadcast_id?: string;
}

export interface CBroadcast_EndBroadcastSession_Response {
}

export interface CBroadcast_StartBroadcastUpload_Request {
	broadcast_id?: string;
	cellid?: number;
	as_rtmp?: boolean;
	delay_seconds?: number;
	rtmp_token?: string;
	upload_ip_address?: number;
	is_replay?: boolean;
	sysid?: number;
}

export interface CBroadcast_StartBroadcastUpload_Response {
	upload_token?: string;
	upload_address?: string;
	broadcast_upload_id?: string;
	enable_replay?: boolean;
	http_address?: string;
}

export interface CBroadcast_NotifyBroadcastUploadStop_Notification {
	broadcast_upload_id?: string;
	upload_result?: number;
}

export interface CBroadcast_WatchBroadcast_Request {
	steamid?: string;
	existing_broadcast_id?: string;
	viewer_token?: string;
	client_cell?: number;
	watch_location?: EBroadcastWatchLocation;
	is_webrtc?: boolean;
}

export interface CBroadcast_WatchBroadcast_Response {
	response?: CBroadcast_WatchBroadcast_Response_EWatchResponse;
	mpd_url?: string;
	broadcast_id?: string;
	gameid?: string;
	title?: string;
	num_viewers?: number;
	permission?: number;
	is_rtmp?: boolean;
	seconds_delay?: number;
	viewer_token?: string;
	hls_m3u8_master_url?: string;
	heartbeat_interval?: number;
	thumbnail_url?: string;
	is_webrtc?: boolean;
	webrtc_session_id?: string;
	webrtc_offer_sdp?: string;
	webrtc_turn_server?: string;
	is_replay?: boolean;
	duration?: number;
	cdn_auth_url_parameters?: string;
}

export enum CBroadcast_WatchBroadcast_Response_EWatchResponse {
	k_EWatchResponseReady = 1,
	k_EWatchResponseNotAvailable = 2,
	k_EWatchResponseWaitingForApproval = 3,
	k_EWatchResponseWaitingForStart = 4,
	k_EWatchResponseInvalidSession = 5,
	k_EWatchResponseTooManyBroadcasts = 6,
	k_EWatchResponseWaitingForReconnect = 7,
	k_EWatchResponseSystemNotSupported = 8,
	k_EWatchResponseUserRestricted = 9,
	k_EWatchResponseClientOutOfDate = 10,
	k_EWatchResponsePoorUploadQuality = 11,
	k_EWatchResponseMissingSubscription = 12,
}

export interface CBroadcast_HeartbeatBroadcast_Notification {
	steamid?: string;
	broadcast_id?: string;
	viewer_token?: string;
	representation?: number;
}

export interface CBroadcast_StopWatchingBroadcast_Notification {
	steamid?: string;
	broadcast_id?: string;
	viewer_token?: string;
}

export interface CBroadcast_GetBroadcastStatus_Request {
	steamid?: string;
	broadcast_id?: string;
}

export interface CBroadcast_GetBroadcastStatus_Response {
	gameid?: string;
	title?: string;
	num_viewers?: number;
	permission?: number;
	is_rtmp?: boolean;
	seconds_delay?: number;
	is_publisher?: boolean;
	thumbnail_url?: string;
	update_interval?: number;
	is_uploading?: boolean;
	duration?: number;
	is_replay?: boolean;
	is_capturing_vod?: boolean;
	is_store_whitelisted?: boolean;
}

export interface CBroadcast_GetBroadcastThumbnail_Request {
	steamid?: string;
	broadcast_id?: string;
}

export interface CBroadcast_GetBroadcastThumbnail_Response {
	thumbnail_url?: string;
	update_interval?: number;
	num_viewers?: number;
	duration?: number;
}

export interface CBroadcast_InviteToBroadcast_Request {
	steamid?: string;
	approval_response?: boolean;
}

export interface CBroadcast_InviteToBroadcast_Response {
	success?: boolean;
}

export interface CBroadcast_SendBroadcastStateToServer_Request {
	permission?: number;
	gameid?: string;
	title?: string;
	game_data_config?: string;
}

export interface CBroadcast_SendBroadcastStateToServer_Response {
}

export interface CBroadcast_NotifyBroadcastSessionHeartbeat_Notification {
	broadcast_id?: string;
}

export interface CBroadcast_GetBroadcastChatInfo_Request {
	steamid?: string;
	broadcast_id?: string;
	client_ip?: number;
	client_cell?: number;
}

export interface CBroadcast_GetBroadcastChatInfo_Response {
	chat_id?: string;
	view_url_template?: string;
	flair_group_ids?: number[];
}

export interface CBroadcast_PostChatMessage_Request {
	chat_id?: string;
	message?: string;
	instance_id?: number;
	language?: number;
	country_code?: string;
}

export interface CBroadcast_PostChatMessage_Response {
	persona_name?: string;
	in_game?: boolean;
	result?: EResult;
	cooldown_time_seconds?: number;
}

export interface CBroadcast_UpdateChatMessageFlair_Request {
	chat_id?: string;
	flair?: string;
}

export interface CBroadcast_UpdateChatMessageFlair_Response {
	result?: EResult;
	chat_id?: string;
	flair?: string;
}

export interface CBroadcast_MuteBroadcastChatUser_Request {
	chat_id?: string;
	user_steamid?: string;
	muted?: boolean;
}

export interface CBroadcast_MuteBroadcastChatUser_Response {
}

export interface CBroadcast_RemoveUserChatText_Request {
	chat_id?: string;
	user_steamid?: string;
}

export interface CBroadcast_RemoveUserChatText_Response {
}

export interface CBroadcast_GetBroadcastChatUserNames_Request {
	chat_id?: string;
	user_steamid?: string[];
}

export interface CBroadcast_GetBroadcastChatUserNames_Response {
	persona_names?: CBroadcast_GetBroadcastChatUserNames_Response_PersonaName[];
}

export interface CBroadcast_GetBroadcastChatUserNames_Response_PersonaName {
	steam_id?: string;
	persona?: string;
}

export interface CBroadcast_StartBuildClip_Request {
	steamid?: string;
	broadcast_session_id?: string;
	first_segment?: number;
	num_segments?: number;
	clip_description?: string;
}

export interface CBroadcast_StartBuildClip_Response {
	broadcast_clip_id?: string;
}

export interface CBroadcast_GetBuildClipStatus_Request {
	broadcast_clip_id?: string;
}

export interface CBroadcast_GetBuildClipStatus_Response {
}

export interface CBroadcast_SetClipDetails_Request {
	broadcast_clip_id?: string;
	start_time?: number;
	end_time?: number;
	video_description?: string;
}

export interface CBroadcast_SetClipDetails_Response {
}

export interface CBroadcast_GetClipDetails_Request {
	broadcast_clip_id?: string;
}

export interface CBroadcast_GetClipDetails_Response {
	broadcast_clip_id?: string;
	video_id?: string;
	channel_id?: string;
	app_id?: number;
	accountid_broadcaster?: number;
	accountid_clipmaker?: number;
	video_description?: string;
	start_time?: number;
	length_milliseconds?: number;
	thumbnail_path?: string;
}

export interface CBroadcast_SetRTMPInfo_Request {
	broadcast_permission?: number;
	update_token?: boolean;
	broadcast_delay?: number;
	app_id?: number;
	required_app_id?: number;
	broadcast_chat_permission?: EBroadcastChatPermission;
	broadcast_buffer?: number;
	steamid?: string;
	chat_rate_limit?: number;
	enable_replay?: boolean;
	is_partner_chat_only?: boolean;
	wordban_list?: string;
}

export interface CBroadcast_SetRTMPInfo_Response {
}

export interface CBroadcast_GetRTMPInfo_Request {
	ip?: number;
	steamid?: string;
}

export interface CBroadcast_GetRTMPInfo_Response {
	broadcast_permission?: number;
	rtmp_host?: string;
	rtmp_token?: string;
	broadcast_delay?: number;
	app_id?: number;
	required_app_id?: number;
	broadcast_chat_permission?: EBroadcastChatPermission;
	broadcast_buffer?: number;
	steamid?: string;
	chat_rate_limit?: number;
	enable_replay?: boolean;
	is_partner_chat_only?: boolean;
	wordban_list?: string;
}

export interface CBroadcast_WebRTCHaveTURNServer_Notification {
	broadcast_session_id?: string;
	turn_server?: string;
}

export interface CBroadcast_WebRTCStartResult_Request {
	webrtc_session_id?: string;
	started?: boolean;
	offer?: string;
	resolution_x?: number;
	resolution_y?: number;
	fps?: number;
}

export interface CBroadcast_WebRTCStartResult_Response {
}

export interface CBroadcast_WebRTCStopped_Request {
	webrtc_session_id?: string;
}

export interface CBroadcast_WebRTCStopped_Response {
}

export interface CBroadcast_WebRTCSetAnswer_Request {
	broadcaster_steamid?: string;
	webrtc_session_id?: string;
	answer?: string;
}

export interface CBroadcast_WebRTCSetAnswer_Response {
}

export interface CBroadcast_WebRTCLookupTURNServer_Request {
	cellid?: number;
}

export interface CBroadcast_WebRTCLookupTURNServer_Response {
	turn_server?: string;
}

export interface CBroadcast_WebRTC_Candidate {
	sdp_mid?: string;
	sdp_mline_index?: number;
	candidate?: string;
}

export interface CBroadcast_WebRTCAddHostCandidate_Request {
	webrtc_session_id?: string;
	candidate?: CBroadcast_WebRTC_Candidate;
}

export interface CBroadcast_WebRTCAddHostCandidate_Response {
}

export interface CBroadcast_WebRTCAddViewerCandidate_Request {
	broadcaster_steamid?: string;
	webrtc_session_id?: string;
	candidate?: CBroadcast_WebRTC_Candidate;
}

export interface CBroadcast_WebRTCAddViewerCandidate_Response {
}

export interface CBroadcast_WebRTCGetHostCandidates_Request {
	broadcaster_steamid?: string;
	webrtc_session_id?: string;
	candidate_generation?: number;
}

export interface CBroadcast_WebRTCGetHostCandidates_Response {
	candidate_generation?: number;
	candidates?: CBroadcast_WebRTC_Candidate[];
}

export interface CBroadcast_GetBroadcastUploadStats_Request {
	row_limit?: number;
	start_time?: number;
	upload_id?: string;
	steamid?: string;
	session_id?: string;
}

export interface CBroadcast_GetBroadcastUploadStats_Response {
	upload_stats?: CBroadcast_GetBroadcastUploadStats_Response_UploadStats[];
}

export interface CBroadcast_GetBroadcastUploadStats_Response_UploadStats {
	upload_result?: number;
	time_stopped?: number;
	seconds_uploaded?: number;
	max_viewers?: number;
	resolution_x?: number;
	resolution_y?: number;
	avg_bandwidth?: number;
	total_bytes?: string;
	app_id?: number;
	total_unique_viewers?: number;
	total_seconds_watched?: string;
	time_started?: number;
	upload_id?: string;
	local_address?: string;
	remote_address?: string;
	frames_per_second?: number;
	num_representations?: number;
	app_name?: string;
	is_replay?: boolean;
	session_id?: string;
}

export interface CBroadcast_GetBroadcastViewerStats_Request {
	upload_id?: string;
	steamid?: string;
}

export interface CBroadcast_GetBroadcastViewerStats_Response {
	viewer_stats?: CBroadcast_GetBroadcastViewerStats_Response_ViewerStats[];
	country_stats?: CBroadcast_GetBroadcastViewerStats_Response_CountryStats[];
}

export interface CBroadcast_GetBroadcastViewerStats_Response_ViewerStats {
	time?: number;
	num_viewers?: number;
}

export interface CBroadcast_GetBroadcastViewerStats_Response_CountryStats {
	country_code?: string;
	num_viewers?: number;
}

export interface CBroadcast_BroadcastViewerState_Notification {
	steamid?: string;
	state?: CBroadcast_BroadcastViewerState_Notification_EViewerState;
}

export enum CBroadcast_BroadcastViewerState_Notification_EViewerState {
	k_EViewerNeedsApproval = 1,
	k_EViewerWatching = 2,
	k_EViewerLeft = 3,
}

export interface CBroadcast_WaitingBroadcastViewer_Notification {
	broadcast_id?: string;
}

export interface CBroadcast_BroadcastUploadStarted_Notification {
	broadcast_id?: string;
	upload_token?: string;
	upload_address?: string;
	http_address?: string;
	broadcast_upload_id?: string;
	heartbeat_interval_seconds?: number;
	is_rtmp?: boolean;
}

export interface CBroadcast_StopBroadcastUpload_Notification {
	broadcast_id?: string;
	broadcast_relay_id?: string;
	upload_result?: number;
	too_many_poor_uploads?: boolean;
}

export interface CBroadcast_SessionClosed_Notification {
	broadcast_id?: string;
}

export interface CBroadcast_ViewerBroadcastInvite_Notification {
	broadcaster_steamid?: string;
}

export interface CBroadcast_BroadcastStatus_Notification {
	broadcast_id?: string;
	num_viewers?: number;
}

export interface CBroadcast_BroadcastChannelLive_Notification {
	broadcast_channel_id?: string;
	broadcast_channel_name?: string;
	broadcast_channel_avatar?: string;
}

export interface CBroadcast_SendThumbnailToRelay_Notification {
	thumbnail_upload_token?: string;
	thumbnail_broadcast_session_id?: string;
	thumbnail_data?: Buffer;
	thumbnail_width?: number;
	thumbnail_height?: number;
}

export interface CBroadcast_WebRTCNeedTURNServer_Notification {
	broadcast_session_id?: string;
}

export interface CBroadcast_WebRTCStart_Notification {
	broadcast_session_id?: string;
	webrtc_session_id?: string;
	viewer_steamid?: string;
	viewer_token?: string;
}

export interface CBroadcast_WebRTCSetAnswer_Notification {
	broadcast_session_id?: string;
	webrtc_session_id?: string;
	answer?: string;
}

export interface CBroadcast_WebRTCAddViewerCandidate_Notification {
	broadcast_session_id?: string;
	webrtc_session_id?: string;
	candidate?: CBroadcast_WebRTC_Candidate;
}

export interface Broadcast {
}

export interface BroadcastClient {
}

///////////////////////////////////////////////
// steammessages_chat.steamclient.proto
///////////////////////////////////////////////

export interface CChat_RequestFriendPersonaStates_Request {
}

export interface CChat_RequestFriendPersonaStates_Response {
}

export interface CChatRoom_CreateChatRoomGroup_Request {
	steamid_partner?: string;
	steamid_invited?: string;
	name?: string;
	steamid_invitees?: string[];
	watching_broadcast_accountid?: number;
	watching_broadcast_channel_id?: string;
}

export interface CChatRole {
	role_id?: string;
	name?: string;
	ordinal?: number;
}

export interface CChatRoleActions {
	role_id?: string;
	can_create_rename_delete_channel?: boolean;
	can_kick?: boolean;
	can_ban?: boolean;
	can_invite?: boolean;
	can_change_tagline_avatar_name?: boolean;
	can_chat?: boolean;
	can_view_history?: boolean;
	can_change_group_roles?: boolean;
	can_change_user_roles?: boolean;
	can_mention_all?: boolean;
	can_set_watching_broadcast?: boolean;
}

export interface CChatPartyBeacon {
	app_id?: number;
	steamid_owner?: string;
	beacon_id?: string;
	game_metadata?: string;
}

export interface CChatRoomGroupHeaderState {
	chat_group_id?: string;
	chat_name?: string;
	clanid?: number;
	accountid_owner?: number;
	appid?: number;
	tagline?: string;
	avatar_sha?: Buffer;
	default_role_id?: string;
	roles?: CChatRole[];
	role_actions?: CChatRoleActions[];
	watching_broadcast_accountid?: number;
	party_beacons?: CChatPartyBeacon[];
	watching_broadcast_channel_id?: string;
	active_minigame_id?: string;
	avatar_ugc_url?: string;
	disabled?: boolean;
}

export interface CChatRoomMember {
	accountid?: number;
	state?: EChatRoomJoinState;
	rank?: EChatRoomGroupRank;
	time_kick_expire?: number;
	role_ids?: string[];
}

export interface CChatRoomState {
	chat_id?: string;
	chat_name?: string;
	voice_allowed?: boolean;
	members_in_voice?: number[];
	time_last_message?: number;
	sort_order?: number;
	last_message?: string;
	accountid_last_message?: number;
}

export interface CChatRoomGroupState {
	header_state?: CChatRoomGroupHeaderState;
	members?: CChatRoomMember[];
	default_chat_id?: string;
	chat_rooms?: CChatRoomState[];
	kicked?: CChatRoomMember[];
}

export interface CUserChatRoomState {
	chat_id?: string;
	time_joined?: number;
	time_last_ack?: number;
	desktop_notification_level?: EChatRoomNotificationLevel;
	mobile_notification_level?: EChatRoomNotificationLevel;
	time_last_mention?: number;
	unread_indicator_muted?: boolean;
	time_first_unread?: number;
}

export interface CUserChatRoomGroupState {
	chat_group_id?: string;
	time_joined?: number;
	user_chat_room_state?: CUserChatRoomState[];
	desktop_notification_level?: EChatRoomNotificationLevel;
	mobile_notification_level?: EChatRoomNotificationLevel;
	time_last_group_ack?: number;
	unread_indicator_muted?: boolean;
}

export interface CChatRoom_CreateChatRoomGroup_Response {
	chat_group_id?: string;
	state?: CChatRoomGroupState;
	user_chat_state?: CUserChatRoomGroupState;
}

export interface CChatRoom_SaveChatRoomGroup_Request {
	chat_group_id?: string;
	name?: string;
}

export interface CChatRoom_SaveChatRoomGroup_Response {
}

export interface CChatRoom_RenameChatRoomGroup_Request {
	chat_group_id?: string;
	name?: string;
}

export interface CChatRoom_RenameChatRoomGroup_Response {
	name?: string;
}

export interface CChatRoom_SetChatRoomGroupTagline_Request {
	chat_group_id?: string;
	tagline?: string;
}

export interface CChatRoom_SetChatRoomGroupTagline_Response {
}

export interface CChatRoom_SetChatRoomGroupAvatar_Request {
	chat_group_id?: string;
	avatar_sha?: Buffer;
}

export interface CChatRoom_SetChatRoomGroupAvatar_Response {
}

export interface CChatRoom_SetChatRoomGroupWatchingBroadcast_Request {
	chat_group_id?: string;
	watching_broadcast_accountid?: number;
	watching_broadcast_channel_id?: string;
}

export interface CChatRoom_SetChatRoomGroupWatchingBroadcast_Response {
}

export interface CChatRoom_JoinMiniGameForChatRoomGroup_Request {
	chat_group_id?: string;
	chat_id?: string;
}

export interface CChatRoom_JoinMiniGameForChatRoomGroup_Response {
	minigame_id?: string;
}

export interface CChatRoom_EndMiniGameForChatRoomGroup_Request {
	chat_group_id?: string;
	chat_id?: string;
	minigame_id?: string;
}

export interface CChatRoom_EndMiniGameForChatRoomGroup_Response {
}

export interface CChatRoom_MuteUser_Request {
	chat_group_id?: string;
	steamid?: string;
	expiration?: number;
}

export interface CChatRoom_MuteUser_Response {
}

export interface CChatRoom_KickUser_Request {
	chat_group_id?: string;
	steamid?: string;
	expiration?: number;
}

export interface CChatRoom_KickUser_Response {
}

export interface CChatRoom_SetUserBanState_Request {
	chat_group_id?: string;
	steamid?: string;
	ban_state?: boolean;
}

export interface CChatRoom_SetUserBanState_Response {
}

export interface CChatRoom_RevokeInvite_Request {
	chat_group_id?: string;
	steamid?: string;
}

export interface CChatRoom_RevokeInvite_Response {
}

export interface CChatRoom_CreateRole_Request {
	chat_group_id?: string;
	name?: string;
}

export interface CChatRoom_CreateRole_Response {
	actions?: CChatRoleActions;
}

export interface CChatRoom_GetRoles_Request {
	chat_group_id?: string;
}

export interface CChatRoom_GetRoles_Response {
	roles?: CChatRole[];
}

export interface CChatRoom_RenameRole_Request {
	chat_group_id?: string;
	role_id?: string;
	name?: string;
}

export interface CChatRoom_RenameRole_Response {
}

export interface CChatRoom_ReorderRole_Request {
	chat_group_id?: string;
	role_id?: string;
	ordinal?: number;
}

export interface CChatRoom_ReorderRole_Response {
}

export interface CChatRoom_DeleteRole_Request {
	chat_group_id?: string;
	role_id?: string;
}

export interface CChatRoom_DeleteRole_Response {
}

export interface CChatRoom_GetRoleActions_Request {
	chat_group_id?: string;
	role_id?: string;
}

export interface CChatRoom_GetRoleActions_Response {
	actions?: CChatRoleActions[];
}

export interface CChatRoom_ReplaceRoleActions_Request {
	chat_group_id?: string;
	role_id?: string;
	actions?: CChatRoleActions;
}

export interface CChatRoom_ReplaceRoleActions_Response {
}

export interface CChatRoom_AddRoleToUser_Request {
	chat_group_id?: string;
	role_id?: string;
	steamid?: string;
}

export interface CChatRoom_AddRoleToUser_Response {
}

export interface CChatRoom_GetRolesForUser_Request {
	chat_group_id?: string;
	steamid?: string;
}

export interface CChatRoom_GetRolesForUser_Response {
	role_ids?: string[];
}

export interface CChatRoom_DeleteRoleFromUser_Request {
	chat_group_id?: string;
	role_id?: string;
	steamid?: string;
}

export interface CChatRoom_DeleteRoleFromUser_Response {
}

export interface CChatRoom_JoinChatRoomGroup_Request {
	chat_group_id?: string;
	invite_code?: string;
	chat_id?: string;
}

export interface CChatRoom_JoinChatRoomGroup_Response {
	state?: CChatRoomGroupState;
	user_chat_state?: CUserChatRoomGroupState;
	join_chat_id?: string;
	time_expire?: number;
}

export interface CChatRoom_InviteFriendToChatRoomGroup_Request {
	chat_group_id?: string;
	steamid?: string;
	chat_id?: string;
	skip_friendsui_check?: boolean;
}

export interface CChatRoom_InviteFriendToChatRoomGroup_Response {
}

export interface CChatRoom_LeaveChatRoomGroup_Request {
	chat_group_id?: string;
}

export interface CChatRoom_LeaveChatRoomGroup_Response {
}

export interface CChatRoom_CreateChatRoom_Request {
	chat_group_id?: string;
	name?: string;
	allow_voice?: boolean;
}

export interface CChatRoom_CreateChatRoom_Response {
	chat_room?: CChatRoomState;
}

export interface CChatRoom_DeleteChatRoom_Request {
	chat_group_id?: string;
	chat_id?: string;
}

export interface CChatRoom_DeleteChatRoom_Response {
}

export interface CChatRoom_RenameChatRoom_Request {
	chat_group_id?: string;
	chat_id?: string;
	name?: string;
}

export interface CChatRoom_RenameChatRoom_Response {
}

export interface CChatRoom_ReorderChatRoom_Request {
	chat_group_id?: string;
	chat_id?: string;
	move_after_chat_id?: string;
}

export interface CChatRoom_ReorderChatRoom_Response {
}

export interface CChatRoom_SendChatMessage_Request {
	chat_group_id?: string;
	chat_id?: string;
	message?: string;
	echo_to_sender?: boolean;
}

export interface CChatRoom_SendChatMessage_Response {
	modified_message?: string;
	server_timestamp?: number;
	ordinal?: number;
	message_without_bb_code?: string;
}

export interface CChatRoom_JoinVoiceChat_Request {
	chat_group_id?: string;
	chat_id?: string;
}

export interface CChatRoom_JoinVoiceChat_Response {
	voice_chatid?: string;
}

export interface CChatRoom_LeaveVoiceChat_Request {
	chat_group_id?: string;
	chat_id?: string;
}

export interface CChatRoom_LeaveVoiceChat_Response {
}

export interface CChatRoom_GetMessageHistory_Request {
	chat_group_id?: string;
	chat_id?: string;
	last_time?: number;
	last_ordinal?: number;
	start_time?: number;
	start_ordinal?: number;
	max_count?: number;
}

export interface ServerMessage {
	message?: EChatRoomServerMessage;
	string_param?: string;
	accountid_param?: number;
}

export interface CChatRoom_GetMessageHistory_Response {
	messages?: CChatRoom_GetMessageHistory_Response_ChatMessage[];
	more_available?: boolean;
}

export interface CChatRoom_GetMessageHistory_Response_ChatMessage {
	sender?: number;
	server_timestamp?: number;
	message?: string;
	ordinal?: number;
	server_message?: ServerMessage;
	deleted?: boolean;
	reactions?: CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction[];
}

export interface CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction {
	reaction_type?: EChatRoomMessageReactionType;
	reaction?: string;
	num_reactors?: number;
	has_user_reacted?: boolean;
}

export interface CChatRoom_GetMyChatRoomGroups_Request {
}

export interface CChatRoom_GetChatRoomGroupSummary_Response {
	chat_group_id?: string;
	chat_group_name?: string;
	active_member_count?: number;
	active_voice_member_count?: number;
	default_chat_id?: string;
	chat_rooms?: CChatRoomState[];
	clanid?: number;
	chat_group_tagline?: string;
	accountid_owner?: number;
	top_members?: number[];
	chat_group_avatar_sha?: Buffer;
	rank?: EChatRoomGroupRank;
	default_role_id?: string;
	role_ids?: string[];
	role_actions?: CChatRoleActions[];
	watching_broadcast_accountid?: number;
	appid?: number;
	party_beacons?: CChatPartyBeacon[];
	watching_broadcast_channel_id?: string;
	active_minigame_id?: string;
	avatar_ugc_url?: string;
	disabled?: boolean;
}

export interface CChatRoomSummaryPair {
	user_chat_group_state?: CUserChatRoomGroupState;
	group_summary?: CChatRoom_GetChatRoomGroupSummary_Response;
}

export interface CChatRoom_GetMyChatRoomGroups_Response {
	chat_room_groups?: CChatRoomSummaryPair[];
}

export interface CChatRoom_GetChatRoomGroupState_Request {
	chat_group_id?: string;
}

export interface CChatRoom_GetChatRoomGroupState_Response {
	state?: CChatRoomGroupState;
}

export interface CChatRoom_GetChatRoomGroupSummary_Request {
	chat_group_id?: string;
}

export interface CChatRoom_SetAppChatRoomGroupForceActive_Request {
	chat_group_id?: string;
	requesting_app_id?: number;
}

export interface CChatRoom_SetAppChatRoomGroupForceActive_Response {
	result?: EResult;
	accounts_in_channel?: number[];
}

export interface CChatRoom_SetAppChatRoomGroupStopForceActive_Notification {
	chat_group_id?: string;
	requesting_app_id?: number;
}

export interface CChatRoom_AckChatMessage_Notification {
	chat_group_id?: string;
	chat_id?: string;
	timestamp?: number;
}

export interface CChatRoom_CreateInviteLink_Request {
	chat_group_id?: string;
	seconds_valid?: number;
	chat_id?: string;
}

export interface CChatRoom_CreateInviteLink_Response {
	invite_code?: string;
	seconds_valid?: number;
}

export interface CChatRoom_GetInviteLinkInfo_Request {
	invite_code?: string;
}

export interface CChatRoom_GetInviteLinkInfo_Response {
	steamid_sender?: string;
	time_expires?: number;
	chat_id?: string;
	group_summary?: CChatRoom_GetChatRoomGroupSummary_Response;
	user_chat_group_state?: CUserChatRoomGroupState;
	time_kick_expire?: number;
	banned?: boolean;
}

export interface CChatRoom_GetInviteInfo_Request {
	steamid_invitee?: string;
	chat_group_id?: string;
	chat_id?: string;
	invite_code?: string;
}

export interface CChatRoom_GetInviteInfo_Response {
	group_summary?: CChatRoom_GetChatRoomGroupSummary_Response;
	time_kick_expire?: number;
	banned?: boolean;
}

export interface CChatRoom_GetInviteLinksForGroup_Request {
	chat_group_id?: string;
}

export interface CChatRoom_GetInviteLinksForGroup_Response {
	invite_links?: CChatRoom_GetInviteLinksForGroup_Response_LinkInfo[];
}

export interface CChatRoom_GetInviteLinksForGroup_Response_LinkInfo {
	invite_code?: string;
	steamid_creator?: string;
	time_expires?: number;
	chat_id?: string;
}

export interface CChatRoom_GetBanList_Request {
	chat_group_id?: string;
}

export interface CChatRoom_GetBanList_Response {
	bans?: CChatRoom_GetBanList_Response_BanInfo[];
}

export interface CChatRoom_GetBanList_Response_BanInfo {
	accountid?: number;
	accountid_actor?: number;
	time_banned?: number;
	ban_reason?: string;
}

export interface CChatRoom_GetInviteList_Request {
	chat_group_id?: string;
}

export interface CChatRoomGroupInvite {
	accountid?: number;
	accountid_actor?: number;
	time_invited?: number;
}

export interface CChatRoom_GetInviteList_Response {
	invites?: CChatRoomGroupInvite[];
}

export interface CChatRoom_DeleteInviteLink_Request {
	chat_group_id?: string;
	invite_code?: string;
}

export interface CChatRoom_DeleteInviteLink_Response {
}

export interface CChatRoom_SetSessionActiveChatRoomGroups_Request {
	chat_group_ids?: string[];
	chat_groups_data_requested?: string[];
	virtualize_members_threshold?: number;
}

export interface CChatRoom_SetSessionActiveChatRoomGroups_Response {
	chat_states?: CChatRoomGroupState[];
	virtualize_members_chat_group_ids?: string[];
}

export interface CChatRoom_SetUserChatGroupPreferences_Request {
	chat_group_id?: string;
	chat_group_preferences?: CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences;
	chat_room_preferences?: CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences[];
}

export interface CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences {
	desktop_notification_level?: EChatRoomNotificationLevel;
	mobile_notification_level?: EChatRoomNotificationLevel;
	unread_indicator_muted?: boolean;
}

export interface CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences {
	chat_id?: string;
	desktop_notification_level?: EChatRoomNotificationLevel;
	mobile_notification_level?: EChatRoomNotificationLevel;
	unread_indicator_muted?: boolean;
}

export interface CChatRoom_SetUserChatGroupPreferences_Response {
}

export interface CChatRoom_DeleteChatMessages_Request {
	chat_group_id?: string;
	chat_id?: string;
	messages?: CChatRoom_DeleteChatMessages_Request_Message[];
}

export interface CChatRoom_DeleteChatMessages_Request_Message {
	server_timestamp?: number;
	ordinal?: number;
}

export interface CChatRoom_DeleteChatMessages_Response {
}

export interface CChatRoom_UpdateMemberListView_Notification {
	chat_group_id?: string;
	view_id?: string;
	start?: number;
	end?: number;
	client_changenumber?: number;
	delete_view?: boolean;
	persona_subscribe_accountids?: number[];
	persona_unsubscribe_accountids?: number[];
}

export interface CChatRoom_SearchMembers_Request {
	chat_group_id?: string;
	search_id?: string;
	search_text?: string;
	max_results?: number;
}

export interface CChatRoom_SearchMembers_Response {
	matching_members?: CChatRoom_SearchMembers_Response_MemberMatch[];
	status_flags?: number;
}

export interface CChatRoom_SearchMembers_Response_MemberMatch {
	accountid?: number;
	persona?: CMsgClientPersonaState_Friend;
}

export interface CChatRoom_UpdateMessageReaction_Request {
	chat_group_id?: string;
	chat_id?: string;
	server_timestamp?: number;
	ordinal?: number;
	reaction_type?: EChatRoomMessageReactionType;
	reaction?: string;
	is_add?: boolean;
}

export interface CChatRoom_UpdateMessageReaction_Response {
	num_reactors?: number;
}

export interface CChatRoom_GetMessageReactionReactors_Request {
	chat_group_id?: string;
	chat_id?: string;
	server_timestamp?: number;
	ordinal?: number;
	reaction_type?: EChatRoomMessageReactionType;
	reaction?: string;
	limit?: number;
}

export interface CChatRoom_GetMessageReactionReactors_Response {
	reactors?: number[];
}

export interface CClanChatRooms_GetClanChatRoomInfo_Request {
	steamid?: string;
	autocreate?: boolean;
}

export interface CClanChatRooms_GetClanChatRoomInfo_Response {
	chat_group_summary?: CChatRoom_GetChatRoomGroupSummary_Response;
}

export interface CClanChatRooms_SetClanChatRoomPrivate_Request {
	steamid?: string;
	chat_room_private?: boolean;
}

export interface CClanChatRooms_SetClanChatRoomPrivate_Response {
	chat_room_private?: boolean;
}

export interface CChatMentions {
	mention_all?: boolean;
	mention_here?: boolean;
	mention_accountids?: number[];
}

export interface CChatRoom_IncomingChatMessage_Notification {
	chat_group_id?: string;
	chat_id?: string;
	steamid_sender?: string;
	message?: string;
	timestamp?: number;
	mentions?: CChatMentions;
	ordinal?: number;
	server_message?: ServerMessage;
	message_no_bbcode?: string;
	chat_name?: string;
}

export interface CChatRoom_ChatMessageModified_Notification {
	chat_group_id?: string;
	chat_id?: string;
	messages?: CChatRoom_ChatMessageModified_Notification_ChatMessage[];
}

export interface CChatRoom_ChatMessageModified_Notification_ChatMessage {
	server_timestamp?: number;
	ordinal?: number;
	deleted?: boolean;
}

export interface CChatRoom_MemberStateChange_Notification {
	chat_group_id?: string;
	member?: CChatRoomMember;
	change?: EChatRoomMemberStateChange;
}

export interface CChatRoom_ChatRoomHeaderState_Notification {
	header_state?: CChatRoomGroupHeaderState;
}

export interface CChatRoom_ChatRoomGroupRoomsChange_Notification {
	chat_group_id?: string;
	default_chat_id?: string;
	chat_rooms?: CChatRoomState[];
}

export interface CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification {
	chat_id?: string;
	chat_group_id?: string;
}

export interface ChatRoomClient_NotifyChatGroupUserStateChanged_Notification {
	chat_group_id?: string;
	user_chat_group_state?: CUserChatRoomGroupState;
	group_summary?: CChatRoom_GetChatRoomGroupSummary_Response;
	user_action?: EChatRoomMemberStateChange;
}

export interface ChatRoomClient_NotifyChatRoomDisconnect_Notification {
	chat_group_ids?: string[];
}

export interface CChatRoomMemberListView {
	start?: number;
	end?: number;
	total_count?: number;
	client_changenumber?: number;
	server_changenumber?: number;
}

export interface CChatRoomMemberSummaryCounts {
	ingame?: number;
	online?: number;
	offline?: number;
}

export interface CChatRoomClient_MemberListViewUpdated_Notification {
	chat_group_id?: string;
	view_id?: string;
	view?: CChatRoomMemberListView;
	members?: CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry[];
	status_flags?: number;
	member_summary?: CChatRoomMemberSummaryCounts;
	subscribed_personas?: CMsgClientPersonaState_Friend[];
}

export interface CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry {
	rank?: number;
	accountid?: number;
	persona?: CMsgClientPersonaState_Friend;
}

export interface CChatRoom_MessageReaction_Notification {
	chat_group_id?: string;
	chat_id?: string;
	server_timestamp?: number;
	ordinal?: number;
	reactor?: string;
	reaction_type?: EChatRoomMessageReactionType;
	reaction?: string;
	is_add?: boolean;
}

export interface CChatUsability_ClientUsabilityMetrics_Notification {
	metrics_run_id?: number;
	client_build?: number;
	metrics_version?: number;
	in_web?: boolean;
	settings?: CChatUsability_ClientUsabilityMetrics_Notification_Settings;
	voice_settings?: CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings;
	ui_state?: CChatUsability_ClientUsabilityMetrics_Notification_UIState;
	metrics?: CChatUsability_ClientUsabilityMetrics_Notification_Metrics;
}

export interface CChatUsability_ClientUsabilityMetrics_Notification_Settings {
	notifications_show_ingame?: boolean;
	notifications_show_online?: boolean;
	notifications_show_message?: boolean;
	notifications_events_and_announcements?: boolean;
	sounds_play_ingame?: boolean;
	sounds_play_online?: boolean;
	sounds_play_message?: boolean;
	sounds_events_and_announcements?: boolean;
	always_new_chat_window?: boolean;
	force_alphabetic_friend_sorting?: boolean;
	chat_flash_mode?: number;
	remember_open_chats?: boolean;
	compact_quick_access?: boolean;
	compact_friends_list?: boolean;
	notifications_show_chat_room_notification?: boolean;
	sounds_play_chat_room_notification?: boolean;
	hide_offline_friends_in_tag_groups?: boolean;
	hide_categorized_friends?: boolean;
	categorize_in_game_friends_by_game?: boolean;
	chat_font_size?: number;
	use24hour_clock?: boolean;
	do_not_disturb_mode?: boolean;
	disable_embed_inlining?: boolean;
	sign_into_friends?: boolean;
	animated_avatars?: boolean;
}

export interface CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings {
	voice_input_gain?: number;
	voice_output_gain?: number;
	noise_gate_level?: number;
	voice_use_echo_cancellation?: boolean;
	voice_use_noise_cancellation?: boolean;
	voice_use_auto_gain_control?: boolean;
	selected_non_default_mic?: boolean;
	selected_non_default_output?: boolean;
	push_to_talk_enabled?: boolean;
	push_to_mute_enabled?: boolean;
	play_ptt_sounds?: boolean;
}

export interface CChatUsability_ClientUsabilityMetrics_Notification_UIState {
	friends_list_height?: number;
	friends_list_width?: number;
	friends_list_docked?: boolean;
	friends_list_collapsed?: boolean;
	friends_list_group_chats_height?: number;
	friends_list_visible?: boolean;
	chat_popups_opened?: number;
	group_chat_tabs_opened?: number;
	friend_chat_tabs_opened?: number;
	chat_window_width?: number;
	chat_window_height?: number;
	category_collapse?: CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState;
	group_chat_left_col_collapsed?: number;
	group_chat_right_col_collapsed?: number;
	in_one_on_one_voice_chat?: boolean;
	in_group_voice_chat?: boolean;
}

export interface CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState {
	in_game_collapsed?: boolean;
	online_collapsed?: boolean;
	offline_collapsed?: boolean;
	game_groups_collapsed?: number;
	categories_collapsed?: number;
}

export interface CChatUsability_ClientUsabilityMetrics_Notification_Metrics {
	friends_count?: number;
	friends_category_count?: number;
	friends_categorized_count?: number;
	friends_online_count?: number;
	friends_in_game_count?: number;
	friends_in_game_singleton_count?: number;
	game_group_count?: number;
	friends_favorite_count?: number;
	group_chat_count?: number;
	group_chat_favorite_count?: number;
}

export interface CChatUsability_RequestClientUsabilityMetrics_Notification {
	metrics_run_id?: number;
}

export interface Chat {
}

export interface ChatRoom {
}

export interface ClanChatRooms {
}

export interface ChatRoomClient {
}

export interface ChatUsability {
}

export interface ChatUsabilityClient {
}

///////////////////////////////////////////////
// steammessages_clientlanp2p.proto
///////////////////////////////////////////////

export interface CMsgClientLANP2PRequestChunks {
	chunk_keys?: CMsgClientLANP2PRequestChunks_ChunkKey[];
}

export interface CMsgClientLANP2PRequestChunks_ChunkKey {
	depot_id?: number;
	sha?: Buffer;
}

export interface CMsgClientLANP2PRequestChunksResponse {
	chunk_responses?: CMsgClientLANP2PRequestChunksResponse_ChunkData[];
}

export interface CMsgClientLANP2PRequestChunksResponse_ChunkData {
	result?: EResult;
	depot_id?: number;
	sha?: Buffer;
	chunk_data?: Buffer;
	encrypted?: boolean;
	compressed?: boolean;
}

export interface CMsgClientPeerChunkRequest {
	app_id?: number;
	depot_id?: number;
	sha?: Buffer;
}

export interface CMsgClientPeerChunkResponse {
	result?: EResult;
	app_id?: number;
	depot_id?: number;
	sha?: Buffer;
	encrypted?: boolean;
	compressed?: boolean;
	chunk_data?: Buffer;
}

///////////////////////////////////////////////
// steammessages_clientmetrics.steamclient.proto
///////////////////////////////////////////////

export interface CClientMetrics_AppInterfaceCreation {
	raw_version?: string;
	requested_interface_type?: string;
}

export interface CClientMetrics_AppInterfaceMethodCounts {
	interface_name?: string;
	method_name?: string;
	call_count?: number;
}

export interface CClientMetrics_AppInterfaceStats_Notification {
	game_id?: string;
	interfaces_created?: CClientMetrics_AppInterfaceCreation[];
	methods_called?: CClientMetrics_AppInterfaceMethodCounts[];
	session_length_seconds?: number;
}

export interface CClientMetrics_IPv6Connectivity_Result {
	protocol_tested?: number;
	connectivity_state?: number;
}

export interface CClientMetrics_IPv6Connectivity_Notification {
	cell_id?: number;
	results?: CClientMetrics_IPv6Connectivity_Result[];
	private_ip_is_rfc6598?: boolean;
}

export interface CClientMetrics_SteamPipeWorkStats_Operation {
	type?: ESteamPipeOperationType;
	num_ops?: number;
	num_bytes?: string;
	busy_time_ms?: string;
	idle_time_ms?: string;
	sum_run_time_ms?: string;
	sum_wait_time_ms?: string;
}

export interface CClientMetrics_SteamPipeWorkStats_Notification {
	appid?: number;
	depotid?: number;
	work_type?: ESteamPipeWorkType;
	operations?: CClientMetrics_SteamPipeWorkStats_Operation[];
	hardware_type?: number;
}

export interface CClientMetrics_ReportReactUsage_Notification {
	product?: string;
	version?: string;
	routes?: CClientMetrics_ReportReactUsage_Notification_RouteData[];
	components?: CClientMetrics_ReportReactUsage_Notification_ComponentData[];
	actions?: CClientMetrics_ReportReactUsage_Notification_ActionData[];
}

export interface CClientMetrics_ReportReactUsage_Notification_RouteData {
	route?: string;
	count?: number;
}

export interface CClientMetrics_ReportReactUsage_Notification_ComponentData {
	component?: string;
	count?: number;
}

export interface CClientMetrics_ReportReactUsage_Notification_ActionData {
	action?: string;
	count?: number;
}

export interface CClientMetrics_ReportClientError_Notification {
	product?: string;
	version?: string;
	errors?: CClientMetrics_ReportClientError_Notification_Error[];
}

export interface CClientMetrics_ReportClientError_Notification_Error {
	identifier?: string;
	message?: string;
	count?: number;
}

export interface CClientMetrics_ClientBootstrap_Notification {
	summary?: CClientMetrics_ClientBootstrap_Summary;
}

export interface CClientMetrics_DownloadRates_Notification {
	cell_id?: number;
	stats?: CClientMetrics_DownloadRates_Notification_StatsInfo[];
	throttling_kbps?: number;
}

export interface CClientMetrics_DownloadRates_Notification_StatsInfo {
	source_type?: number;
	source_id?: number;
	bytes?: string;
	host_name?: string;
	microseconds?: string;
	used_ipv6?: boolean;
	proxied?: boolean;
	used_http2?: boolean;
	cache_hits?: number;
	cache_misses?: number;
	hit_bytes?: string;
	miss_bytes?: string;
}

export interface CClientMetrics_ContentValidation_Notification {
	validation_result?: number;
	app_id?: number;
	staged_files?: boolean;
	user_initiated?: boolean;
	early_out?: boolean;
	chunks_scanned?: number;
	chunks_corrupt?: number;
	bytes_scanned?: string;
	chunk_bytes_corrupt?: string;
	total_file_size_corrupt?: string;
}

export interface CClientMetrics_CloudAppSyncStats_Notification {
	app_id?: number;
	platform_type?: number;
	preload?: boolean;
	blocking_app_launch?: boolean;
	files_uploaded?: number;
	files_downloaded?: number;
	files_deleted?: number;
	bytes_uploaded?: string;
	bytes_downloaded?: string;
	microsec_total?: string;
	microsec_init_caches?: string;
	microsec_validate_state?: string;
	microsec_ac_launch?: string;
	microsec_ac_prep_user_files?: string;
	microsec_ac_exit?: string;
	microsec_build_sync_list?: string;
	microsec_delete_files?: string;
	microsec_download_files?: string;
	microsec_upload_files?: string;
	hardware_type?: number;
	files_managed?: number;
}

export interface CClientMetrics_ContentDownloadResponse_Counts_Notification {
	cell_id?: number;
	data?: CClientMetrics_ContentDownloadResponse_Hosts;
}

export interface CClientMetrics_ReportClientArgs_Notification {
	client_args?: string[];
	gpu_webview_regkey_disabled?: boolean;
	suppress_gpu_chrome?: boolean;
	browser_not_supported?: boolean;
	hw_accel_video_regkey_disabled?: boolean;
	mini_mode_enabled?: boolean;
	fps_counter_enabled?: boolean;
	library_low_bandwidth_mode_enabled?: boolean;
	library_low_perf_mode_enabled?: boolean;
}

export interface ClientMetrics {
}

///////////////////////////////////////////////
// steammessages_clientnotificationtypes.proto
///////////////////////////////////////////////

export interface CClientNotificationCloudSyncFailure {
	appid?: number;
}

export interface CClientNotificationCloudSyncConflict {
	appid?: number;
}

export interface CClientNotificationScreenshot {
	screenshot_handle?: string;
	description?: string;
	local_url?: string;
}

export interface CClientNotificationDownloadCompleted {
	appid?: number;
}

export interface CClientNotificationFriendInvite {
	steamid?: string;
}

export interface CClientNotificationFriendInviteRollup {
	new_invite_count?: number;
}

export interface CClientNotificationFriendInGame {
	steamid?: string;
	game_name?: string;
}

export interface CClientNotificationFriendOnline {
	steamid?: string;
}

export interface CClientNotificationAchievement {
	achievement_id?: string;
	appid?: number;
	name?: string;
	description?: string;
	image_url?: string;
	achieved?: boolean;
	rtime_unlocked?: number;
	min_progress?: number;
	current_progress?: number;
	max_progress?: number;
	global_achieved_pct?: number;
}

export interface CClientNotificationLowBattery {
	pct_remaining?: number;
}

export interface CClientNotificationSystemUpdate {
	type?: ESystemUpdateNotificationType;
}

export interface CClientNotificationFriendMessage {
	tag?: string;
	steamid?: string;
	title?: string;
	body?: string;
	icon?: string;
	notificationid?: number;
	response_steamurl?: string;
}

export interface CClientNotificationGroupChatMessage {
	tag?: string;
	steamid_sender?: string;
	chat_group_id?: string;
	chat_id?: string;
	title?: string;
	body?: string;
	rawbody?: string;
	icon?: string;
	notificationid?: number;
}

export interface CClientNotificationFamilySharingDeviceAuthorizationChanged {
	accountid_owner?: number;
	authorized?: boolean;
}

export interface CClientNotificationFamilySharingStopPlaying {
	accountid_owner?: number;
	seconds_remaining?: number;
}

export interface CClientNotificationFamilySharingLibraryAvailable {
	accountid_owner?: number;
}

export interface CClientNotificationIncomingVoiceChat {
	steamid?: string;
}

export interface CClientNotificationClaimSteamDeckRewards {
}

export interface CClientNotificationGiftReceived {
	sender_name?: string;
}

export interface CClientNotificationItemAnnouncement {
	new_item_count?: number;
	new_backpack_items?: boolean;
}

export interface CClientNotificationHardwareSurveyPending {
}

export interface CClientNotificationLowDiskSpace {
	folder_index?: number;
}

export interface CClientNotificationBatteryTemperature {
	temperature?: number;
	notification_type?: string;
}

export interface CClientNotificationDockUnsupportedFirmware {
}

export interface CClientNotificationPeerContentUpload {
	appid?: number;
	peer_name?: string;
}

export interface CClientNotificationCannotReadControllerGuideButton {
	controller_index?: number;
}

///////////////////////////////////////////////
// steammessages_clientserver.proto
///////////////////////////////////////////////

export interface CMsgClientRegisterAuthTicketWithCM {
	protocol_version?: number;
	ticket?: Buffer;
	client_instance_id?: string;
}

export interface CMsgClientTicketAuthComplete {
	steam_id?: string;
	game_id?: string;
	estate?: number;
	eauth_session_response?: number;
	DEPRECATED_ticket?: Buffer;
	ticket_crc?: number;
	ticket_sequence?: number;
	owner_steam_id?: string;
}

export interface CMsgClientCMList {
	cm_addresses?: number[];
	cm_ports?: number[];
	cm_websocket_addresses?: string[];
	percent_default_to_websocket?: number;
}

export interface CMsgClientP2PConnectionInfo {
	steam_id_dest?: string;
	steam_id_src?: string;
	app_id?: number;
	candidate?: Buffer;
	legacy_connection_id_src?: string;
	rendezvous?: Buffer;
}

export interface CMsgClientP2PConnectionFailInfo {
	steam_id_dest?: string;
	steam_id_src?: string;
	app_id?: number;
	ep2p_session_error?: number;
	connection_id_dest?: string;
	close_reason?: number;
	close_message?: string;
}

export interface CMsgClientNetworkingCertRequest {
	key_data?: Buffer;
	app_id?: number;
}

export interface CMsgClientNetworkingCertReply {
	cert?: Buffer;
	ca_key_id?: string;
	ca_signature?: Buffer;
}

export interface CMsgClientNetworkingMobileCertRequest {
	app_id?: number;
}

export interface CMsgClientNetworkingMobileCertReply {
	encoded_cert?: string;
}

export interface CMsgClientGetAppOwnershipTicket {
	app_id?: number;
}

export interface CMsgClientGetAppOwnershipTicketResponse {
	eresult?: EResult;
	app_id?: number;
	ticket?: Buffer;
}

export interface CMsgClientSessionToken {
	token?: string;
}

export interface CMsgClientGameConnectTokens {
	max_tokens_to_keep?: number;
	tokens?: Buffer[];
}

export interface CMsgClientGamesPlayed {
	games_played?: CMsgClientGamesPlayed_GamePlayed[];
	client_os_type?: number;
	cloud_gaming_platform?: number;
	recent_reauthentication?: boolean;
}

export interface CMsgClientGamesPlayed_ProcessInfo {
	process_id?: number;
	process_id_parent?: number;
	parent_is_steam?: boolean;
}

export interface CMsgClientGamesPlayed_GamePlayed {
	steam_id_gs?: string;
	game_id?: string;
	deprecated_game_ip_address?: number;
	game_port?: number;
	is_secure?: boolean;
	token?: Buffer;
	game_extra_info?: string;
	game_data_blob?: Buffer;
	process_id?: number;
	streaming_provider_id?: number;
	game_flags?: number;
	owner_id?: number;
	vr_hmd_vendor?: string;
	vr_hmd_model?: string;
	launch_option_type?: number;
	primary_controller_type?: number;
	primary_steam_controller_serial?: string;
	total_steam_controller_count?: number;
	total_non_steam_controller_count?: number;
	controller_workshop_file_id?: string;
	launch_source?: number;
	vr_hmd_runtime?: number;
	game_ip_address?: CMsgIPAddress;
	controller_connection_type?: number;
	game_os_platform?: number;
	game_build_id?: number;
	compat_tool_id?: number;
	compat_tool_cmd?: string;
	compat_tool_build_id?: number;
	beta_name?: string;
	dlc_context?: number;
	process_id_list?: CMsgClientGamesPlayed_ProcessInfo[];
}

export interface CMsgGSApprove {
	steam_id?: string;
	owner_steam_id?: string;
}

export interface CMsgGSDeny {
	steam_id?: string;
	edeny_reason?: number;
	deny_string?: string;
}

export interface CMsgGSKick {
	steam_id?: string;
	edeny_reason?: number;
}

export interface CMsgClientAuthList {
	tokens_left?: number;
	last_request_seq?: number;
	last_request_seq_from_server?: number;
	tickets?: CMsgAuthTicket[];
	app_ids?: number[];
	message_sequence?: number;
}

export interface CMsgClientAuthListAck {
	ticket_crc?: number[];
	app_ids?: number[];
	message_sequence?: number;
}

export interface CMsgClientLicenseList {
	eresult?: EResult;
	licenses?: CMsgClientLicenseList_License[];
}

export interface CMsgClientLicenseList_License {
	package_id?: number;
	time_created?: number;
	time_next_process?: number;
	minute_limit?: number;
	minutes_used?: number;
	payment_method?: number;
	flags?: number;
	purchase_country_code?: string;
	license_type?: number;
	territory_code?: number;
	change_number?: number;
	owner_id?: number;
	initial_period?: number;
	initial_time_unit?: number;
	renewal_period?: number;
	renewal_time_unit?: number;
	access_token?: string;
	master_package_id?: number;
}

export interface CMsgClientIsLimitedAccount {
	bis_limited_account?: boolean;
	bis_community_banned?: boolean;
	bis_locked_account?: boolean;
	bis_limited_account_allowed_to_invite_friends?: boolean;
}

export interface CMsgClientRequestedClientStats {
	stats_to_send?: CMsgClientRequestedClientStats_StatsToSend[];
}

export interface CMsgClientRequestedClientStats_StatsToSend {
	client_stat?: number;
	stat_aggregate_method?: number;
}

export interface CMsgClientStat2 {
	stat_detail?: CMsgClientStat2_StatDetail[];
}

export interface CMsgClientStat2_StatDetail {
	client_stat?: number;
	ll_value?: string;
	time_of_day?: number;
	cell_id?: number;
	depot_id?: number;
	app_id?: number;
}

export interface CMsgClientInviteToGame {
	steam_id_dest?: string;
	steam_id_src?: string;
	connect_string?: string;
	remote_play?: string;
}

export interface CMsgClientChatInvite {
	steam_id_invited?: string;
	steam_id_chat?: string;
	steam_id_patron?: string;
	chatroom_type?: number;
	steam_id_friend_chat?: string;
	chat_name?: string;
	game_id?: string;
}

export interface CMsgClientConnectionStats {
	stats_logon?: CMsgClientConnectionStats_Stats_Logon;
	stats_vconn?: CMsgClientConnectionStats_Stats_VConn;
}

export interface CMsgClientConnectionStats_Stats_Logon {
	connect_attempts?: number;
	connect_successes?: number;
	connect_failures?: number;
	connections_dropped?: number;
	seconds_running?: number;
	msec_tologonthistime?: number;
	count_bad_cms?: number;
	no_udp_connectivity?: boolean;
	no_tcp_connectivity?: boolean;
	no_websocket_443_connectivity?: boolean;
	no_websocket_non_443_connectivity?: boolean;
}

export interface CMsgClientConnectionStats_Stats_UDP {
	pkts_sent?: string;
	bytes_sent?: string;
	pkts_recv?: string;
	pkts_processed?: string;
	bytes_recv?: string;
}

export interface CMsgClientConnectionStats_Stats_VConn {
	connections_udp?: number;
	connections_tcp?: number;
	stats_udp?: CMsgClientConnectionStats_Stats_UDP;
	pkts_abandoned?: string;
	conn_req_received?: string;
	pkts_resent?: string;
	msgs_sent?: string;
	msgs_sent_failed?: string;
	msgs_recv?: string;
	datagrams_sent?: string;
	datagrams_recv?: string;
	bad_pkts_recv?: string;
	unknown_conn_pkts_recv?: string;
	missed_pkts_recv?: string;
	dup_pkts_recv?: string;
	failed_connect_challenges?: string;
	micro_sec_avg_latency?: number;
	micro_sec_min_latency?: number;
	micro_sec_max_latency?: number;
	mem_pool_msg_in_use?: number;
}

export interface CMsgClientServersAvailable {
	server_types_available?: CMsgClientServersAvailable_Server_Types_Available[];
	server_type_for_auth_services?: number;
}

export interface CMsgClientServersAvailable_Server_Types_Available {
	server?: number;
	changed?: boolean;
}

export interface CMsgClientReportOverlayDetourFailure {
	failure_strings?: string[];
}

export interface CMsgClientRequestEncryptedAppTicket {
	app_id?: number;
	userdata?: Buffer;
}

export interface CMsgClientRequestEncryptedAppTicketResponse {
	app_id?: number;
	eresult?: EResult;
	encrypted_app_ticket?: EncryptedAppTicket;
}

export interface CMsgClientWalletInfoUpdate {
	has_wallet?: boolean;
	balance?: number;
	currency?: number;
	balance_delayed?: number;
	balance64?: string;
	balance64_delayed?: string;
	realm?: number;
}

export interface CMsgClientAMGetClanOfficers {
	steamid_clan?: string;
}

export interface CMsgClientAMGetClanOfficersResponse {
	eresult?: EResult;
	steamid_clan?: string;
	officer_count?: number;
}

export interface CMsgClientAMGetPersonaNameHistory {
	id_count?: number;
	Ids?: CMsgClientAMGetPersonaNameHistory_IdInstance[];
}

export interface CMsgClientAMGetPersonaNameHistory_IdInstance {
	steamid?: string;
}

export interface CMsgClientAMGetPersonaNameHistoryResponse {
	responses?: CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance[];
}

export interface CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance {
	eresult?: EResult;
	steamid?: string;
	names?: CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance[];
}

export interface CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance {
	name_since?: number;
	name?: string;
}

export interface CMsgClientDeregisterWithServer {
	eservertype?: number;
	app_id?: number;
}

export interface CMsgClientClanState {
	steamid_clan?: string;
	clan_account_flags?: number;
	name_info?: CMsgClientClanState_NameInfo;
	user_counts?: CMsgClientClanState_UserCounts;
	events?: CMsgClientClanState_Event[];
	announcements?: CMsgClientClanState_Event[];
	chat_room_private?: boolean;
}

export interface CMsgClientClanState_NameInfo {
	clan_name?: string;
	sha_avatar?: Buffer;
}

export interface CMsgClientClanState_UserCounts {
	members?: number;
	online?: number;
	chatting?: number;
	in_game?: number;
	chat_room_members?: number;
}

export interface CMsgClientClanState_Event {
	gid?: string;
	event_time?: number;
	headline?: string;
	game_id?: string;
	just_posted?: boolean;
}

///////////////////////////////////////////////
// steammessages_clientserver_2.proto
///////////////////////////////////////////////

export interface CMsgClientUpdateUserGameInfo {
	steamid_idgs?: string;
	gameid?: string;
	game_ip?: number;
	game_port?: number;
	token?: Buffer;
}

export interface CMsgClientRichPresenceUpload {
	rich_presence_kv?: Buffer;
	steamid_broadcast?: string[];
}

export interface CMsgClientRichPresenceRequest {
	steamid_request?: string[];
}

export interface CMsgClientRichPresenceInfo {
	rich_presence?: CMsgClientRichPresenceInfo_RichPresence[];
}

export interface CMsgClientRichPresenceInfo_RichPresence {
	steamid_user?: string;
	rich_presence_kv?: Buffer;
}

export interface CMsgClientCheckFileSignature {
	app_id?: number;
}

export interface CMsgClientCheckFileSignatureResponse {
	app_id?: number;
	pid?: number;
	eresult?: EResult;
	filename?: string;
	esignatureresult?: number;
	sha_file?: Buffer;
	signatureheader?: Buffer;
	filesize?: number;
	getlasterror?: number;
	evalvesignaturecheckdetail?: number;
}

export interface CMsgClientReadMachineAuth {
	filename?: string;
	offset?: number;
	cubtoread?: number;
}

export interface CMsgClientReadMachineAuthResponse {
	filename?: string;
	eresult?: EResult;
	filesize?: number;
	sha_file?: Buffer;
	getlasterror?: number;
	offset?: number;
	cubread?: number;
	bytes_read?: Buffer;
	filename_sentry?: string;
}

export interface CMsgClientUpdateMachineAuth {
	filename?: string;
	offset?: number;
	cubtowrite?: number;
	bytes?: Buffer;
	otp_type?: number;
	otp_identifier?: string;
	otp_sharedsecret?: Buffer;
	otp_timedrift?: number;
}

export interface CMsgClientUpdateMachineAuthResponse {
	filename?: string;
	eresult?: EResult;
	filesize?: number;
	sha_file?: Buffer;
	getlasterror?: number;
	offset?: number;
	cubwrote?: number;
	otp_type?: number;
	otp_value?: number;
	otp_identifier?: string;
}

export interface CMsgClientRequestMachineAuth {
	filename?: string;
	eresult_sentryfile?: number;
	filesize?: number;
	sha_sentryfile?: Buffer;
	lock_account_action?: number;
	otp_type?: number;
	otp_identifier?: string;
	otp_sharedsecret?: Buffer;
	otp_value?: number;
	machine_name?: string;
	machine_name_userchosen?: string;
}

export interface CMsgClientRequestMachineAuthResponse {
	eresult?: EResult;
}

export interface CMsgClientRegisterKey {
	key?: string;
}

export interface CMsgClientPurchaseResponse {
	eresult?: EResult;
	purchase_result_details?: number;
	purchase_receipt_info?: Buffer;
}

export interface CMsgClientActivateOEMLicense {
	bios_manufacturer?: string;
	bios_serialnumber?: string;
	license_file?: Buffer;
	mainboard_manufacturer?: string;
	mainboard_product?: string;
	mainboard_serialnumber?: string;
}

export interface CMsgClientRegisterOEMMachine {
	oem_register_file?: Buffer;
}

export interface CMsgClientRegisterOEMMachineResponse {
	eresult?: EResult;
}

export interface CMsgClientPurchaseWithMachineID {
	package_id?: number;
	machine_info?: Buffer;
}

export interface CMsgTrading_InitiateTradeRequest {
	trade_request_id?: number;
	other_steamid?: string;
	other_name?: string;
}

export interface CMsgTrading_InitiateTradeResponse {
	response?: number;
	trade_request_id?: number;
	other_steamid?: string;
	steamguard_required_days?: number;
	new_device_cooldown_days?: number;
	default_password_reset_probation_days?: number;
	password_reset_probation_days?: number;
	default_email_change_probation_days?: number;
	email_change_probation_days?: number;
}

export interface CMsgTrading_CancelTradeRequest {
	other_steamid?: string;
}

export interface CMsgTrading_StartSession {
	other_steamid?: string;
}

export interface CMsgClientGetCDNAuthToken {
	depot_id?: number;
	host_name?: string;
	app_id?: number;
}

export interface CMsgClientGetDepotDecryptionKey {
	depot_id?: number;
	app_id?: number;
}

export interface CMsgClientGetDepotDecryptionKeyResponse {
	eresult?: EResult;
	depot_id?: number;
	depot_encryption_key?: Buffer;
}

export interface CMsgClientCheckAppBetaPassword {
	app_id?: number;
	betapassword?: string;
	language?: number;
}

export interface CMsgClientCheckAppBetaPasswordResponse {
	eresult?: EResult;
	betapasswords?: CMsgClientCheckAppBetaPasswordResponse_BetaPassword[];
}

export interface CMsgClientCheckAppBetaPasswordResponse_BetaPassword {
	betaname?: string;
	betapassword?: string;
	betadescription?: string;
}

export interface CMsgClientGetCDNAuthTokenResponse {
	eresult?: EResult;
	token?: string;
	expiration_time?: number;
}

export interface CMsgDownloadRateStatistics {
	cell_id?: number;
	stats?: CMsgDownloadRateStatistics_StatsInfo[];
	throttling_kbps?: number;
	steam_realm?: number;
}

export interface CMsgDownloadRateStatistics_StatsInfo {
	source_type?: number;
	source_id?: number;
	seconds?: number;
	bytes?: string;
	host_name?: string;
	microseconds?: string;
	used_ipv6?: boolean;
	proxied?: boolean;
}

export interface CMsgClientRequestAccountData {
	account_or_email?: string;
	action?: number;
}

export interface CMsgClientRequestAccountDataResponse {
	action?: number;
	eresult?: EResult;
	account_name?: string;
	ct_matches?: number;
	account_name_suggestion1?: string;
	account_name_suggestion2?: string;
	account_name_suggestion3?: string;
}

export interface CMsgClientUGSGetGlobalStats {
	gameid?: string;
	history_days_requested?: number;
	time_last_requested?: number;
	first_day_cached?: number;
	days_cached?: number;
}

export interface CMsgClientUGSGetGlobalStatsResponse {
	eresult?: EResult;
	timestamp?: number;
	day_current?: number;
	days?: CMsgClientUGSGetGlobalStatsResponse_Day[];
}

export interface CMsgClientUGSGetGlobalStatsResponse_Day {
	day_id?: number;
	stats?: CMsgClientUGSGetGlobalStatsResponse_Day_Stat[];
}

export interface CMsgClientUGSGetGlobalStatsResponse_Day_Stat {
	stat_id?: number;
	data?: string;
}

export interface CMsgClientRedeemGuestPass {
	guest_pass_id?: string;
}

export interface CMsgClientRedeemGuestPassResponse {
	eresult?: EResult;
	package_id?: number;
	must_own_appid?: number;
}

export interface CMsgClientGetClanActivityCounts {
	steamid_clans?: string[];
}

export interface CMsgClientGetClanActivityCountsResponse {
	eresult?: EResult;
}

export interface CMsgClientOGSReportString {
	accumulated?: boolean;
	sessionid?: string;
	severity?: number;
	formatter?: string;
	varargs?: Buffer;
}

export interface CMsgClientOGSReportBug {
	sessionid?: string;
	bugtext?: string;
	screenshot?: Buffer;
}

export interface CMsgClientSentLogs {
}

export interface CMsgGCClient {
	appid?: number;
	msgtype?: number;
	payload?: Buffer;
	steamid?: string;
	gcname?: string;
	ip?: number;
}

export interface CMsgClientRequestFreeLicense {
	appids?: number[];
}

export interface CMsgClientRequestFreeLicenseResponse {
	eresult?: EResult;
	granted_packageids?: number[];
	granted_appids?: number[];
}

export interface CMsgDRMDownloadRequestWithCrashData {
	download_flags?: number;
	download_types_known?: number;
	guid_drm?: Buffer;
	guid_split?: Buffer;
	guid_merge?: Buffer;
	module_name?: string;
	module_path?: string;
	crash_data?: Buffer;
}

export interface CMsgDRMDownloadResponse {
	eresult?: EResult;
	app_id?: number;
	blob_download_type?: number;
	merge_guid?: Buffer;
	download_file_dfs_ip?: number;
	download_file_dfs_port?: number;
	download_file_url?: string;
	module_path?: string;
}

export interface CMsgDRMFinalResult {
	eResult?: EResult;
	app_id?: number;
	blob_download_type?: number;
	error_detail?: number;
	merge_guid?: Buffer;
	download_file_dfs_ip?: number;
	download_file_dfs_port?: number;
	download_file_url?: string;
}

export interface CMsgClientDPCheckSpecialSurvey {
	survey_id?: number;
}

export interface CMsgClientDPCheckSpecialSurveyResponse {
	eResult?: EResult;
	state?: number;
	name?: string;
	custom_url?: string;
	include_software?: boolean;
	token?: Buffer;
}

export interface CMsgClientDPSendSpecialSurveyResponse {
	survey_id?: number;
	data?: Buffer;
}

export interface CMsgClientDPSendSpecialSurveyResponseReply {
	eResult?: EResult;
	token?: Buffer;
}

export interface CMsgClientRequestForgottenPasswordEmail {
	account_name?: string;
	password_tried?: string;
}

export interface CMsgClientRequestForgottenPasswordEmailResponse {
	eResult?: EResult;
	use_secret_question?: boolean;
}

export interface CMsgClientItemAnnouncements {
	count_new_items?: number;
	unseen_items?: CMsgClientItemAnnouncements_UnseenItem[];
}

export interface CMsgClientItemAnnouncements_UnseenItem {
	appid?: number;
	context_id?: string;
	asset_id?: string;
	amount?: string;
	rtime32_gained?: number;
	source_appid?: number;
}

export interface CMsgClientRequestItemAnnouncements {
}

export interface CMsgClientUserNotifications {
	notifications?: CMsgClientUserNotifications_Notification[];
}

export interface CMsgClientUserNotifications_Notification {
	user_notification_type?: number;
	count?: number;
}

export interface CMsgClientCommentNotifications {
	count_new_comments?: number;
	count_new_comments_owner?: number;
	count_new_comments_subscriptions?: number;
}

export interface CMsgClientRequestCommentNotifications {
}

export interface CMsgClientOfflineMessageNotification {
	offline_messages?: number;
	friends_with_offline_messages?: number[];
}

export interface CMsgClientRequestOfflineMessageCount {
}

export interface CMsgClientChatGetFriendMessageHistory {
	steamid?: string;
}

export interface CMsgClientChatGetFriendMessageHistoryResponse {
	steamid?: string;
	success?: number;
	messages?: CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage[];
}

export interface CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage {
	accountid?: number;
	timestamp?: number;
	message?: string;
	unread?: boolean;
}

export interface CMsgClientChatGetFriendMessageHistoryForOfflineMessages {
}

export interface CMsgClientFSGetFriendsSteamLevels {
	accountids?: number[];
}

export interface CMsgClientFSGetFriendsSteamLevelsResponse {
	friends?: CMsgClientFSGetFriendsSteamLevelsResponse_Friend[];
}

export interface CMsgClientFSGetFriendsSteamLevelsResponse_Friend {
	accountid?: number;
	level?: number;
}

export interface CMsgClientEmailAddrInfo {
	email_address?: string;
	email_is_validated?: boolean;
	email_validation_changed?: boolean;
	credential_change_requires_code?: boolean;
	password_or_secretqa_change_requires_code?: boolean;
}

export interface CMsgCREItemVoteSummary {
	published_file_ids?: CMsgCREItemVoteSummary_PublishedFileId[];
}

export interface CMsgCREItemVoteSummary_PublishedFileId {
	published_file_id?: string;
}

export interface CMsgCREItemVoteSummaryResponse {
	eresult?: EResult;
	item_vote_summaries?: CMsgCREItemVoteSummaryResponse_ItemVoteSummary[];
}

export interface CMsgCREItemVoteSummaryResponse_ItemVoteSummary {
	published_file_id?: string;
	votes_for?: number;
	votes_against?: number;
	reports?: number;
	score?: number;
}

export interface CMsgCREUpdateUserPublishedItemVote {
	published_file_id?: string;
	vote_up?: boolean;
}

export interface CMsgCREUpdateUserPublishedItemVoteResponse {
	eresult?: EResult;
}

export interface CMsgCREGetUserPublishedItemVoteDetails {
	published_file_ids?: CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId[];
}

export interface CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId {
	published_file_id?: string;
}

export interface CMsgCREGetUserPublishedItemVoteDetailsResponse {
	eresult?: EResult;
	user_item_vote_details?: CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail[];
}

export interface CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail {
	published_file_id?: string;
	vote?: number;
}

export interface CMsgFSGetFollowerCount {
	steam_id?: string;
}

export interface CMsgFSGetFollowerCountResponse {
	eresult?: EResult;
	count?: number;
}

export interface CMsgFSGetIsFollowing {
	steam_id?: string;
}

export interface CMsgFSGetIsFollowingResponse {
	eresult?: EResult;
	is_following?: boolean;
}

export interface CMsgFSEnumerateFollowingList {
	start_index?: number;
}

export interface CMsgFSEnumerateFollowingListResponse {
	eresult?: EResult;
	total_results?: number;
	steam_ids?: string[];
}

export interface CMsgDPGetNumberOfCurrentPlayers {
	appid?: number;
}

export interface CMsgDPGetNumberOfCurrentPlayersResponse {
	eresult?: EResult;
	player_count?: number;
}

export interface CMsgClientFriendUserStatusPublished {
	friend_steamid?: string;
	appid?: number;
	status_text?: string;
}

export interface CMsgClientServiceMethodLegacy {
	method_name?: string;
	serialized_method?: Buffer;
	is_notification?: boolean;
}

export interface CMsgClientServiceMethodLegacyResponse {
	method_name?: string;
	serialized_method_response?: Buffer;
}

export interface CMsgClientUIMode {
	uimode?: number;
	chat_mode?: number;
}

export interface CMsgClientVanityURLChangedNotification {
	vanity_url?: string;
}

export interface CMsgClientAuthorizeLocalDeviceRequest {
	device_description?: string;
	owner_account_id?: number;
	local_device_token?: string;
}

export interface CMsgClientAuthorizeLocalDevice {
	eresult?: EResult;
	owner_account_id?: number;
	authed_device_token?: string;
}

export interface CMsgClientAuthorizeLocalDeviceNotification {
	eresult?: EResult;
	owner_account_id?: number;
	local_device_token?: string;
}

export interface CMsgClientDeauthorizeDeviceRequest {
	deauthorization_account_id?: number;
	deauthorization_device_token?: string;
}

export interface CMsgClientDeauthorizeDevice {
	eresult?: EResult;
	deauthorization_account_id?: number;
}

export interface CMsgClientUseLocalDeviceAuthorizations {
	authorization_account_id?: number[];
	device_tokens?: CMsgClientUseLocalDeviceAuthorizations_DeviceToken[];
}

export interface CMsgClientUseLocalDeviceAuthorizations_DeviceToken {
	owner_account_id?: number;
	token_id?: string;
}

export interface CMsgClientGetAuthorizedDevices {
}

export interface CMsgClientGetAuthorizedDevicesResponse {
	eresult?: EResult;
	authorized_device?: CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice[];
}

export interface CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice {
	auth_device_token?: string;
	device_name?: string;
	last_access_time?: number;
	borrower_id?: number;
	is_pending?: boolean;
	app_played?: number;
}

export interface CMsgClientSharedLibraryLockStatus {
	locked_library?: CMsgClientSharedLibraryLockStatus_LockedLibrary[];
	own_library_locked_by?: number;
}

export interface CMsgClientSharedLibraryLockStatus_LockedLibrary {
	owner_id?: number;
	locked_by?: number;
}

export interface CMsgClientSharedLibraryStopPlaying {
	seconds_left?: number;
	stop_apps?: CMsgClientSharedLibraryStopPlaying_StopApp[];
}

export interface CMsgClientSharedLibraryStopPlaying_StopApp {
	app_id?: number;
	owner_id?: number;
}

export interface CMsgClientServiceCall {
	sysid_routing?: Buffer;
	call_handle?: number;
	module_crc?: number;
	module_hash?: Buffer;
	function_id?: number;
	cub_output_max?: number;
	flags?: number;
	callparameter?: Buffer;
	ping_only?: boolean;
	max_outstanding_calls?: number;
	app_id?: number;
}

export interface CMsgClientServiceModule {
	module_crc?: number;
	module_hash?: Buffer;
	module_content?: Buffer;
}

export interface CMsgClientServiceCallResponse {
	sysid_routing?: Buffer;
	call_handle?: number;
	module_crc?: number;
	module_hash?: Buffer;
	ecallresult?: number;
	result_content?: Buffer;
	os_version_info?: Buffer;
	system_info?: Buffer;
	load_address?: string;
	exception_record?: Buffer;
	portable_os_version_info?: Buffer;
	portable_system_info?: Buffer;
	was_converted?: boolean;
	internal_result?: number;
	current_count?: number;
	last_call_handle?: number;
	last_call_module_crc?: number;
	last_call_sysid_routing?: Buffer;
	last_ecallresult?: number;
	last_callissue_delta?: number;
	last_callcomplete_delta?: number;
}

export interface CMsgAMUnlockH264 {
	appid?: number;
	platform?: number;
	reason?: number;
}

export interface CMsgAMUnlockH264Response {
	eresult?: EResult;
	encryption_key?: Buffer;
}

export interface CMsgClientPlayingSessionState {
	playing_blocked?: boolean;
	playing_app?: number;
}

export interface CMsgClientKickPlayingSession {
	only_stop_game?: boolean;
}

export interface CMsgClientVoiceCallPreAuthorize {
	caller_steamid?: string;
	receiver_steamid?: string;
	caller_id?: number;
	hangup?: boolean;
}

export interface CMsgClientVoiceCallPreAuthorizeResponse {
	caller_steamid?: string;
	receiver_steamid?: string;
	eresult?: EResult;
	caller_id?: number;
}

export interface CMsgBadgeCraftedNotification {
	appid?: number;
	badge_level?: number;
}

export interface CMsgClientStartPeerContentServer {
	steamid?: string;
	client_remote_id?: string;
	app_id?: number;
	current_build_id?: number;
}

export interface CMsgClientStartPeerContentServerResponse {
	result?: EResult;
	server_port?: number;
}

export interface CMsgClientGetPeerContentInfo {
	steamid?: string;
	client_remote_id?: string;
}

export interface CMsgClientGetPeerContentInfoResponse {
	result?: EResult;
	apps?: number[];
}

///////////////////////////////////////////////
// steammessages_clientserver_appinfo.proto
///////////////////////////////////////////////

export interface CMsgClientAppInfoUpdate {
	last_changenumber?: number;
	send_changelist?: boolean;
}

export interface CMsgClientAppInfoChanges {
	current_change_number?: number;
	force_full_update?: boolean;
	appIDs?: number[];
}

export interface CMsgClientAppInfoRequest {
	apps?: CMsgClientAppInfoRequest_App[];
	supports_batches?: boolean;
}

export interface CMsgClientAppInfoRequest_App {
	app_id?: number;
	section_flags?: number;
	section_CRC?: number[];
}

export interface CMsgClientPICSChangesSinceRequest {
	since_change_number?: number;
	send_app_info_changes?: boolean;
	send_package_info_changes?: boolean;
	num_app_info_cached?: number;
	num_package_info_cached?: number;
}

export interface CMsgClientPICSChangesSinceResponse {
	current_change_number?: number;
	since_change_number?: number;
	force_full_update?: boolean;
	package_changes?: CMsgClientPICSChangesSinceResponse_PackageChange[];
	app_changes?: CMsgClientPICSChangesSinceResponse_AppChange[];
	force_full_app_update?: boolean;
	force_full_package_update?: boolean;
}

export interface CMsgClientPICSChangesSinceResponse_PackageChange {
	packageid?: number;
	change_number?: number;
	needs_token?: boolean;
}

export interface CMsgClientPICSChangesSinceResponse_AppChange {
	appid?: number;
	change_number?: number;
	needs_token?: boolean;
}

export interface CMsgClientPICSProductInfoRequest {
	packages?: CMsgClientPICSProductInfoRequest_PackageInfo[];
	apps?: CMsgClientPICSProductInfoRequest_AppInfo[];
	meta_data_only?: boolean;
	num_prev_failed?: number;
	OBSOLETE_supports_package_tokens?: number;
	sequence_number?: number;
}

export interface CMsgClientPICSProductInfoRequest_AppInfo {
	appid?: number;
	access_token?: string;
	only_public_obsolete?: boolean;
}

export interface CMsgClientPICSProductInfoRequest_PackageInfo {
	packageid?: number;
	access_token?: string;
}

export interface CMsgClientPICSProductInfoResponse {
	apps?: CMsgClientPICSProductInfoResponse_AppInfo[];
	unknown_appids?: number[];
	packages?: CMsgClientPICSProductInfoResponse_PackageInfo[];
	unknown_packageids?: number[];
	meta_data_only?: boolean;
	response_pending?: boolean;
	http_min_size?: number;
	http_host?: string;
}

export interface CMsgClientPICSProductInfoResponse_AppInfo {
	appid?: number;
	change_number?: number;
	missing_token?: boolean;
	sha?: Buffer;
	buffer?: Buffer;
	only_public?: boolean;
	size?: number;
}

export interface CMsgClientPICSProductInfoResponse_PackageInfo {
	packageid?: number;
	change_number?: number;
	missing_token?: boolean;
	sha?: Buffer;
	buffer?: Buffer;
	size?: number;
}

export interface CMsgClientPICSAccessTokenRequest {
	packageids?: number[];
	appids?: number[];
}

export interface CMsgClientPICSAccessTokenResponse {
	package_access_tokens?: CMsgClientPICSAccessTokenResponse_PackageToken[];
	package_denied_tokens?: number[];
	app_access_tokens?: CMsgClientPICSAccessTokenResponse_AppToken[];
	app_denied_tokens?: number[];
}

export interface CMsgClientPICSAccessTokenResponse_PackageToken {
	packageid?: number;
	access_token?: string;
}

export interface CMsgClientPICSAccessTokenResponse_AppToken {
	appid?: number;
	access_token?: string;
}

///////////////////////////////////////////////
// steammessages_clientserver_friends.proto
///////////////////////////////////////////////

///////////////////////////////////////////////
// steammessages_clientserver_gameservers.proto
///////////////////////////////////////////////

export interface CMsgGSServerType {
	app_id_served?: number;
	flags?: number;
	deprecated_game_ip_address?: number;
	game_port?: number;
	game_dir?: string;
	game_version?: string;
	game_query_port?: number;
	game_port_local?: number;
	sdr_logon?: Buffer;
	fake_ip?: number;
}

export interface CMsgGSStatusReply {
	is_secure?: boolean;
}

export interface CMsgGSPlayerList {
	players?: CMsgGSPlayerList_Player[];
}

export interface CMsgGSPlayerList_Player {
	steam_id?: string;
	deprecated_public_ip?: number;
	token?: Buffer;
	public_ip?: CMsgIPAddress;
}

export interface CMsgGSUserPlaying {
	steam_id?: string;
	deprecated_public_ip?: number;
	token?: Buffer;
	public_ip?: CMsgIPAddress;
}

export interface CMsgGSDisconnectNotice {
	steam_id?: string;
}

export interface CMsgGameServerData {
	revision?: number;
	query_port?: number;
	game_port?: number;
	spectator_port?: number;
	server_name?: string;
	game_description?: string;
	spectator_server_name?: string;
	fake_ip?: number;
	sdr_ping_location?: string;
	app_id?: number;
	gamedir?: string;
	version?: string;
	product?: string;
	region?: string;
	players?: CMsgGameServerData_Player[];
	max_players?: number;
	bot_count?: number;
	password?: boolean;
	secure?: boolean;
	dedicated?: boolean;
	os?: string;
	game_data?: string;
	game_type?: string;
	map?: string;
}

export interface CMsgGameServerData_Player {
	steam_id?: string;
}

export interface CMsgGameServerRemove {
	legacy_steam_id_gs?: string;
	legacy_query_port?: number;
}

export interface CMsgClientGMSServerQuery {
	app_id?: number;
	geo_location_ip?: number;
	region_code?: number;
	filter_text?: string;
	max_servers?: number;
}

export interface CMsgGMSClientServerQueryResponse {
	servers?: CMsgGMSClientServerQueryResponse_Server[];
	error?: string;
	default_server_data?: CMsgGMSClientServerQueryResponse_Server;
	server_strings?: string[];
}

export interface CMsgGMSClientServerQueryResponse_Server {
	deprecated_server_ip?: number;
	query_port?: number;
	auth_players?: number;
	server_ip?: CMsgIPAddress;
	steam_id?: string;
	revision?: number;
	players?: number;
	game_port?: number;
	sdr_popid?: number;
	sdr_ping_location?: string;
	flags?: number;
	app_id?: number;
	max_players?: number;
	bots?: number;
	spectator_port?: number;
	gamedir_str?: string;
	gamedir_strindex?: number;
	map_str?: string;
	map_strindex?: number;
	name_str?: string;
	name_strindex?: number;
	game_description_str?: string;
	game_description_strindex?: number;
	version_str?: string;
	version_strindex?: number;
	gametype_str?: string;
	gametype_strindex?: number;
	spectator_name_str?: string;
	spectator_name_strindex?: number;
}

export enum CMsgGMSClientServerQueryResponse_EFlags {
	k_EFlag_HasPassword = 1,
	k_EFlag_Secure = 2,
}

export interface CMsgGameServerOutOfDate {
	steam_id_gs?: string;
	reject?: boolean;
	message?: string;
}

export interface CMsgGSAssociateWithClan {
	steam_id_clan?: string;
}

export interface CMsgGSAssociateWithClanResponse {
	steam_id_clan?: string;
	eresult?: EResult;
}

export interface CMsgGSComputeNewPlayerCompatibility {
	steam_id_candidate?: string;
}

export interface CMsgGSComputeNewPlayerCompatibilityResponse {
	steam_id_candidate?: string;
	eresult?: EResult;
	is_clan_member?: boolean;
	ct_dont_like_you?: number;
	ct_you_dont_like?: number;
	ct_clanmembers_dont_like_you?: number;
}

///////////////////////////////////////////////
// steammessages_clientserver_lbs.proto
///////////////////////////////////////////////

export interface CMsgClientLBSSetScore {
	app_id?: number;
	leaderboard_id?: number;
	score?: number;
	details?: Buffer;
	upload_score_method?: number;
}

export interface CMsgClientLBSSetScoreResponse {
	eresult?: EResult;
	leaderboard_entry_count?: number;
	score_changed?: boolean;
	global_rank_previous?: number;
	global_rank_new?: number;
}

export interface CMsgClientLBSSetUGC {
	app_id?: number;
	leaderboard_id?: number;
	ugc_id?: string;
}

export interface CMsgClientLBSSetUGCResponse {
	eresult?: EResult;
}

export interface CMsgClientLBSFindOrCreateLB {
	app_id?: number;
	leaderboard_sort_method?: number;
	leaderboard_display_type?: number;
	create_if_not_found?: boolean;
	leaderboard_name?: string;
}

export interface CMsgClientLBSFindOrCreateLBResponse {
	eresult?: EResult;
	leaderboard_id?: number;
	leaderboard_entry_count?: number;
	leaderboard_sort_method?: number;
	leaderboard_display_type?: number;
	leaderboard_name?: string;
}

export interface CMsgClientLBSGetLBEntries {
	app_id?: number;
	leaderboard_id?: number;
	range_start?: number;
	range_end?: number;
	leaderboard_data_request?: number;
	steamids?: string[];
}

export interface CMsgClientLBSGetLBEntriesResponse {
	eresult?: EResult;
	leaderboard_entry_count?: number;
	entries?: CMsgClientLBSGetLBEntriesResponse_Entry[];
}

export interface CMsgClientLBSGetLBEntriesResponse_Entry {
	steam_id_user?: string;
	global_rank?: number;
	score?: number;
	details?: Buffer;
	ugc_id?: string;
}

///////////////////////////////////////////////
// steammessages_clientserver_login.proto
///////////////////////////////////////////////

export interface CMsgClientHeartBeat {
	send_reply?: boolean;
}

export interface CMsgClientServerTimestampRequest {
	client_request_timestamp?: string;
}

export interface CMsgClientServerTimestampResponse {
	client_request_timestamp?: string;
	server_timestamp_ms?: string;
}

export interface CMsgClientSecret {
	version?: number;
	appid?: number;
	deviceid?: number;
	nonce?: string;
	hmac?: Buffer;
}

export interface CMsgClientHello {
	protocol_version?: number;
}

export interface CMsgClientLogon {
	protocol_version?: number;
	deprecated_obfustucated_private_ip?: number;
	cell_id?: number;
	last_session_id?: number;
	client_package_version?: number;
	client_language?: string;
	client_os_type?: number;
	should_remember_password?: boolean;
	wine_version?: string;
	deprecated_10?: number;
	obfuscated_private_ip?: CMsgIPAddress;
	deprecated_public_ip?: number;
	qos_level?: number;
	client_supplied_steam_id?: string;
	public_ip?: CMsgIPAddress;
	machine_id?: Buffer;
	launcher_type?: number;
	ui_mode?: number;
	chat_mode?: number;
	steam2_auth_ticket?: Buffer;
	email_address?: string;
	rtime32_account_creation?: number;
	account_name?: string;
	password?: string;
	game_server_token?: string;
	login_key?: string;
	was_converted_deprecated_msg?: boolean;
	anon_user_target_account_name?: string;
	resolved_user_steam_id?: string;
	eresult_sentryfile?: number;
	sha_sentryfile?: Buffer;
	auth_code?: string;
	otp_type?: number;
	otp_value?: number;
	otp_identifier?: string;
	steam2_ticket_request?: boolean;
	sony_psn_ticket?: Buffer;
	sony_psn_service_id?: string;
	create_new_psn_linked_account_if_needed?: boolean;
	sony_psn_name?: string;
	game_server_app_id?: number;
	steamguard_dont_remember_computer?: boolean;
	machine_name?: string;
	machine_name_userchosen?: string;
	country_override?: string;
	is_steam_box?: boolean;
	client_instance_id?: string;
	two_factor_code?: string;
	supports_rate_limit_response?: boolean;
	web_logon_nonce?: string;
	priority_reason?: number;
	embedded_client_secret?: CMsgClientSecret;
	disable_partner_autogrants?: boolean;
	is_steam_deck?: boolean;
	access_token?: string;
	is_chrome_os?: boolean;
	is_tesla?: boolean;
}

export interface CMsgClientLogonResponse {
	eresult?: EResult;
	legacy_out_of_game_heartbeat_seconds?: number;
	heartbeat_seconds?: number;
	deprecated_public_ip?: number;
	rtime32_server_time?: number;
	account_flags?: number;
	cell_id?: number;
	email_domain?: string;
	steam2_ticket?: Buffer;
	eresult_extended?: number;
	webapi_authenticate_user_nonce?: string;
	cell_id_ping_threshold?: number;
	deprecated_use_pics?: boolean;
	vanity_url?: string;
	public_ip?: CMsgIPAddress;
	client_supplied_steamid?: string;
	ip_country_code?: string;
	parental_settings?: Buffer;
	parental_setting_signature?: Buffer;
	count_loginfailures_to_migrate?: number;
	count_disconnects_to_migrate?: number;
	ogs_data_report_time_window?: number;
	client_instance_id?: string;
	force_client_update_check?: boolean;
	agreement_session_url?: string;
	token_id?: string;
}

export interface CMsgClientRequestWebAPIAuthenticateUserNonce {
	token_type?: number;
}

export interface CMsgClientRequestWebAPIAuthenticateUserNonceResponse {
	eresult?: EResult;
	webapi_authenticate_user_nonce?: string;
	token_type?: number;
}

export interface CMsgClientLogOff {
}

export interface CMsgClientLoggedOff {
	eresult?: EResult;
}

export interface CMsgClientNewLoginKey {
	unique_id?: number;
	login_key?: string;
}

export interface CMsgClientNewLoginKeyAccepted {
	unique_id?: number;
}

export interface CMsgClientAccountInfo {
	persona_name?: string;
	ip_country?: string;
	count_authed_computers?: number;
	account_flags?: number;
	facebook_id?: string;
	facebook_name?: string;
	steamguard_machine_name_user_chosen?: string;
	is_phone_verified?: boolean;
	two_factor_state?: number;
	is_phone_identifying?: boolean;
	is_phone_needing_reverify?: boolean;
}

export interface CMsgClientChallengeRequest {
	steamid?: string;
}

export interface CMsgClientChallengeResponse {
	challenge?: string;
}

///////////////////////////////////////////////
// steammessages_clientserver_mms.proto
///////////////////////////////////////////////

export interface CMsgClientMMSSetRatelimitPolicyOnClient {
	app_id?: number;
	enable_rate_limits?: boolean;
	seconds_per_message?: number;
	milliseconds_per_data_update?: number;
}

export interface CMsgClientMMSCreateLobby {
	app_id?: number;
	max_members?: number;
	lobby_type?: number;
	lobby_flags?: number;
	cell_id?: number;
	deprecated_public_ip?: number;
	metadata?: Buffer;
	persona_name_owner?: string;
	public_ip?: CMsgIPAddress;
}

export interface CMsgClientMMSCreateLobbyResponse {
	app_id?: number;
	steam_id_lobby?: string;
	eresult?: EResult;
}

export interface CMsgClientMMSJoinLobby {
	app_id?: number;
	steam_id_lobby?: string;
	persona_name?: string;
}

export interface CMsgClientMMSJoinLobbyResponse {
	app_id?: number;
	steam_id_lobby?: string;
	chat_room_enter_response?: number;
	max_members?: number;
	lobby_type?: number;
	lobby_flags?: number;
	steam_id_owner?: string;
	metadata?: Buffer;
	members?: CMsgClientMMSJoinLobbyResponse_Member[];
}

export interface CMsgClientMMSJoinLobbyResponse_Member {
	steam_id?: string;
	persona_name?: string;
	metadata?: Buffer;
}

export interface CMsgClientMMSLeaveLobby {
	app_id?: number;
	steam_id_lobby?: string;
}

export interface CMsgClientMMSLeaveLobbyResponse {
	app_id?: number;
	steam_id_lobby?: string;
	eresult?: EResult;
}

export interface CMsgClientMMSGetLobbyList {
	app_id?: number;
	num_lobbies_requested?: number;
	cell_id?: number;
	deprecated_public_ip?: number;
	filters?: CMsgClientMMSGetLobbyList_Filter[];
	public_ip?: CMsgIPAddress;
}

export interface CMsgClientMMSGetLobbyList_Filter {
	key?: string;
	value?: string;
	comparision?: number;
	filter_type?: number;
}

export interface CMsgClientMMSGetLobbyListResponse {
	app_id?: number;
	eresult?: EResult;
	lobbies?: CMsgClientMMSGetLobbyListResponse_Lobby[];
}

export interface CMsgClientMMSGetLobbyListResponse_Lobby {
	steam_id?: string;
	max_members?: number;
	lobby_type?: number;
	lobby_flags?: number;
	metadata?: Buffer;
	num_members?: number;
	distance?: number;
	weight?: string;
}

export interface CMsgClientMMSSetLobbyData {
	app_id?: number;
	steam_id_lobby?: string;
	steam_id_member?: string;
	max_members?: number;
	lobby_type?: number;
	lobby_flags?: number;
	metadata?: Buffer;
}

export interface CMsgClientMMSSetLobbyDataResponse {
	app_id?: number;
	steam_id_lobby?: string;
	eresult?: EResult;
}

export interface CMsgClientMMSGetLobbyData {
	app_id?: number;
	steam_id_lobby?: string;
}

export interface CMsgClientMMSLobbyData {
	app_id?: number;
	steam_id_lobby?: string;
	num_members?: number;
	max_members?: number;
	lobby_type?: number;
	lobby_flags?: number;
	steam_id_owner?: string;
	metadata?: Buffer;
	members?: CMsgClientMMSLobbyData_Member[];
	lobby_cellid?: number;
	owner_should_accept_changes?: boolean;
}

export interface CMsgClientMMSLobbyData_Member {
	steam_id?: string;
	persona_name?: string;
	metadata?: Buffer;
}

export interface CMsgClientMMSSendLobbyChatMsg {
	app_id?: number;
	steam_id_lobby?: string;
	steam_id_target?: string;
	lobby_message?: Buffer;
}

export interface CMsgClientMMSLobbyChatMsg {
	app_id?: number;
	steam_id_lobby?: string;
	steam_id_sender?: string;
	lobby_message?: Buffer;
}

export interface CMsgClientMMSSetLobbyOwner {
	app_id?: number;
	steam_id_lobby?: string;
	steam_id_new_owner?: string;
}

export interface CMsgClientMMSSetLobbyOwnerResponse {
	app_id?: number;
	steam_id_lobby?: string;
	eresult?: EResult;
}

export interface CMsgClientMMSSetLobbyLinked {
	app_id?: number;
	steam_id_lobby?: string;
	steam_id_lobby2?: string;
}

export interface CMsgClientMMSSetLobbyGameServer {
	app_id?: number;
	steam_id_lobby?: string;
	deprecated_game_server_ip?: number;
	game_server_port?: number;
	game_server_steam_id?: string;
	game_server_ip?: CMsgIPAddress;
}

export interface CMsgClientMMSLobbyGameServerSet {
	app_id?: number;
	steam_id_lobby?: string;
	deprecated_game_server_ip?: number;
	game_server_port?: number;
	game_server_steam_id?: string;
	game_server_ip?: CMsgIPAddress;
}

export interface CMsgClientMMSUserJoinedLobby {
	app_id?: number;
	steam_id_lobby?: string;
	steam_id_user?: string;
	persona_name?: string;
}

export interface CMsgClientMMSUserLeftLobby {
	app_id?: number;
	steam_id_lobby?: string;
	steam_id_user?: string;
	persona_name?: string;
}

export interface CMsgClientMMSInviteToLobby {
	app_id?: number;
	steam_id_lobby?: string;
	steam_id_user_invited?: string;
}

export interface CMsgClientMMSGetLobbyStatus {
	app_id?: number;
	steam_id_lobby?: string;
	claim_membership?: boolean;
	claim_ownership?: boolean;
}

export interface CMsgClientMMSGetLobbyStatusResponse {
	app_id?: number;
	steam_id_lobby?: string;
	lobby_status?: EMMSLobbyStatus;
}

///////////////////////////////////////////////
// steammessages_clientserver_ucm.proto
///////////////////////////////////////////////

export interface CMsgClientUCMAddScreenshot {
	appid?: number;
	filename?: string;
	thumbname?: string;
	vr_filename?: string;
	rtime32_created?: number;
	width?: number;
	height?: number;
	permissions?: number;
	caption?: string;
	shortcut_name?: string;
	tag?: CMsgClientUCMAddScreenshot_Tag[];
	tagged_steamid?: string[];
	spoiler_tag?: boolean;
	tagged_publishedfileid?: string[];
}

export interface CMsgClientUCMAddScreenshot_Tag {
	tag_name?: string;
	tag_value?: string;
}

export interface CMsgClientUCMAddScreenshotResponse {
	eresult?: EResult;
	screenshotid?: string;
}

export interface CMsgClientUCMDeleteScreenshot {
	screenshotid?: string;
}

export interface CMsgClientUCMDeleteScreenshotResponse {
	eresult?: EResult;
}

export interface CMsgClientUCMPublishFile {
	app_id?: number;
	file_name?: string;
	preview_file_name?: string;
	consumer_app_id?: number;
	title?: string;
	description?: string;
	tags?: string[];
	workshop_file?: boolean;
	visibility?: number;
	file_type?: number;
	url?: string;
	video_provider?: number;
	video_account_name?: string;
	video_identifier?: string;
	in_progress?: boolean;
}

export interface CMsgClientUCMPublishFileResponse {
	eresult?: EResult;
	published_file_id?: string;
	needs_workshop_legal_agreement_acceptance?: boolean;
}

export interface CMsgClientUCMUpdatePublishedFile {
	app_id?: number;
	published_file_id?: string;
	file_name?: string;
	preview_file_name?: string;
	title?: string;
	description?: string;
	tags?: string[];
	visibility?: number;
	update_file?: boolean;
	update_preview_file?: boolean;
	update_title?: boolean;
	update_description?: boolean;
	update_tags?: boolean;
	update_visibility?: boolean;
	change_description?: string;
	update_url?: boolean;
	url?: string;
	update_content_manifest?: boolean;
	content_manifest?: string;
	metadata?: string;
	update_metadata?: boolean;
	language?: number;
	removed_kvtags?: string[];
	kvtags?: CMsgClientUCMUpdatePublishedFile_KeyValueTag[];
	previews?: CMsgClientUCMUpdatePublishedFile_AdditionalPreview[];
	previews_to_remove?: number[];
	clear_in_progress?: boolean;
	remove_all_kvtags?: boolean;
}

export interface CMsgClientUCMUpdatePublishedFile_KeyValueTag {
	key?: string;
	value?: string;
}

export interface CMsgClientUCMUpdatePublishedFile_AdditionalPreview {
	original_file_name?: string;
	internal_file_name?: string;
	videoid?: string;
	preview_type?: number;
	update_index?: number;
}

export interface CMsgClientUCMUpdatePublishedFileResponse {
	eresult?: EResult;
	needs_workshop_legal_agreement_acceptance?: boolean;
}

export interface CMsgClientUCMDeletePublishedFile {
	published_file_id?: string;
	app_id?: number;
}

export interface CMsgClientUCMDeletePublishedFileResponse {
	eresult?: EResult;
}

export interface CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates {
	app_id?: number;
	start_index?: number;
	start_time?: number;
	desired_revision?: number;
}

export interface CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse {
	eresult?: EResult;
	subscribed_files?: CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId[];
	total_results?: number;
}

export interface CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId {
	published_file_id?: string;
	rtime32_subscribed?: number;
	appid?: number;
	file_hcontent?: string;
	file_size?: number;
	rtime32_last_updated?: number;
	is_depot_content?: boolean;
}

export interface CMsgClientUCMPublishedFileUpdated {
	published_file_id?: string;
	app_id?: number;
	time_updated?: number;
	hcontent?: string;
	file_size?: number;
	is_depot_content?: boolean;
	revision?: number;
}

export interface CMsgClientWorkshopItemChangesRequest {
	app_id?: number;
	last_time_updated?: number;
	num_items_needed?: number;
}

export interface CMsgClientWorkshopItemChangesResponse {
	eresult?: EResult;
	update_time?: number;
	workshop_items?: CMsgClientWorkshopItemChangesResponse_WorkshopItemInfo[];
}

export interface CMsgClientWorkshopItemChangesResponse_WorkshopItemInfo {
	published_file_id?: string;
	time_updated?: number;
	manifest_id?: string;
}

export interface CMsgClientUCMSetUserPublishedFileAction {
	published_file_id?: string;
	app_id?: number;
	action?: number;
}

export interface CMsgClientUCMSetUserPublishedFileActionResponse {
	eresult?: EResult;
}

export interface CMsgClientUCMEnumeratePublishedFilesByUserAction {
	app_id?: number;
	start_index?: number;
	action?: number;
}

export interface CMsgClientUCMEnumeratePublishedFilesByUserActionResponse {
	eresult?: EResult;
	published_files?: CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId[];
	total_results?: number;
}

export interface CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId {
	published_file_id?: string;
	rtime_time_stamp?: number;
}

export interface CMsgClientScreenshotsChanged {
}

///////////////////////////////////////////////
// steammessages_clientserver_uds.proto
///////////////////////////////////////////////

export interface CMsgClientUDSP2PSessionStarted {
	steamid_remote?: string;
	appid?: number;
}

export interface CMsgClientUDSP2PSessionEnded {
	steamid_remote?: string;
	appid?: number;
	session_length_sec?: number;
	session_error?: number;
	nattype?: number;
	bytes_recv?: number;
	bytes_sent?: number;
	bytes_sent_relay?: number;
	bytes_recv_relay?: number;
	time_to_connect_ms?: number;
}

export interface CMsgClientGetClientDetails {
}

export interface CMsgClientGetClientDetailsResponse {
	package_version?: number;
	os?: string;
	machine_name?: string;
	ip_public?: string;
	ip_private?: string;
	games_running?: CMsgClientGetClientDetailsResponse_Game[];
	bytes_available?: string;
	protocol_version?: number;
	clientcomm_version?: number;
}

export interface CMsgClientGetClientDetailsResponse_Game {
	appid?: number;
	extra_info?: string;
	time_running_sec?: number;
}

export interface CMsgClientGetClientAppList {
	media?: boolean;
	tools?: boolean;
	games?: boolean;
	only_installed?: boolean;
	only_changing?: boolean;
	comics?: boolean;
	include_client_info?: boolean;
}

export interface CMsgClientGetClientAppListResponse {
	apps?: CMsgClientGetClientAppListResponse_App[];
	bytes_available?: string;
	client_info?: CMsgClientGetClientDetailsResponse;
}

export interface CMsgClientGetClientAppListResponse_App {
	appid?: number;
	category?: string;
	app_type?: string;
	favorite?: boolean;
	installed?: boolean;
	auto_update?: boolean;
	bytes_downloaded?: string;
	bytes_to_download?: string;
	bytes_download_rate?: number;
	dlcs?: CMsgClientGetClientAppListResponse_App_DLC[];
	download_paused?: boolean;
	num_downloading?: number;
	num_paused?: number;
	changing?: boolean;
	available_on_platform?: boolean;
	bytes_staged?: string;
	bytes_to_stage?: string;
	bytes_required?: string;
	source_buildid?: number;
	target_buildid?: number;
	estimated_seconds_remaining?: number;
	queue_position?: number;
	uninstalling?: boolean;
	rt_time_scheduled?: number;
}

export interface CMsgClientGetClientAppListResponse_App_DLC {
	appid?: number;
	installed?: boolean;
}

export interface CMsgClientInstallClientApp {
	appid?: number;
}

export interface CMsgClientInstallClientAppResponse {
	result?: EResult;
}

export interface CMsgClientUninstallClientApp {
	appid?: number;
}

export interface CMsgClientUninstallClientAppResponse {
	result?: EResult;
}

export interface CMsgClientSetClientAppUpdateState {
	appid?: number;
	update?: boolean;
}

export interface CMsgClientSetClientAppUpdateStateResponse {
	result?: EResult;
}

export interface CMsgClientEnableOrDisableDownloads {
	enable?: boolean;
}

export interface CMsgClientEnableOrDisableDownloadsResponse {
	result?: EResult;
}

///////////////////////////////////////////////
// steammessages_clientserver_ufs.proto
///////////////////////////////////////////////

export interface CMsgClientUFSUploadFileRequest {
	app_id?: number;
	file_size?: number;
	raw_file_size?: number;
	sha_file?: Buffer;
	time_stamp?: string;
	file_name?: string;
	platforms_to_sync_deprecated?: number;
	platforms_to_sync?: number;
	cell_id?: number;
	can_encrypt?: boolean;
}

export interface CMsgClientUFSUploadFileResponse {
	eresult?: EResult;
	sha_file?: Buffer;
	use_http?: boolean;
	http_host?: string;
	http_url?: string;
	kv_headers?: Buffer;
	use_https?: boolean;
	encrypt_file?: boolean;
}

export interface CMsgClientUFSUploadCommit {
	files?: CMsgClientUFSUploadCommit_File[];
}

export interface CMsgClientUFSUploadCommit_File {
	eresult?: EResult;
	app_id?: number;
	sha_file?: Buffer;
	cub_file?: number;
	file_name?: string;
}

export interface CMsgClientUFSUploadCommitResponse {
	files?: CMsgClientUFSUploadCommitResponse_File[];
}

export interface CMsgClientUFSUploadCommitResponse_File {
	eresult?: EResult;
	app_id?: number;
	sha_file?: Buffer;
}

export interface CMsgClientUFSFileChunk {
	sha_file?: Buffer;
	file_start?: number;
	data?: Buffer;
}

export interface CMsgClientUFSTransferHeartbeat {
}

export interface CMsgClientUFSUploadFileFinished {
	eresult?: EResult;
	sha_file?: Buffer;
}

export interface CMsgClientUFSDeleteFileRequest {
	app_id?: number;
	file_name?: string;
	is_explicit_delete?: boolean;
}

export interface CMsgClientUFSDeleteFileResponse {
	eresult?: EResult;
	file_name?: string;
}

export interface CMsgClientUFSGetFileListForApp {
	apps_to_query?: number[];
	send_path_prefixes?: boolean;
}

export interface CMsgClientUFSGetFileListForAppResponse {
	files?: CMsgClientUFSGetFileListForAppResponse_File[];
	path_prefixes?: string[];
}

export interface CMsgClientUFSGetFileListForAppResponse_File {
	app_id?: number;
	file_name?: string;
	sha_file?: Buffer;
	time_stamp?: string;
	raw_file_size?: number;
	is_explicit_delete?: boolean;
	platforms_to_sync?: number;
	path_prefix_index?: number;
}

export interface CMsgClientUFSDownloadRequest {
	app_id?: number;
	file_name?: string;
	can_handle_http?: boolean;
}

export interface CMsgClientUFSDownloadResponse {
	eresult?: EResult;
	app_id?: number;
	file_size?: number;
	raw_file_size?: number;
	sha_file?: Buffer;
	time_stamp?: string;
	is_explicit_delete?: boolean;
	use_http?: boolean;
	http_host?: string;
	http_url?: string;
	kv_headers?: Buffer;
	use_https?: boolean;
	encrypted?: boolean;
}

export interface CMsgClientUFSLoginRequest {
	protocol_version?: number;
	am_session_token?: string;
	apps?: number[];
}

export interface CMsgClientUFSLoginResponse {
	eresult?: EResult;
}

export interface CMsgClientUFSGetUGCDetails {
	hcontent?: string;
}

export interface CMsgClientUFSGetUGCDetailsResponse {
	eresult?: EResult;
	url?: string;
	app_id?: number;
	filename?: string;
	steamid_creator?: string;
	file_size?: number;
	compressed_file_size?: number;
	rangecheck_host?: string;
	file_encoded_sha1?: string;
}

export interface CMsgClientUFSGetSingleFileInfo {
	app_id?: number;
	file_name?: string;
}

export interface CMsgClientUFSGetSingleFileInfoResponse {
	eresult?: EResult;
	app_id?: number;
	file_name?: string;
	sha_file?: Buffer;
	time_stamp?: string;
	raw_file_size?: number;
	is_explicit_delete?: boolean;
}

export interface CMsgClientUFSShareFile {
	app_id?: number;
	file_name?: string;
}

export interface CMsgClientUFSShareFileResponse {
	eresult?: EResult;
	hcontent?: string;
}

///////////////////////////////////////////////
// steammessages_clientserver_userstats.proto
///////////////////////////////////////////////

export interface CMsgClientGetUserStats {
	game_id?: string;
	crc_stats?: number;
	schema_local_version?: number;
	steam_id_for_user?: string;
}

export interface CMsgClientGetUserStatsResponse {
	game_id?: string;
	eresult?: EResult;
	crc_stats?: number;
	schema?: Buffer;
	stats?: CMsgClientGetUserStatsResponse_Stats[];
	achievement_blocks?: CMsgClientGetUserStatsResponse_Achievement_Blocks[];
}

export interface CMsgClientGetUserStatsResponse_Stats {
	stat_id?: number;
	stat_value?: number;
}

export interface CMsgClientGetUserStatsResponse_Achievement_Blocks {
	achievement_id?: number;
	unlock_time?: number[];
}

export interface CMsgClientStoreUserStatsResponse {
	game_id?: string;
	eresult?: EResult;
	crc_stats?: number;
	stats_failed_validation?: CMsgClientStoreUserStatsResponse_Stats_Failed_Validation[];
	stats_out_of_date?: boolean;
}

export interface CMsgClientStoreUserStatsResponse_Stats_Failed_Validation {
	stat_id?: number;
	reverted_stat_value?: number;
}

export interface CMsgClientStoreUserStats2 {
	game_id?: string;
	settor_steam_id?: string;
	settee_steam_id?: string;
	crc_stats?: number;
	explicit_reset?: boolean;
	stats?: CMsgClientStoreUserStats2_Stats[];
}

export interface CMsgClientStoreUserStats2_Stats {
	stat_id?: number;
	stat_value?: number;
}

export interface CMsgClientStatsUpdated {
	steam_id?: string;
	game_id?: string;
	crc_stats?: number;
	updated_stats?: CMsgClientStatsUpdated_Updated_Stats[];
}

export interface CMsgClientStatsUpdated_Updated_Stats {
	stat_id?: number;
	stat_value?: number;
}

export interface CMsgClientStoreUserStats {
	game_id?: string;
	explicit_reset?: boolean;
	stats_to_store?: CMsgClientStoreUserStats_Stats_To_Store[];
}

export interface CMsgClientStoreUserStats_Stats_To_Store {
	stat_id?: number;
	stat_value?: number;
}

///////////////////////////////////////////////
// steammessages_clientsettings.proto
///////////////////////////////////////////////

export interface CMsgHotkey {
	key_code?: number;
	alt_key?: boolean;
	shift_key?: boolean;
	ctrl_key?: boolean;
	meta_key?: boolean;
	display_name?: string;
}

export interface CMsgClientSettings {
	no_save_personal_info?: boolean;
	oobe_test_mode_enabled?: boolean;
	in_client_beta?: boolean;
	is_steam_sideloaded?: boolean;
	preferred_monitor?: string;
	steam_cef_gpu_blocklist_disabled?: boolean;
	bigpicture_windowed?: boolean;
	display_name?: string;
	is_external_display?: boolean;
	steam_os_underscan_level?: number;
	steam_os_underscan_enabled?: boolean;
	min_scale_factor?: number;
	max_scale_factor?: number;
	auto_scale_factor?: number;
	enable_test_updaters?: boolean;
	small_mode?: boolean;
	disable_all_toasts?: boolean;
	disable_toasts_in_game?: boolean;
	show_family_sharing_notifications?: boolean;
	overlay_fps_counter_corner?: number;
	overlay_fps_counter_high_contrast?: boolean;
	overlay_key?: CMsgHotkey;
	screenshot_key?: CMsgHotkey;
	enable_overlay?: boolean;
	disable_desktop_game_theater?: boolean;
	enable_screenshot_notification?: boolean;
	enable_screenshot_sound?: boolean;
	save_uncompressed_screenshots?: boolean;
	screenshots_path?: string;
	default_ping_rate?: number;
	server_ping_rate?: number;
	steam_networking_share_ip?: number;
	web_browser_home?: string;
	smooth_scroll_webviews?: boolean;
	enable_gpu_accelerated_webviews?: boolean;
	enable_hardware_video_decoding?: boolean;
	run_at_startup?: boolean;
	enable_dpi_scaling?: boolean;
	enable_marketing_messages?: boolean;
	start_in_big_picture_mode?: boolean;
	jumplist_flags?: number;
	library_display_size?: number;
	library_whats_new_show_only_product_updates?: boolean;
	show_store_content_on_home?: boolean;
	start_page?: string;
	library_low_bandwidth_mode?: boolean;
	library_low_perf_mode?: boolean;
	library_disable_community_content?: boolean;
	library_display_icon_in_game_list?: boolean;
	enable_shader_precache?: boolean;
	enable_shader_background_processing?: boolean;
	shader_precached_size?: string;
	needs_steam_service_repair?: boolean;
	download_peer_content?: number;
	download_rate_bits_per_s?: boolean;
	restrict_auto_updates?: boolean;
	restrict_auto_updates_start?: number;
	restrict_auto_updates_end?: number;
	download_region?: number;
	download_while_app_running?: boolean;
	download_throttle_while_streaming?: boolean;
	download_throttle_rate?: number;
	cloud_enabled?: boolean;
	show_screenshot_manager?: boolean;
	music_volume?: number;
	music_pause_on_app_start?: boolean;
	music_pause_on_voice_chat?: boolean;
	music_download_high_quality?: boolean;
	music_playlist_notification?: boolean;
	broadcast_permissions?: number;
	broadcast_output_width?: number;
	broadcast_output_height?: number;
	broadcast_bitrate?: number;
	broadcast_encoding_option?: number;
	broadcast_record_all_video?: boolean;
	broadcast_record_all_audio?: boolean;
	broadcast_record_microphone?: boolean;
	broadcast_show_upload_stats?: boolean;
	broadcast_show_live_reminder?: boolean;
	broadcast_chat_corner?: number;
	steam_input_configurator_error_msg_enable?: boolean;
	controller_guide_button_focus_steam?: boolean;
	controller_ps4_support?: boolean;
	controller_xbox_support?: boolean;
	controller_xbox_driver?: boolean;
	controller_switch_support?: boolean;
	controller_generic_support?: boolean;
	controller_power_off_timeout?: number;
	turn_off_controller_on_exit?: boolean;
	controller_combine_nintendo_joycons?: boolean;
}

///////////////////////////////////////////////
// steammessages_client_objects.proto
///////////////////////////////////////////////

export interface SteamMessagesClientIClientForcedEnumDependencies {
	a?: EBluetoothDeviceType;
	b?: EStorageBlockContentType;
	c?: EStorageBlockFileSystemType;
	d?: ESDCardFormatStage;
}

export interface CMsgNetworkDeviceIP4Address {
	ip?: number;
	netmask?: number;
}

export interface CMsgNetworkDeviceIP4Config {
	addresses?: CMsgNetworkDeviceIP4Address[];
	dns_ip?: number[];
	gateway_ip?: number;
	is_dhcp_enabled?: boolean;
	is_default_route?: boolean;
	is_enabled?: boolean;
}

export interface CMsgNetworkDeviceIP6Address {
	ip?: string;
}

export interface CMsgNetworkDeviceIP6Config {
	addresses?: CMsgNetworkDeviceIP6Address[];
	dns_ip?: string[];
	gateway_ip?: string;
	is_dhcp_enabled?: boolean;
	is_default_route?: boolean;
	is_enabled?: boolean;
}

export interface CMsgNetworkDevicesData {
	devices?: CMsgNetworkDevicesData_Device[];
	is_wifi_enabled?: boolean;
	is_wifi_scanning_enabled?: boolean;
}

export interface CMsgNetworkDevicesData_Device {
	id?: number;
	etype?: number;
	estate?: number;
	mac?: string;
	vendor?: string;
	product?: string;
	ip4?: CMsgNetworkDeviceIP4Config;
	ip6?: CMsgNetworkDeviceIP6Config;
	wired?: CMsgNetworkDevicesData_Device_Wired;
	wireless?: CMsgNetworkDevicesData_Device_Wireless;
}

export interface CMsgNetworkDevicesData_Device_Wired {
	is_cable_present?: boolean;
	speed_mbit?: number;
	friendly_name?: string;
}

export interface CMsgNetworkDevicesData_Device_Wireless {
	aps?: CMsgNetworkDevicesData_Device_Wireless_AP[];
	esecurity_supported?: number;
}

export interface CMsgNetworkDevicesData_Device_Wireless_AP {
	id?: number;
	estrength?: number;
	ssid?: string;
	is_active?: boolean;
	is_autoconnect?: boolean;
	esecurity?: number;
	user_name?: string;
	password?: string;
	strength_raw?: number;
}

export interface CMsgNetworkDeviceConnect {
	device_id?: number;
	credentials?: CMsgNetworkDeviceConnect_Credentials;
	ip4?: CMsgNetworkDeviceIP4Config;
	ip6?: CMsgNetworkDeviceIP6Config;
	ap_known?: CMsgNetworkDeviceConnect_KnownAP;
	ap_custom?: CMsgNetworkDeviceConnect_CustomAP;
}

export interface CMsgNetworkDeviceConnect_KnownAP {
	ap_id?: number;
}

export interface CMsgNetworkDeviceConnect_CustomAP {
	ssid?: string;
	esecurity?: number;
}

export interface CMsgNetworkDeviceConnect_Credentials {
	username?: string;
	password?: string;
}

export interface CMsgStorageDevicesData {
	drives?: CMsgStorageDevicesData_Drive[];
	block_devices?: CMsgStorageDevicesData_BlockDevice[];
	is_unmount_supported?: boolean;
	is_trim_supported?: boolean;
	is_trim_running?: boolean;
}

export interface CMsgStorageDevicesData_Drive {
	id?: number;
	model?: string;
	vendor?: string;
	serial?: string;
	is_ejectable?: boolean;
	size_bytes?: string;
	media_type?: EStorageDriveMediaType;
}

export interface CMsgStorageDevicesData_BlockDevice {
	id?: number;
	drive_id?: number;
	path?: string;
	friendly_path?: string;
	label?: string;
	size_bytes?: string;
	is_formattable?: boolean;
	is_read_only?: boolean;
	is_root_device?: boolean;
	content_type?: EStorageBlockContentType;
	filesystem_type?: EStorageBlockFileSystemType;
	mount_path?: string;
}

export interface CCloud_PendingRemoteOperation {
	operation?: ECloudPendingRemoteOperation;
	machine_name?: string;
	client_id?: string;
	time_last_updated?: number;
}

export interface CMsgCloudPendingRemoteOperations {
	operations?: CCloud_PendingRemoteOperation[];
}

export interface CMsgBluetoothDevicesData {
	adapters?: CMsgBluetoothDevicesData_Adapter[];
	devices?: CMsgBluetoothDevicesData_Device[];
	manager?: CMsgBluetoothDevicesData_Manager;
}

export interface CMsgBluetoothDevicesData_Adapter {
	id?: number;
	mac?: string;
	name?: string;
	is_enabled?: boolean;
	is_discovering?: boolean;
}

export interface CMsgBluetoothDevicesData_Device {
	id?: number;
	adapter_id?: number;
	etype?: EBluetoothDeviceType;
	mac?: string;
	name?: string;
	is_connected?: boolean;
	is_paired?: boolean;
	strength_raw?: number;
}

export interface CMsgBluetoothDevicesData_Manager {
	is_bluetooth_enabled?: boolean;
}

export interface CMsgSystemPerfDiagnosticEntry {
	name?: string;
	value?: string;
}

export interface CMsgSystemPerfNetworkInterface {
	name?: string;
	timestamp?: number;
	tx_bytes_total?: string;
	rx_bytes_total?: string;
	tx_bytes_per_sec?: number;
	rx_bytes_per_sec?: number;
}

export interface CMsgSystemPerfDiagnosticInfo {
	entries?: CMsgSystemPerfDiagnosticEntry[];
	interfaces?: CMsgSystemPerfNetworkInterface[];
	battery_temp_c?: number;
}

export interface CMsgSystemPerfLimits {
	cpu_governor_manual_min_mhz?: number;
	cpu_governor_manual_max_mhz?: number;
	fsr_sharpness_min?: number;
	fsr_sharpness_max?: number;
	gpu_performance_manual_min_mhz?: number;
	gpu_performance_manual_max_mhz?: number;
	perf_overlay_is_standalone?: boolean;
	is_dynamic_vrs_available?: boolean;
	is_manual_display_refresh_rate_available?: boolean;
	gpu_performance_levels_available?: EGPUPerformanceLevel[];
	display_refresh_manual_hz_min?: number;
	display_refresh_manual_hz_max?: number;
	fps_limit_options?: number[];
	tdp_limit_min?: number;
	tdp_limit_max?: number;
	is_nis_supported?: boolean;
	nis_sharpness_min?: number;
	nis_sharpness_max?: number;
	display_external_refresh_manual_hz_min?: number;
	display_external_refresh_manual_hz_max?: number;
	fps_limit_options_external?: number[];
	is_tearing_supported?: boolean;
	is_vrr_supported?: boolean;
	is_dynamic_refresh_rate_in_steam_supported?: boolean;
	is_split_scaling_and_filtering_supported?: boolean;
	split_scaling_filters_available?: ESplitScalingFilter[];
	split_scaling_scalers_available?: ESplitScalingScaler[];
	is_hdr_supported?: boolean;
}

export interface CMsgSystemPerfSettingsGlobal {
	diagnostic_update_rate?: number;
	system_trace_service_state?: ESystemServiceState;
	graphics_profiling_service_state?: ESystemServiceState;
	perf_overlay_service_state?: ESystemServiceState;
	perf_overlay_level?: EGraphicsPerfOverlayLevel;
	is_show_perf_overlay_over_steam_enabled?: boolean;
	is_advanced_settings_enabled?: boolean;
	allow_external_display_refresh_control?: boolean;
	is_hdr_enabled?: boolean;
	force_hdr_10pq_output_debug?: boolean;
	hdr_on_sdr_tonemap_operator?: EHDRToneMapOperator;
	is_hdr_debug_heatmap_enabled?: boolean;
	debug_force_hdr_support?: boolean;
	force_hdr_wide_gammut_for_sdr?: boolean;
}

export interface CMsgSystemPerfSettingsPerApp {
	gpu_performance_manual_mhz?: number;
	fps_limit?: number;
	is_variable_resolution_enabled?: boolean;
	is_dynamic_refresh_rate_enabled?: boolean;
	tdp_limit?: number;
	cpu_governor?: ECPUGovernor;
	cpu_governor_manual_mhz?: number;
	scaling_filter?: number;
	fsr_sharpness?: number;
	is_fps_limit_enabled?: boolean;
	is_tdp_limit_enabled?: boolean;
	is_low_latency_mode_enabled?: boolean;
	display_refresh_manual_hz?: number;
	is_game_perf_profile_enabled?: boolean;
	gpu_performance_level?: EGPUPerformanceLevel;
	nis_sharpness?: number;
	display_external_refresh_manual_hz?: number;
	fps_limit_external?: number;
	is_tearing_enabled?: boolean;
	is_vrr_enabled?: boolean;
	is_composite_debug_enabled?: boolean;
	force_composite?: boolean;
	use_dynamic_refresh_rate_in_steam?: boolean;
	split_scaling_filter?: ESplitScalingFilter;
	split_scaling_scaler?: ESplitScalingScaler;
}

export interface CMsgSystemPerfSettings {
	global?: CMsgSystemPerfSettingsGlobal;
	per_app?: CMsgSystemPerfSettingsPerApp;
}

export interface CMsgSystemPerfSettingsV1 {
	diagnostic_update_rate?: number;
	system_trace_service_state?: ESystemServiceState;
	graphics_profiling_service_state?: ESystemServiceState;
	perf_overlay_service_state?: ESystemServiceState;
	perf_overlay_level?: EGraphicsPerfOverlayLevel;
	gpu_performance_level?: EGPUPerformanceLevel;
	gpu_performance_manual_mhz?: number;
	fps_limit?: number;
	is_variable_resolution_enabled?: boolean;
	is_dynamic_refresh_rate_enabled?: boolean;
	tdp_limit?: number;
	cpu_governor?: ECPUGovernor;
	cpu_governor_manual_mhz?: number;
	scaling_filter?: number;
	fsr_sharpness?: number;
	is_fps_limit_enabled?: boolean;
	is_tdp_limit_enabled?: boolean;
	is_show_perf_overlay_over_steam_enabled?: boolean;
	is_low_latency_mode_enabled?: boolean;
	display_refresh_manual_hz?: number;
	is_game_perf_profile_enabled?: boolean;
}

export interface CMsgSystemPerfState {
	limits?: CMsgSystemPerfLimits;
	settings?: CMsgSystemPerfSettings;
	current_game_id?: string;
	active_profile_game_id?: string;
}

export interface CMsgSystemPerfUpdateSettings {
	gameid?: string;
	reset_to_default?: boolean;
	settings_delta?: CMsgSystemPerfSettings;
}

export interface CMsgSystemDockUpdateState {
	state?: EUpdaterState;
	rtime_last_checked?: number;
	version_current?: string;
	version_available?: string;
	stage_progress?: number;
	rtime_estimated_completion?: number;
	old_fw_workaround?: number;
}

export interface CMsgSystemDockState {
	update_state?: CMsgSystemDockUpdateState;
}

export interface CMsgSystemDockUpdateFirmware {
	check_only?: boolean;
}

export interface CMsgSystemAudioVolume {
	entries?: CMsgSystemAudioVolume_ChannelEntry[];
	is_muted?: boolean;
}

export interface CMsgSystemAudioVolume_ChannelEntry {
	echannel?: ESystemAudioChannel;
	volume?: number;
}

export interface CMsgSystemAudioManagerObject {
	id?: number;
	rtime_last_update?: number;
}

export interface CMsgSystemAudioManagerDevice {
	base?: CMsgSystemAudioManagerObject;
	name?: string;
	nick?: string;
	description?: string;
	api?: string;
}

export interface CMsgSystemAudioManagerNode {
	base?: CMsgSystemAudioManagerObject;
	device_id?: number;
	name?: string;
	nick?: string;
	description?: string;
	edirection?: ESystemAudioDirection;
	volume?: CMsgSystemAudioVolume;
}

export interface CMsgSystemAudioManagerPort {
	base?: CMsgSystemAudioManagerObject;
	node_id?: number;
	name?: string;
	alias?: string;
	etype?: ESystemAudioPortType;
	edirection?: ESystemAudioPortDirection;
	is_physical?: boolean;
	is_terminal?: boolean;
	is_control?: boolean;
	is_monitor?: boolean;
}

export interface CMsgSystemAudioManagerLink {
	base?: CMsgSystemAudioManagerObject;
	output_node_id?: number;
	output_port_id?: number;
	input_node_id?: number;
	input_port_id?: number;
}

export interface CMsgSystemAudioManagerStateHW {
	devices?: CMsgSystemAudioManagerDevice[];
	nodes?: CMsgSystemAudioManagerNode[];
	ports?: CMsgSystemAudioManagerPort[];
	links?: CMsgSystemAudioManagerLink[];
}

export interface CMsgSystemAudioManagerState {
	rtime_filter?: number;
	counter?: number;
	hw?: CMsgSystemAudioManagerStateHW;
}

export interface CMsgSystemAudioManagerUpdateSomething {
	counter?: number;
}

export interface CMsgSystemDisplayMode {
	id?: number;
	width?: number;
	height?: number;
	refresh_hz?: number;
}

export interface CMsgSystemDisplay {
	id?: number;
	name?: string;
	description?: string;
	is_primary?: boolean;
	is_enabled?: boolean;
	is_internal?: boolean;
	has_mode_override?: boolean;
	width_mm?: number;
	height_mm?: number;
	current_mode_id?: number;
	modes?: CMsgSystemDisplayMode[];
	refresh_rate_min?: number;
	refresh_rate_max?: number;
	is_vrr_capable?: boolean;
	is_vrr_enabled?: boolean;
	is_hdr_capable?: boolean;
	is_hdr_enabled?: boolean;
}

export interface CMsgSystemDisplayManagerState {
	displays?: CMsgSystemDisplay[];
	is_mode_switching_supported?: boolean;
	compatibility_mode?: ESystemDisplayCompatibilityMode;
}

export interface CMsgSystemDisplayManagerSetMode {
	display_id?: number;
	mode_id?: number;
}

export interface CMsgSystemManagerSettings {
	idle_backlight_dim_battery_seconds?: number;
	idle_backlight_dim_ac_seconds?: number;
	idle_suspend_battery_seconds?: number;
	idle_suspend_ac_seconds?: number;
	idle_suspend_supressed?: boolean;
	is_adaptive_brightness_available?: boolean;
	display_adaptive_brightness_enabled?: boolean;
	is_display_colorprofile_available?: boolean;
	display_colorprofile?: EColorProfile;
	display_nightmode_enabled?: boolean;
	display_nightmode_tintstrength?: number;
	display_nightmode_maxhue?: number;
	display_nightmode_maxsat?: number;
	display_nightmode_uiexp?: number;
	display_nightmode_blend?: number;
	display_nightmode_reset?: boolean;
	display_nightmode_schedule_enabled?: boolean;
	display_nightmode_schedule_starttime?: number;
	display_nightmode_schedule_endtime?: number;
	display_diagnostics_enabled?: boolean;
	als_lux_latest?: number;
	als_lux_median?: number;
	display_brightness_linear?: number;
	display_brightness_adaptivemin?: number;
	display_brightness_adaptivemax?: number;
	is_wifi_powersave_enabled?: boolean;
	is_fan_control_available?: boolean;
	fan_control_mode?: ESystemFanControlMode;
}

export interface CMsgSelectOSBranchParams {
	branch?: EOSBranch;
	custom_branch?: string;
}

export interface CMsgSystemUpdateProgress {
	stage_progress?: number;
	stage_size_bytes?: string;
	rtime_estimated_completion?: number;
}

export interface CMsgSystemUpdateCheckResult {
	type?: EUpdaterType;
	eresult?: EResult;
	rtime_checked?: number;
	available?: boolean;
	version?: string;
}

export interface CMsgSystemUpdateApplyParams {
	apply_types?: EUpdaterType[];
}

export interface CMsgSystemUpdateApplyResult {
	type?: EUpdaterType;
	eresult?: EResult;
	requires_client_restart?: boolean;
	requires_system_restart?: boolean;
}

export interface CMsgSystemUpdateState {
	state?: EUpdaterState;
	progress?: CMsgSystemUpdateProgress;
	update_check_results?: CMsgSystemUpdateCheckResult[];
	update_apply_results?: CMsgSystemUpdateApplyResult[];
	supports_os_updates?: boolean;
}

export interface CMsgAchievementChange {
	appid?: number;
}

export interface CMsgCellList {
	cells?: CMsgCellList_Cell[];
}

export interface CMsgCellList_Cell {
	cell_id?: number;
	loc_name?: string;
}

export interface CMsgShortcutInfo {
	appid?: number;
	exe?: string;
	start_dir?: string;
	icon?: string;
	path?: string;
	args?: string;
	app_name?: string;
	override_appid?: number;
	flatpak_appid?: string;
	tags?: string[];
	is_remote?: boolean;
	is_hidden?: boolean;
	is_temporary?: boolean;
	is_openvr?: boolean;
	allow_desktop_config?: boolean;
	allow_overlay?: boolean;
	rt_last_played_time?: number;
	is_devkit_shortcut?: boolean;
	devkit_gameid?: string;
}

export interface CMsgShortcutAppIds {
	appids?: number[];
}

export interface CMsgMonitorInfo {
	selected_display_name: string;
	monitors?: CMsgMonitorInfo_MonitorInfo[];
}

export interface CMsgMonitorInfo_MonitorInfo {
	monitor_device_name: string;
	monitor_display_name: string;
}

///////////////////////////////////////////////
// steammessages_cloud.steamclient.proto
///////////////////////////////////////////////

export interface CCloud_ClientLogUploadCheck_Notification {
	client_id?: string;
}

export interface CCloud_ClientLogUploadComplete_Notification {
	client_id?: string;
	request_id?: string;
}

export interface CCloud_GetUploadServerInfo_Request {
	appid?: number;
}

export interface CCloud_GetUploadServerInfo_Response {
	server_url?: string;
}

export interface CCloud_BeginHTTPUpload_Request {
	appid?: number;
	file_size?: number;
	filename?: string;
	file_sha?: string;
	is_public?: boolean;
	platforms_to_sync?: string[];
	request_headers_names?: string[];
	request_headers_values?: string[];
	upload_batch_id?: string;
}

export interface CCloud_BeginHTTPUpload_Response {
	ugcid?: string;
	timestamp?: number;
	url_host?: string;
	url_path?: string;
	use_https?: boolean;
	request_headers?: CCloud_BeginHTTPUpload_Response_HTTPHeaders[];
}

export interface CCloud_BeginHTTPUpload_Response_HTTPHeaders {
	name?: string;
	value?: string;
}

export interface CCloud_CommitHTTPUpload_Request {
	transfer_succeeded?: boolean;
	appid?: number;
	file_sha?: string;
	filename?: string;
}

export interface CCloud_CommitHTTPUpload_Response {
	file_committed?: boolean;
}

export interface CCloud_BeginUGCUpload_Request {
	appid?: number;
	file_size?: number;
	filename?: string;
	file_sha?: string;
	content_type?: string;
}

export interface CCloud_BeginUGCUpload_Response {
	storage_system?: EPublishedFileStorageSystem;
	ugcid?: string;
	timestamp?: number;
	url_host?: string;
	url_path?: string;
	use_https?: boolean;
	request_headers?: CCloud_BeginUGCUpload_Response_HTTPHeaders[];
}

export interface CCloud_BeginUGCUpload_Response_HTTPHeaders {
	name?: string;
	value?: string;
}

export interface CCloud_CommitUGCUpload_Request {
	transfer_succeeded?: boolean;
	appid?: number;
	ugcid?: string;
}

export interface CCloud_CommitUGCUpload_Response {
	file_committed?: boolean;
}

export interface CCloud_GetFileDetails_Request {
	ugcid?: string;
	appid?: number;
}

export interface CCloud_UserFile {
	appid?: number;
	ugcid?: string;
	filename?: string;
	timestamp?: string;
	file_size?: number;
	url?: string;
	steamid_creator?: string;
	flags?: number;
	platforms_to_sync?: string[];
	file_sha?: string;
}

export interface CCloud_GetFileDetails_Response {
	details?: CCloud_UserFile;
}

export interface CCloud_EnumerateUserFiles_Request {
	appid?: number;
	extended_details?: boolean;
	count?: number;
	start_index?: number;
}

export interface CCloud_EnumerateUserFiles_Response {
	files?: CCloud_UserFile[];
	total_files?: number;
}

export interface CCloud_Delete_Request {
	filename?: string;
	appid?: number;
	upload_batch_id?: string;
}

export interface CCloud_Delete_Response {
}

export interface CCloud_GetClientEncryptionKey_Request {
}

export interface CCloud_GetClientEncryptionKey_Response {
	key?: Buffer;
	crc?: number;
}

export interface CCloud_CDNReport_Notification {
	steamid?: string;
	url?: string;
	success?: boolean;
	http_status_code?: number;
	expected_bytes?: string;
	received_bytes?: string;
	duration?: number;
}

export interface CCloud_ExternalStorageTransferReport_Notification {
	host?: string;
	path?: string;
	is_upload?: boolean;
	success?: boolean;
	http_status_code?: number;
	bytes_expected?: string;
	bytes_actual?: string;
	duration_ms?: number;
	cellid?: number;
	proxied?: boolean;
	ipv6_local?: boolean;
	ipv6_remote?: boolean;
	time_to_connect_ms?: number;
	time_to_send_req_ms?: number;
	time_to_first_byte_ms?: number;
	time_to_last_byte_ms?: number;
}

export interface CCloud_BeginAppUploadBatch_Request {
	appid?: number;
	machine_name?: string;
	files_to_upload?: string[];
	files_to_delete?: string[];
	client_id?: string;
	app_build_id?: string;
}

export interface CCloud_BeginAppUploadBatch_Response {
	batch_id?: string;
	app_change_number?: string;
}

export interface CCloud_CompleteAppUploadBatch_Notification {
	appid?: number;
	batch_id?: string;
	batch_eresult?: number;
}

export interface CCloud_CompleteAppUploadBatch_Request {
	appid?: number;
	batch_id?: string;
	batch_eresult?: number;
}

export interface CCloud_CompleteAppUploadBatch_Response {
}

export interface CCloud_ClientBeginFileUpload_Request {
	appid?: number;
	file_size?: number;
	raw_file_size?: number;
	file_sha?: Buffer;
	time_stamp?: string;
	filename?: string;
	platforms_to_sync?: number;
	cell_id?: number;
	can_encrypt?: boolean;
	is_shared_file?: boolean;
	deprecated_realm?: number;
	upload_batch_id?: string;
}

export interface ClientCloudFileUploadBlockDetails {
	url_host?: string;
	url_path?: string;
	use_https?: boolean;
	http_method?: number;
	request_headers?: ClientCloudFileUploadBlockDetails_HTTPHeaders[];
	block_offset?: string;
	block_length?: number;
	explicit_body_data?: Buffer;
	may_parallelize?: boolean;
}

export interface ClientCloudFileUploadBlockDetails_HTTPHeaders {
	name?: string;
	value?: string;
}

export interface CCloud_ClientBeginFileUpload_Response {
	encrypt_file?: boolean;
	block_requests?: ClientCloudFileUploadBlockDetails[];
}

export interface CCloud_ClientCommitFileUpload_Request {
	transfer_succeeded?: boolean;
	appid?: number;
	file_sha?: Buffer;
	filename?: string;
}

export interface CCloud_ClientCommitFileUpload_Response {
	file_committed?: boolean;
}

export interface CCloud_ClientFileDownload_Request {
	appid?: number;
	filename?: string;
	realm?: number;
}

export interface CCloud_ClientFileDownload_Response {
	appid?: number;
	file_size?: number;
	raw_file_size?: number;
	sha_file?: Buffer;
	time_stamp?: string;
	is_explicit_delete?: boolean;
	url_host?: string;
	url_path?: string;
	use_https?: boolean;
	request_headers?: CCloud_ClientFileDownload_Response_HTTPHeaders[];
	encrypted?: boolean;
}

export interface CCloud_ClientFileDownload_Response_HTTPHeaders {
	name?: string;
	value?: string;
}

export interface CCloud_ClientDeleteFile_Request {
	appid?: number;
	filename?: string;
	is_explicit_delete?: boolean;
	upload_batch_id?: string;
}

export interface CCloud_ClientDeleteFile_Response {
}

export interface CCloud_ClientConflictResolution_Notification {
	appid?: number;
	chose_local_files?: boolean;
}

export interface CCloud_EnumerateUserApps_Request {
}

export interface CCloud_EnumerateUserApps_Response {
	apps?: CCloud_EnumerateUserApps_Response_Apps[];
}

export interface CCloud_EnumerateUserApps_Response_Apps {
	appid?: number;
	totalcount?: number;
	totalsize?: string;
}

export interface CCloud_GetAppFileChangelist_Request {
	appid?: number;
	synced_change_number?: string;
}

export interface CCloud_AppFileInfo {
	file_name?: string;
	sha_file?: Buffer;
	time_stamp?: string;
	raw_file_size?: number;
	persist_state?: ECloudStoragePersistState;
	platforms_to_sync?: number;
	path_prefix_index?: number;
	machine_name_index?: number;
}

export interface CCloud_GetAppFileChangelist_Response {
	current_change_number?: string;
	files?: CCloud_AppFileInfo[];
	is_only_delta?: boolean;
	path_prefixes?: string[];
	machine_names?: string[];
	app_buildid_hwm?: string;
}

export interface CCloud_AppSessionSuspend_Request {
	appid?: number;
	client_id?: string;
	machine_name?: string;
	cloud_sync_completed?: boolean;
}

export interface CCloud_AppSessionSuspend_Response {
}

export interface CCloud_AppSessionResume_Request {
	appid?: number;
	client_id?: string;
}

export interface CCloud_AppSessionResume_Response {
}

export interface CCloud_AppLaunchIntent_Request {
	appid?: number;
	client_id?: string;
	machine_name?: string;
	ignore_pending_operations?: boolean;
}

export interface CCloud_AppLaunchIntent_Response {
	pending_remote_operations?: CCloud_PendingRemoteOperation[];
}

export interface CCloud_AppExitSyncDone_Notification {
	appid?: number;
	client_id?: string;
	uploads_completed?: boolean;
	uploads_required?: boolean;
}

export interface CCloud_ClientGetAppQuotaUsage_Request {
	appid?: number;
}

export interface CCloud_ClientGetAppQuotaUsage_Response {
	existing_files?: number;
	existing_bytes?: string;
	max_num_files?: number;
	max_num_bytes?: string;
}

export interface CCloud_AppCloudStateChange_Notification {
	appid?: number;
	app_change_number?: string;
}

export interface CCloud_ClientLogUploadRequest_Notification {
	request_id?: string;
}

export interface Cloud {
}

export interface CloudClient {
}

///////////////////////////////////////////////
// steammessages_contentsystem.steamclient.proto
///////////////////////////////////////////////

export interface CContentServerDirectory_GetServersForSteamPipe_Request {
	cell_id?: number;
	max_servers?: number;
	ip_override?: string;
	launcher_type?: number;
	ipv6_public?: string;
}

export interface CContentServerDirectory_ServerInfo {
	type?: string;
	source_id?: number;
	cell_id?: number;
	load?: number;
	weighted_load?: number;
	num_entries_in_client_list?: number;
	steam_china_only?: boolean;
	host?: string;
	vhost?: string;
	use_as_proxy?: boolean;
	proxy_request_path_template?: string;
	https_support?: string;
	allowed_app_ids?: number[];
	preferred_server?: boolean;
}

export interface CContentServerDirectory_GetServersForSteamPipe_Response {
	servers?: CContentServerDirectory_ServerInfo[];
}

export interface CContentServerDirectory_GetDepotPatchInfo_Request {
	appid?: number;
	depotid?: number;
	source_manifestid?: string;
	target_manifestid?: string;
}

export interface CContentServerDirectory_GetDepotPatchInfo_Response {
	is_available?: boolean;
	patch_size?: string;
	patched_chunks_size?: string;
}

export interface CContentServerDirectory_GetClientUpdateHosts_Request {
	cached_signature?: string;
}

export interface CContentServerDirectory_GetClientUpdateHosts_Response {
	hosts_kv?: string;
	valid_until_time?: string;
	ip_country?: string;
}

export interface CContentServerDirectory_GetManifestRequestCode_Request {
	app_id?: number;
	depot_id?: number;
	manifest_id?: string;
	app_branch?: string;
	branch_password_hash?: string;
}

export interface CContentServerDirectory_GetManifestRequestCode_Response {
	manifest_request_code?: string;
}

export interface CContentServerDirectory_GetCDNAuthToken_Request {
	depot_id?: number;
	host_name?: string;
	app_id?: number;
}

export interface CContentServerDirectory_GetCDNAuthToken_Response {
	token?: string;
	expiration_time?: number;
}

export interface CContentServerDirectory_RequestPeerContentServer_Request {
	remote_client_id?: string;
	steamid?: string;
	server_remote_client_id?: string;
	app_id?: number;
	current_build_id?: number;
}

export interface CContentServerDirectory_RequestPeerContentServer_Response {
	server_port?: number;
}

export interface CContentServerDirectory_GetPeerContentInfo_Request {
	remote_client_id?: string;
	steamid?: string;
	server_remote_client_id?: string;
}

export interface CContentServerDirectory_GetPeerContentInfo_Response {
	appids?: number[];
}

export interface ContentServerDirectory {
}

///////////////////////////////////////////////
// steammessages_credentials.steamclient.proto
///////////////////////////////////////////////

export interface CCredentials_TestAvailablePassword_Request {
	password?: string;
	sha_digest_password?: Buffer;
	account_name?: string;
}

export interface CCredentials_TestAvailablePassword_Response {
	is_valid?: boolean;
}

export interface CCredentials_GetSteamGuardDetails_Request {
	webcookie?: string;
	timestamp_minimum_wanted?: number;
	deprecated_ipaddress?: number;
	ip_address?: CMsgIPAddress;
}

export interface CCredentials_GetSteamGuardDetails_Response {
	is_steamguard_enabled?: boolean;
	timestamp_steamguard_enabled?: number;
	deprecated_machine_name_userchosen?: string;
	deprecated_timestamp_machine_steamguard_enabled?: number;
	deprecated_authentication_exists_from_geoloc_before_mintime?: boolean;
	deprecated_machine_id?: string;
	session_data?: CCredentials_GetSteamGuardDetails_Response_SessionData[];
	is_twofactor_enabled?: boolean;
	timestamp_twofactor_enabled?: number;
	is_phone_verified?: boolean;
}

export interface CCredentials_GetSteamGuardDetails_Response_SessionData {
	machine_id?: string;
	machine_name_userchosen?: string;
	timestamp_machine_steamguard_enabled?: number;
	authentication_exists_from_geoloc_before_mintime?: boolean;
	authentication_exists_from_same_ip_before_mintime?: boolean;
	public_ipv4?: number;
	public_ip_address?: string;
}

export interface CCredentials_ValidateEmailAddress_Request {
	stoken?: string;
}

export interface CCredentials_ValidateEmailAddress_Response {
	was_validated?: boolean;
}

export interface CCredentials_SteamGuardPhishingReport_Request {
	param_string?: string;
	ipaddress_actual?: string;
}

export interface CCredentials_SteamGuardPhishingReport_Response {
	ipaddress_loginattempt?: string;
	countryname_loginattempt?: string;
	statename_loginattempt?: string;
	cityname_loginattempt?: string;
	ipaddress_actual?: string;
	countryname_actual?: string;
	statename_actual?: string;
	cityname_actual?: string;
	steamguard_code?: string;
}

export interface CCredentials_LastCredentialChangeTime_Request {
	user_changes_only?: boolean;
}

export interface CCredentials_LastCredentialChangeTime_Response {
	timestamp_last_password_change?: number;
	timestamp_last_email_change?: number;
	timestamp_last_password_reset?: number;
}

export interface CCredentials_GetAccountAuthSecret_Request {
}

export interface CCredentials_GetAccountAuthSecret_Response {
	secret_id?: number;
	secret?: Buffer;
}

export interface Credentials {
}

///////////////////////////////////////////////
// steammessages_datapublisher.steamclient.proto
///////////////////////////////////////////////

export interface CDataPublisher_ClientContentCorruptionReport_Notification {
	appid?: number;
	depotid?: number;
	download_source?: string;
	objectid?: string;
	cellid?: number;
	is_manifest?: boolean;
	object_size?: string;
	corruption_type?: number;
	used_https?: boolean;
	oc_proxy_detected?: boolean;
}

export interface CDataPublisher_ClientUpdateAppJob_Notification {
	app_id?: number;
	depot_ids?: number[];
	app_state?: number;
	job_app_error?: number;
	error_details?: string;
	job_duration?: number;
	files_validation_failed?: number;
	job_bytes_downloaded?: string;
	job_bytes_staged?: string;
	bytes_comitted?: string;
	start_app_state?: number;
	stats_machine_id?: string;
	branch_name?: string;
	total_bytes_downloaded?: string;
	total_bytes_staged?: string;
	total_bytes_restored?: string;
	is_borrowed?: boolean;
	is_free_weekend?: boolean;
	total_bytes_patched?: string;
	total_bytes_saved?: string;
	cell_id?: number;
}

export interface CValveHWSurvey_GetSurveySchedule_Request {
	surveydatetoken?: string;
	surveydatetokenversion?: string;
}

export interface CValveHWSurvey_GetSurveySchedule_Response {
	surveydatetoken?: number;
	surveydatetokenversion?: string;
}

export interface DataPublisher {
}

export interface ValveHWSurvey {
}

///////////////////////////////////////////////
// steammessages_depotbuilder.steamclient.proto
///////////////////////////////////////////////

export interface CContentBuilder_InitDepotBuild_Request {
	appid?: number;
	depotid?: number;
	workshop_itemid?: string;
	for_local_cs?: boolean;
	target_branch?: string;
}

export interface CContentBuilder_InitDepotBuild_Response {
	baseline_manifestid?: string;
	chunk_size?: number;
	aes_key?: Buffer;
	rsa_key?: Buffer;
	url_host?: string;
	offset_detection_enabled?: boolean;
	offset_detection_min_clean_chunk?: number;
	offset_detection_blast_radius_pre?: number;
	offset_detection_blast_radius_post?: number;
	offset_detection_max_distance_pre?: number;
	offset_detection_max_distance_post?: number;
}

export interface CContentBuilder_StartDepotUpload_Request {
	appid?: number;
	depotid?: number;
	workshop_itemid?: string;
	for_local_cs?: boolean;
	baseline_manifestid?: string;
	manifest_size?: number;
}

export interface CContentBuilder_StartDepotUpload_Response {
	depot_build_handle?: string;
}

export interface CContentBuilder_GetMissingDepotChunks_Request {
	appid?: number;
	depot_build_handle?: string;
}

export interface CContentBuilder_GetMissingDepotChunks_Response {
	missing_chunks?: CContentBuilder_GetMissingDepotChunks_Response_Chunks[];
	total_missing_chunks?: number;
	total_missing_bytes?: string;
}

export interface CContentBuilder_GetMissingDepotChunks_Response_Chunks {
	sha?: Buffer;
}

export interface CContentBuilder_FinishDepotUpload_Request {
	appid?: number;
	depot_build_handle?: string;
}

export interface CContentBuilder_FinishDepotUpload_Response {
	manifestid?: string;
	prev_reused?: boolean;
}

export interface CContentBuilder_CommitAppBuild_Request {
	appid?: number;
	depot_manifests?: CContentBuilder_CommitAppBuild_Request_Depots[];
	build_notes?: string;
	live_branch?: string;
}

export interface CContentBuilder_CommitAppBuild_Request_Depots {
	depotid?: number;
	manifestid?: string;
}

export interface CContentBuilder_CommitAppBuild_Response {
	buildid?: number;
}

export interface CContentBuilder_SignInstallScript_Request {
	appid?: number;
	depotid?: number;
	install_script?: string;
}

export interface CContentBuilder_SignInstallScript_Response {
	signed_install_script?: string;
}

export interface ContentBuilder {
}

///////////////////////////////////////////////
// steammessages_deviceauth.steamclient.proto
///////////////////////////////////////////////

export interface CDeviceAuth_GetOwnAuthorizedDevices_Request {
	steamid?: string;
	include_canceled?: boolean;
}

export interface CDeviceAuth_GetOwnAuthorizedDevices_Response {
	devices?: CDeviceAuth_GetOwnAuthorizedDevices_Response_Device[];
}

export interface CDeviceAuth_GetOwnAuthorizedDevices_Response_Device {
	auth_device_token?: string;
	device_name?: string;
	is_pending?: boolean;
	is_canceled?: boolean;
	last_time_used?: number;
	last_borrower_id?: string;
	last_app_played?: number;
	is_limited?: boolean;
}

export interface CDeviceAuth_AcceptAuthorizationRequest_Request {
	steamid?: string;
	auth_device_token?: string;
	auth_code?: string;
	from_steamid?: string;
}

export interface CDeviceAuth_AcceptAuthorizationRequest_Response {
}

export interface CDeviceAuth_AuthorizeRemoteDevice_Request {
	steamid?: string;
	auth_device_token?: string;
}

export interface CDeviceAuth_AuthorizeRemoteDevice_Response {
}

export interface CDeviceAuth_DeauthorizeRemoteDevice_Request {
	steamid?: string;
	auth_device_token?: string;
}

export interface CDeviceAuth_DeauthorizeRemoteDevice_Response {
}

export interface CDeviceAuth_GetUsedAuthorizedDevices_Request {
	steamid?: string;
}

export interface CDeviceAuth_GetUsedAuthorizedDevices_Response {
	devices?: CDeviceAuth_GetUsedAuthorizedDevices_Response_Device[];
}

export interface CDeviceAuth_GetUsedAuthorizedDevices_Response_Device {
	auth_device_token?: string;
	device_name?: string;
	owner_steamid?: string;
	last_time_used?: number;
	last_app_played?: number;
}

export interface CDeviceAuth_GetAuthorizedBorrowers_Request {
	steamid?: string;
	include_canceled?: boolean;
	include_pending?: boolean;
}

export interface CDeviceAuth_GetAuthorizedBorrowers_Response {
	borrowers?: CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower[];
}

export interface CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower {
	steamid?: string;
	is_pending?: boolean;
	is_canceled?: boolean;
	time_created?: number;
}

export interface CDeviceAuth_AddAuthorizedBorrowers_Request {
	steamid?: string;
	steamid_borrower?: string[];
}

export interface CDeviceAuth_AddAuthorizedBorrowers_Response {
	seconds_to_wait?: number;
}

export interface CDeviceAuth_RemoveAuthorizedBorrowers_Request {
	steamid?: string;
	steamid_borrower?: string[];
}

export interface CDeviceAuth_RemoveAuthorizedBorrowers_Response {
}

export interface CDeviceAuth_GetAuthorizedAsBorrower_Request {
	steamid?: string;
	include_canceled?: boolean;
	include_pending?: boolean;
}

export interface CDeviceAuth_GetAuthorizedAsBorrower_Response {
	lenders?: CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender[];
}

export interface CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender {
	steamid?: string;
	time_created?: number;
	is_pending?: boolean;
	is_canceled?: boolean;
	is_used?: boolean;
	time_removed?: number;
	time_first?: number;
}

export interface CDeviceAuth_GetExcludedGamesInLibrary_Request {
	steamid?: string;
}

export interface CDeviceAuth_GetExcludedGamesInLibrary_Response {
	excluded_games?: CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame[];
}

export interface CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame {
	appid?: number;
	game_name?: string;
	vac_banned?: boolean;
	package_excluded?: boolean;
}

export interface CDeviceAuth_GetBorrowerPlayHistory_Request {
	steamid?: string;
	appid?: number;
}

export interface CDeviceAuth_GetBorrowerPlayHistory_Response {
	lender_history?: CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory[];
}

export interface CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory {
	appid?: number;
	time_last?: number;
	time_total?: number;
}

export interface CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory {
	steamid?: string;
	game_history?: CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory[];
}

export interface DeviceAuth {
}

///////////////////////////////////////////////
// steammessages_econ.steamclient.proto
///////////////////////////////////////////////

export interface CEcon_GetInventoryItemsWithDescriptions_Request {
	steamid?: string;
	appid?: number;
	contextid?: string;
	get_descriptions?: boolean;
	for_trade_offer_verification?: boolean;
	language?: string;
	filters?: CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions;
	start_assetid?: string;
	count?: number;
}

export interface CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions {
	assetids?: string[];
	currencyids?: number[];
	tradable_only?: boolean;
	marketable_only?: boolean;
}

export interface CEcon_Asset {
	appid?: number;
	contextid?: string;
	assetid?: string;
	classid?: string;
	instanceid?: string;
	currencyid?: number;
	amount?: string;
	missing?: boolean;
	est_usd?: string;
}

export interface CEconItem_DescriptionLine {
	type?: string;
	value?: string;
	color?: string;
	label?: string;
}

export interface CEconItem_Action {
	link?: string;
	name?: string;
}

export interface CEconItem_Description {
	appid?: number;
	classid?: string;
	instanceid?: string;
	currency?: boolean;
	background_color?: string;
	icon_url?: string;
	icon_url_large?: string;
	descriptions?: CEconItem_DescriptionLine[];
	tradable?: boolean;
	actions?: CEconItem_Action[];
	owner_descriptions?: CEconItem_DescriptionLine[];
	owner_actions?: CEconItem_Action[];
	fraudwarnings?: string[];
	name?: string;
	name_color?: string;
	type?: string;
	market_name?: string;
	market_hash_name?: string;
	market_fee?: string;
	market_fee_app?: number;
	contained_item?: CEconItem_Description;
	market_actions?: CEconItem_Action[];
	commodity?: boolean;
	market_tradable_restriction?: number;
	market_marketable_restriction?: number;
	marketable?: boolean;
	tags?: CEconItem_Tag[];
	item_expiration?: string;
	market_buy_country_restriction?: string;
	market_sell_country_restriction?: string;
}

export interface CEconItem_Tag {
	appid?: number;
	category?: string;
	internal_name?: string;
	localized_category_name?: string;
	localized_tag_name?: string;
	color?: string;
}

export interface CEcon_GetInventoryItemsWithDescriptions_Response {
	assets?: CEcon_Asset[];
	descriptions?: CEconItem_Description[];
	missing_assets?: CEcon_Asset[];
	more_items?: boolean;
	last_assetid?: string;
	total_inventory_count?: number;
}

export interface CEcon_GetTradeOfferAccessToken_Request {
	generate_new_token?: boolean;
}

export interface CEcon_GetTradeOfferAccessToken_Response {
	trade_offer_access_token?: string;
}

export interface CEcon_ClientGetItemShopOverlayAuthURL_Request {
	return_url?: string;
}

export interface CEcon_ClientGetItemShopOverlayAuthURL_Response {
	url?: string;
}

export interface CEcon_GetAssetClassInfo_Request {
	language?: string;
	appid?: number;
	classes?: CEcon_GetAssetClassInfo_Request_Class[];
}

export interface CEcon_GetAssetClassInfo_Request_Class {
	classid?: string;
	instanceid?: string;
}

export interface CEcon_GetAssetClassInfo_Response {
	descriptions?: CEconItem_Description[];
}

export interface Econ {
}

///////////////////////////////////////////////
// steammessages_friendmessages.steamclient.proto
///////////////////////////////////////////////

export interface CFriendMessages_GetRecentMessages_Request {
	steamid1?: string;
	steamid2?: string;
	count?: number;
	most_recent_conversation?: boolean;
	rtime32_start_time?: number;
	bbcode_format?: boolean;
	start_ordinal?: number;
	time_last?: number;
	ordinal_last?: number;
}

export interface CFriendMessages_GetRecentMessages_Response {
	messages?: CFriendMessages_GetRecentMessages_Response_FriendMessage[];
	more_available?: boolean;
}

export interface CFriendMessages_GetRecentMessages_Response_FriendMessage {
	accountid?: number;
	timestamp?: number;
	message?: string;
	ordinal?: number;
	reactions?: CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction[];
}

export interface CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction {
	reaction_type?: EMessageReactionType;
	reaction?: string;
	reactors?: number[];
}

export interface CFriendsMessages_GetActiveMessageSessions_Request {
	lastmessage_since?: number;
	only_sessions_with_messages?: boolean;
}

export interface CFriendsMessages_GetActiveMessageSessions_Response {
	message_sessions?: CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession[];
	timestamp?: number;
}

export interface CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession {
	accountid_friend?: number;
	last_message?: number;
	last_view?: number;
	unread_message_count?: number;
}

export interface CFriendMessages_SendMessage_Request {
	steamid?: string;
	chat_entry_type?: number;
	message?: string;
	contains_bbcode?: boolean;
	echo_to_sender?: boolean;
	low_priority?: boolean;
	client_message_id?: string;
}

export interface CFriendMessages_SendMessage_Response {
	modified_message?: string;
	server_timestamp?: number;
	ordinal?: number;
	message_without_bb_code?: string;
}

export interface CFriendMessages_AckMessage_Notification {
	steamid_partner?: string;
	timestamp?: number;
}

export interface CFriendMessages_IsInFriendsUIBeta_Request {
	steamid?: string;
}

export interface CFriendMessages_IsInFriendsUIBeta_Response {
	online_in_friendsui?: boolean;
	has_used_friendsui?: boolean;
}

export interface CFriendMessages_UpdateMessageReaction_Request {
	steamid?: string;
	server_timestamp?: number;
	ordinal?: number;
	reaction_type?: EMessageReactionType;
	reaction?: string;
	is_add?: boolean;
}

export interface CFriendMessages_UpdateMessageReaction_Response {
	reactors?: number[];
}

export interface CFriendMessages_IncomingMessage_Notification {
	steamid_friend?: string;
	chat_entry_type?: number;
	from_limited_account?: boolean;
	message?: string;
	rtime32_server_timestamp?: number;
	ordinal?: number;
	local_echo?: boolean;
	message_no_bbcode?: string;
	low_priority?: boolean;
}

export interface CFriendMessages_MessageReaction_Notification {
	steamid_friend?: string;
	server_timestamp?: number;
	ordinal?: number;
	reactor?: string;
	reaction_type?: EMessageReactionType;
	reaction?: string;
	is_add?: boolean;
}

export interface FriendMessages {
}

export interface FriendMessagesClient {
}

///////////////////////////////////////////////
// steammessages_gamenetworking.steamclient.proto
///////////////////////////////////////////////

export interface CGameNetworking_AllocateFakeIP_Request {
	app_id?: number;
	num_fake_ports?: number;
}

export interface CGameNetworking_AllocateFakeIP_Response {
	fake_ip?: number;
	fake_ports?: number[];
}

export interface CGameNetworking_ReleaseFakeIP_Notification {
	app_id?: number;
	fake_ip?: number;
	fake_ports?: number[];
}

export interface GameNetworking {
}

///////////////////////////////////////////////
// steammessages_gamenetworkingui.proto
///////////////////////////////////////////////

export interface CGameNetworkingUI_GlobalState {
}

export interface CGameNetworkingUI_ConnectionState {
	connection_key?: string;
	appid?: number;
	connection_id_local?: number;
	identity_local?: string;
	identity_remote?: string;
	connection_state?: number;
	start_time?: number;
	close_time?: number;
	close_reason?: number;
	close_message?: string;
	status_loc_token?: string;
	transport_kind?: number;
	sdrpopid_local?: string;
	sdrpopid_remote?: string;
	address_remote?: string;
	p2p_routing?: CMsgSteamDatagramP2PRoutingSummary;
	ping_interior?: number;
	ping_remote_front?: number;
	ping_default_internet_route?: number;
	e2e_quality_local?: CMsgSteamDatagramConnectionQuality;
	e2e_quality_remote?: CMsgSteamDatagramConnectionQuality;
	e2e_quality_remote_instantaneous_time?: string;
	e2e_quality_remote_lifetime_time?: string;
	front_quality_local?: CMsgSteamDatagramConnectionQuality;
	front_quality_remote?: CMsgSteamDatagramConnectionQuality;
	front_quality_remote_instantaneous_time?: string;
	front_quality_remote_lifetime_time?: string;
}

export interface CGameNetworkingUI_Message {
	connection_state?: CGameNetworkingUI_ConnectionState[];
}

///////////////////////////////////////////////
// steammessages_gamenotifications.steamclient.proto
///////////////////////////////////////////////

export interface CGameNotifications_Variable {
	key?: string;
	value?: string;
}

export interface CGameNotifications_LocalizedText {
	token?: string;
	variables?: CGameNotifications_Variable[];
	rendered_text?: string;
}

export interface CGameNotifications_UserStatus {
	steamid?: string;
	state?: string;
	title?: CGameNotifications_LocalizedText;
	message?: CGameNotifications_LocalizedText;
}

export interface CGameNotifications_CreateSession_Request {
	appid?: number;
	context?: string;
	title?: CGameNotifications_LocalizedText;
	users?: CGameNotifications_UserStatus[];
	steamid?: string;
}

export interface CGameNotifications_CreateSession_Response {
	sessionid?: string;
}

export interface CGameNotifications_DeleteSession_Request {
	sessionid?: string;
	appid?: number;
	steamid?: string;
}

export interface CGameNotifications_DeleteSession_Response {
}

export interface CGameNotifications_UpdateSession_Request {
	sessionid?: string;
	appid?: number;
	title?: CGameNotifications_LocalizedText;
	users?: CGameNotifications_UserStatus[];
	steamid?: string;
}

export interface CGameNotifications_UpdateSession_Response {
}

export interface CGameNotifications_EnumerateSessions_Request {
	appid?: number;
	include_all_user_messages?: boolean;
	include_auth_user_message?: boolean;
	language?: string;
}

export interface CGameNotifications_Session {
	sessionid?: string;
	appid?: string;
	context?: string;
	title?: CGameNotifications_LocalizedText;
	time_created?: number;
	time_updated?: number;
	user_status?: CGameNotifications_UserStatus[];
}

export interface CGameNotifications_EnumerateSessions_Response {
	sessions?: CGameNotifications_Session[];
}

export interface CGameNotifications_GetSessionDetails_Request {
	sessions?: CGameNotifications_GetSessionDetails_Request_RequestedSession[];
	appid?: number;
	language?: string;
}

export interface CGameNotifications_GetSessionDetails_Request_RequestedSession {
	sessionid?: string;
	include_auth_user_message?: boolean;
}

export interface CGameNotifications_GetSessionDetails_Response {
	sessions?: CGameNotifications_Session[];
}

export interface GameNotificationSettings {
	appid?: number;
	allow_notifications?: boolean;
}

export interface CGameNotifications_UpdateNotificationSettings_Request {
	game_notification_settings?: GameNotificationSettings[];
}

export interface CGameNotifications_UpdateNotificationSettings_Response {
}

export interface CGameNotifications_OnNotificationsRequested_Notification {
	steamid?: string;
	appid?: number;
}

export interface CGameNotifications_OnUserStatusChanged_Notification {
	steamid?: string;
	sessionid?: string;
	appid?: number;
	status?: CGameNotifications_UserStatus;
	removed?: boolean;
}

export interface GameNotifications {
}

export interface GameNotificationsClient {
}

///////////////////////////////////////////////
// steammessages_gameservers.steamclient.proto
///////////////////////////////////////////////

export interface CGameServers_GetServerList_Request {
	filter?: string;
	limit?: number;
}

export interface CGameServers_GetServerList_Response {
	servers?: CGameServers_GetServerList_Response_Server[];
}

export interface CGameServers_GetServerList_Response_Server {
	addr?: string;
	gameport?: number;
	specport?: number;
	steamid?: string;
	name?: string;
	appid?: number;
	gamedir?: string;
	version?: string;
	product?: string;
	region?: number;
	players?: number;
	max_players?: number;
	bots?: number;
	map?: string;
	secure?: boolean;
	dedicated?: boolean;
	os?: string;
	gametype?: string;
}

export interface CGameServers_GetServerSteamIDsByIP_Request {
	server_ips?: string[];
}

export interface CGameServers_IPsWithSteamIDs_Response {
	servers?: CGameServers_IPsWithSteamIDs_Response_Server[];
}

export interface CGameServers_IPsWithSteamIDs_Response_Server {
	addr?: string;
	steamid?: string;
}

export interface CGameServers_GetServerIPsBySteamID_Request {
	server_steamids?: string[];
}

export interface CGameServers_QueryByFakeIP_Request {
	fake_ip?: number;
	fake_port?: number;
	app_id?: number;
	query_type?: CGameServers_QueryByFakeIP_Request_EQueryType;
}

export enum CGameServers_QueryByFakeIP_Request_EQueryType {
	Query_Invalid = 0,
	Query_Ping = 1,
	Query_Players = 2,
	Query_Rules = 3,
}

export interface CMsgGameServerPingQueryData {
	server_ip?: CMsgIPAddress;
	query_port?: number;
	game_port?: number;
	spectator_port?: number;
	spectator_server_name?: string;
	server_name?: string;
	steamid?: string;
	app_id?: number;
	gamedir?: string;
	map?: string;
	game_description?: string;
	gametype?: string;
	num_players?: number;
	max_players?: number;
	num_bots?: number;
	password?: boolean;
	secure?: boolean;
	dedicated?: boolean;
	version?: string;
	sdr_popid?: number;
	sdr_location_string?: string;
}

export interface CMsgGameServerPlayersQueryData {
	players?: CMsgGameServerPlayersQueryData_Player[];
}

export interface CMsgGameServerPlayersQueryData_Player {
	name?: string;
	score?: number;
	time_played?: number;
}

export interface CMsgGameServerRulesQueryData {
	rules?: CMsgGameServerRulesQueryData_Rule[];
}

export interface CMsgGameServerRulesQueryData_Rule {
	rule?: string;
	value?: string;
}

export interface CGameServers_GameServerQuery_Response {
	ping_data?: CMsgGameServerPingQueryData;
	players_data?: CMsgGameServerPlayersQueryData;
	rules_data?: CMsgGameServerRulesQueryData;
}

export interface GameServerClient_QueryServerData_Request {
}

export interface GameServerClient_QueryServerData_Response {
	ping_data?: CMsgGameServerPingQueryData;
	players_data?: CMsgGameServerPlayersQueryData;
	rules_data?: CMsgGameServerRulesQueryData;
}

export interface GameServers {
}

export interface GameServerClient {
}

///////////////////////////////////////////////
// steammessages_hiddevices.proto
///////////////////////////////////////////////

export interface CHIDDeviceInfo {
	location?: EHIDDeviceLocation;
	path?: string;
	vendor_id?: number;
	product_id?: number;
	serial_number?: string;
	release_number?: number;
	manufacturer_string?: string;
	product_string?: string;
	usage_page?: number;
	usage?: number;
	interface_number?: number;
	ostype?: number;
	is_generic_gamepad?: boolean;
	is_generic_joystick?: boolean;
	caps_bits?: number;
	session_id?: number;
	eControllerType_OBSOLETE?: number;
	is_xinput_device_OBSOLETE?: boolean;
	session_remote_play_together_appid?: number;
}

export interface CHIDDeviceInputReport {
	full_report?: Buffer;
	delta_report?: Buffer;
	delta_report_size?: number;
	delta_report_crc?: number;
}

export interface CHIDMessageToRemote {
	request_id?: number;
	device_open?: CHIDMessageToRemote_DeviceOpen;
	device_close?: CHIDMessageToRemote_DeviceClose;
	device_write?: CHIDMessageToRemote_DeviceWrite;
	device_read?: CHIDMessageToRemote_DeviceRead;
	device_send_feature_report?: CHIDMessageToRemote_DeviceSendFeatureReport;
	device_get_feature_report?: CHIDMessageToRemote_DeviceGetFeatureReport;
	device_get_vendor_string?: CHIDMessageToRemote_DeviceGetVendorString;
	device_get_product_string?: CHIDMessageToRemote_DeviceGetProductString;
	device_get_serial_number_string?: CHIDMessageToRemote_DeviceGetSerialNumberString;
	device_start_input_reports?: CHIDMessageToRemote_DeviceStartInputReports;
	device_request_full_report?: CHIDMessageToRemote_DeviceRequestFullReport;
	device_disconnect?: CHIDMessageToRemote_DeviceDisconnect;
}

export interface CHIDMessageToRemote_DeviceOpen {
	info?: CHIDDeviceInfo;
}

export interface CHIDMessageToRemote_DeviceClose {
	device?: number;
}

export interface CHIDMessageToRemote_DeviceWrite {
	device?: number;
	data?: Buffer;
}

export interface CHIDMessageToRemote_DeviceRead {
	device?: number;
	length?: number;
	timeout_ms?: number;
}

export interface CHIDMessageToRemote_DeviceSendFeatureReport {
	device?: number;
	data?: Buffer;
}

export interface CHIDMessageToRemote_DeviceGetFeatureReport {
	device?: number;
	report_number?: Buffer;
	length?: number;
}

export interface CHIDMessageToRemote_DeviceGetVendorString {
	device?: number;
}

export interface CHIDMessageToRemote_DeviceGetProductString {
	device?: number;
}

export interface CHIDMessageToRemote_DeviceGetSerialNumberString {
	device?: number;
}

export interface CHIDMessageToRemote_DeviceStartInputReports {
	device?: number;
	length?: number;
}

export interface CHIDMessageToRemote_DeviceRequestFullReport {
	device?: number;
}

export interface CHIDMessageToRemote_DeviceDisconnect {
	device?: number;
	disconnectMethod?: EHIDDeviceDisconnectMethod;
	data?: Buffer;
}

export interface CHIDMessageFromRemote {
	update_device_list?: CHIDMessageFromRemote_UpdateDeviceList;
	response?: CHIDMessageFromRemote_RequestResponse;
	reports?: CHIDMessageFromRemote_DeviceInputReports;
	close_device?: CHIDMessageFromRemote_CloseDevice;
	close_all_devices?: CHIDMessageFromRemote_CloseAllDevices;
}

export interface CHIDMessageFromRemote_UpdateDeviceList {
	devices?: CHIDDeviceInfo[];
}

export interface CHIDMessageFromRemote_RequestResponse {
	request_id?: number;
	result?: EResult;
	data?: Buffer;
}

export interface CHIDMessageFromRemote_DeviceInputReports {
	device_reports?: CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport[];
}

export interface CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport {
	device?: number;
	reports?: CHIDDeviceInputReport[];
}

export interface CHIDMessageFromRemote_CloseDevice {
	device?: number;
}

export interface CHIDMessageFromRemote_CloseAllDevices {
}

///////////////////////////////////////////////
// steammessages_inventory.steamclient.proto
///////////////////////////////////////////////

export interface CInventory_GetInventory_Request {
	appid?: number;
	steamid?: string;
}

export interface CInventory_Response {
	etag?: string;
	removeditemids?: string[];
	item_json?: string;
	itemdef_json?: string;
	ticket?: Buffer;
	replayed?: boolean;
}

export interface CInventory_ExchangeItem_Request {
	appid?: number;
	steamid?: string;
	materialsitemid?: string[];
	materialsquantity?: number[];
	outputitemdefid?: string;
}

export interface CInventory_GetEligiblePromoItemDefIDs_Request {
	appid?: number;
	steamid?: string;
}

export interface CInventory_GetEligiblePromoItemDefIDs_Response {
	itemdefids?: string[];
}

export interface CInventory_AddItem_Request {
	appid?: number;
	itemdefid?: string[];
	itempropsjson?: string[];
	steamid?: string;
	notify?: boolean;
	requestid?: string;
	trade_restriction?: boolean;
	is_purchase?: boolean;
}

export interface CInventory_ModifyItems_Request {
	appid?: number;
	steamid?: string;
	updates?: CInventory_ModifyItems_Request_ItemPropertyUpdate[];
	timestamp?: number;
}

export interface CInventory_ModifyItems_Request_ItemPropertyUpdate {
	itemid?: string;
	remove_property?: boolean;
	property_name?: string;
	property_value_bool?: boolean;
	property_value_int?: string;
	property_value_string?: string;
	property_value_float?: number;
}

export interface CInventory_ConsumePlaytime_Request {
	appid?: number;
	itemdefid?: string;
}

export interface CInventory_ConsumeItem_Request {
	appid?: number;
	itemid?: string;
	quantity?: number;
	timestamp?: string;
	steamid?: string;
	requestid?: string;
}

export interface CInventory_DevSetNextDrop_Request {
	appid?: number;
	itemdefid?: string;
	droptime?: string;
}

export interface CInventory_SplitItemStack_Request {
	appid?: number;
	itemid?: string;
	quantity?: number;
	steamid?: string;
}

export interface CInventory_CombineItemStacks_Request {
	appid?: number;
	fromitemid?: string;
	destitemid?: string;
	quantity?: number;
	steamid?: string;
}

export interface CInventory_GetItemDefMeta_Request {
	appid?: number;
}

export interface CInventory_GetItemDefMeta_Response {
	modified?: number;
	digest?: string;
}

export interface CInventory_GetUserPurchaseInfo_Request {
}

export interface CInventory_GetUserPurchaseInfo_Response {
	ecurrency?: number;
}

export interface CInventory_PurchaseInit_Request {
	appid?: number;
	language?: number;
	line_items?: CInventory_PurchaseInit_Request_LineItem[];
}

export interface CInventory_PurchaseInit_Request_LineItem {
	itemdefid?: string;
	quantity?: number;
}

export interface CInventory_PurchaseInit_Response {
	orderid?: string;
	transid?: string;
}

export interface CInventory_PurchaseFinalize_Request {
	appid?: number;
	language?: number;
	orderid?: string;
}

export interface CInventory_InspectItem_Request {
	itemdefid?: string;
	itemid?: string;
	tags?: string;
}

export interface CInventoryClient_NewItems_Notification {
	appid?: number;
	inventory_response?: CInventory_Response;
}

export interface Inventory {
}

export interface InventoryClient {
}

///////////////////////////////////////////////
// steammessages_linkfilter.steamclient.proto
///////////////////////////////////////////////

export interface CCommunity_GetLinkFilterHashPrefixes_Request {
	hit_type?: number;
	count?: number;
	start?: string;
}

export interface CCommunity_GetLinkFilterHashPrefixes_Response {
	hash_prefixes?: number[];
}

export interface CCommunity_GetLinkFilterHashes_Request {
	hit_type?: number;
	count?: number;
	start?: string;
}

export interface CCommunity_GetLinkFilterHashes_Response {
	hashes?: Buffer[];
}

export interface CCommunity_GetLinkFilterListVersion_Request {
	hit_type?: number;
}

export interface CCommunity_GetLinkFilterListVersion_Response {
	version?: string;
	count?: string;
}

export interface CommunityLinkFilter {
}

///////////////////////////////////////////////
// steammessages_lobbymatchmaking.steamclient.proto
///////////////////////////////////////////////

export interface LobbyMatchmakingLegacy_GetLobbyStatus_Request {
	app_id?: number;
	steamid_lobby?: string;
	claim_ownership?: boolean;
	claim_membership?: boolean;
	version_num?: number;
}

export interface LobbyMatchmakingLegacy_GetLobbyStatus_Response {
	app_id?: number;
	steamid_lobby?: string;
	lobby_status?: ELobbyStatus;
}

export interface LobbyMatchmakingLegacy {
}

///////////////////////////////////////////////
// steammessages_market.steamclient.proto
///////////////////////////////////////////////

export interface CEconMarket_IsMarketplaceAllowed_Request {
	webcookie?: string;
}

export interface CEconMarket_IsMarketplaceAllowed_Response {
	allowed?: boolean;
	reason?: number;
	allowed_at_time?: number;
	steamguard_required_days?: number;
	forms_requested?: boolean;
	forms_require_verification?: boolean;
	new_device_cooldown_days?: number;
}

export interface EconMarket {
}

///////////////////////////////////////////////
// steammessages_marketingmessages.steamclient.proto
///////////////////////////////////////////////

export interface CMarketingMessages_GetActiveMarketingMessages_Request {
	country?: string;
}

export interface CMarketingMessageProto {
	gid?: string;
	title?: string;
	type?: EMarketingMessageType;
	visibility?: EMarketingMessageVisibility;
	priority?: number;
	association_type?: EMarketingMessageAssociationType;
	associated_id?: number;
	associated_name?: string;
	start_date?: number;
	end_date?: number;
	country_allow?: string;
	country_deny?: string;
	ownership_restrictions_overridden?: boolean;
	must_own_appid?: number;
	must_not_own_appid?: number;
	must_own_packageid?: number;
	must_not_own_packageid?: number;
	must_have_launched_appid?: number;
	additional_restrictions?: string;
	template_type?: string;
	template_vars?: string;
	flags?: number;
	creator_name?: string;
	template_vars_json?: string;
	additional_restrictions_json?: string;
}

export interface CMarketingMessages_GetActiveMarketingMessages_Response {
	messages?: CMarketingMessageProto[];
	time_next_message_age?: number;
}

export interface CMarketingMessages_GetMarketingMessagesForUser_Request {
	include_seen_messages?: boolean;
	country_code?: string;
	elanguage?: number;
	operating_system?: number;
	client_package_version?: number;
	context?: StoreBrowseContext;
	data_request?: StoreBrowseItemDataRequest;
}

export interface CDisplayMarketingMessage {
	gid?: string;
	title?: string;
	type?: EMarketingMessageType;
	associated_item_id?: StoreItemID;
	associated_item?: StoreItem;
	associated_name?: string;
	template_type?: string;
	template_vars_json?: string;
}

export interface CMarketingMessages_GetMarketingMessagesForUser_Response {
	messages?: CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser[];
}

export interface CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser {
	already_seen?: boolean;
	message?: CDisplayMarketingMessage;
}

export interface CMarketingMessages_DoesUserHavePendingMarketingMessages_Request {
	country_code?: string;
	elanguage?: number;
	operating_system?: number;
	client_package_version?: number;
}

export interface CMarketingMessages_DoesUserHavePendingMarketingMessages_Response {
	has_pending_messages?: boolean;
	pending_message_count?: number;
}

export interface CMarketingMessages_GetDisplayMarketingMessage_Request {
	gid?: string;
	context?: StoreBrowseContext;
	data_request?: StoreBrowseItemDataRequest;
}

export interface CMarketingMessages_GetDisplayMarketingMessage_Response {
	message?: CDisplayMarketingMessage;
}

export interface CMarketingMessages_MarkMessageSeen_Notification {
	gid?: string;
}

export interface CMarketingMessages_GetMarketingMessage_Request {
	gid?: string;
}

export interface CMarketingMessages_GetMarketingMessage_Response {
	message?: CMarketingMessageProto;
}

export interface CMarketingMessages_CreateMarketingMessage_Request {
	message?: CMarketingMessageProto;
	from_json?: boolean;
}

export interface CMarketingMessages_CreateMarketingMessage_Response {
	gid?: string;
}

export interface CMarketingMessages_UpdateMarketingMessage_Request {
	gid?: string;
	message?: CMarketingMessageProto;
	from_json?: boolean;
}

export interface CMarketingMessages_UpdateMarketingMessage_Response {
}

export interface CMarketingMessages_DeleteMarketingMessage_Request {
	gid?: string;
}

export interface CMarketingMessages_DeleteMarketingMessage_Response {
}

export interface CMarketingMessages_FindMarketingMessages_Request {
	lookup_type?: EMarketingMessageLookupType;
	gid?: string;
	message_type?: EMarketingMessageType;
	gidlist?: string[];
	title?: string;
}

export interface CMarketingMessages_FindMarketingMessages_Response {
	messages?: CMarketingMessageProto[];
}

export interface MarketingMessages {
}

export interface StoreItemID {
	appid?: number;
	packageid?: number;
	bundleid?: number;
	tagid?: number;
	creatorid?: number;
}

export interface StoreBrowseContext {
	language?: string;
	elanguage?: number;
	country_code?: string;
	steam_realm?: number;
}

export interface StoreBrowseItemDataRequest {
	include_assets?: boolean;
	include_release?: boolean;
	include_platforms?: boolean;
	include_all_purchase_options?: boolean;
	include_screenshots?: boolean;
	include_trailers?: boolean;
	include_ratings?: boolean;
	include_tag_count?: number;
	include_reviews?: boolean;
	include_basic_info?: boolean;
	include_supported_languages?: boolean;
}

export interface CStoreBrowse_GetItems_Request {
	ids?: StoreItemID[];
	context?: StoreBrowseContext;
	data_request?: StoreBrowseItemDataRequest;
}

export interface StoreGameRating {
	type?: string;
	rating?: string;
	descriptors?: string[];
	interactive_elements?: string;
	required_age?: number;
	use_age_gate?: boolean;
	image_url?: string;
	image_target?: string;
}

export interface StoreItem {
	item_type?: EStoreItemType;
	id?: number;
	success?: number;
	visible?: boolean;
	unvailable_for_country_restriction?: boolean;
	name?: string;
	store_url_path?: string;
	appid?: number;
	type?: EStoreAppType;
	included_types?: EStoreAppType[];
	included_appids?: number[];
	is_free?: boolean;
	is_early_access?: boolean;
	related_items?: StoreItem_RelatedItems;
	content_descriptorids?: EContentDescriptorID[];
	tagids?: number[];
	categories?: StoreItem_Categories;
	reviews?: StoreItem_Reviews;
	basic_info?: StoreItem_BasicInfo;
	tags?: StoreItem_Tag[];
	assets?: StoreItem_Assets;
	release?: StoreItem_ReleaseInfo;
	platforms?: StoreItem_Platforms;
	game_rating?: StoreGameRating;
	best_purchase_option?: StoreItem_PurchaseOption;
	purchase_options?: StoreItem_PurchaseOption[];
	accessories?: StoreItem_PurchaseOption[];
	screenshots?: StoreItem_Screenshots;
	trailers?: StoreItem_Trailers;
	supported_languages?: StoreItem_SupportedLanguage[];
	store_url_path_override?: string;
	free_weekend?: StoreItem_FreeWeekend;
	unlisted?: boolean;
	game_count?: number;
}

export interface StoreItem_RelatedItems {
	parent_appid?: number;
}

export interface StoreItem_Categories {
	supported_player_categoryids?: number[];
	feature_categoryids?: number[];
	controller_categoryids?: number[];
}

export interface StoreItem_Reviews {
	summary_filtered?: StoreItem_Reviews_StoreReviewSummary;
	summary_unfiltered?: StoreItem_Reviews_StoreReviewSummary;
}

export interface StoreItem_Reviews_StoreReviewSummary {
	review_count?: number;
	percent_positive?: number;
	review_score?: EUserReviewScore;
	review_score_label?: string;
}

export interface StoreItem_BasicInfo {
	short_description?: string;
	publishers?: StoreItem_BasicInfo_CreatorHomeLink[];
	developers?: StoreItem_BasicInfo_CreatorHomeLink[];
	franchises?: StoreItem_BasicInfo_CreatorHomeLink[];
	capsule_headline?: string;
}

export interface StoreItem_BasicInfo_CreatorHomeLink {
	name?: string;
	creator_clan_account_id?: number;
}

export interface StoreItem_Tag {
	tagid?: number;
	weight?: number;
}

export interface StoreItem_Assets {
	asset_url_format?: string;
	main_capsule?: string;
	small_capsule?: string;
	header?: string;
	package_header?: string;
	page_background?: string;
	hero_capsule?: string;
	hero_capsule_2x?: string;
	library_capsule?: string;
	library_capsule_2x?: string;
	library_hero?: string;
	library_hero_2x?: string;
	community_icon?: string;
	clan_avatar?: string;
}

export interface StoreItem_ReleaseInfo {
	steam_release_date?: number;
	original_release_date?: number;
	original_steam_release_date?: number;
	is_coming_soon?: boolean;
	is_preload?: boolean;
	custom_release_date_message?: string;
	is_abridged_release_date?: boolean;
	coming_soon_display?: string;
	is_early_access?: boolean;
	mac_release_date?: number;
	linux_release_date?: number;
}

export interface StoreItem_Platforms {
	windows?: boolean;
	mac?: boolean;
	steamos_linux?: boolean;
	vr_support?: StoreItem_Platforms_VRSupport;
	steam_deck_compat_category?: ESteamDeckCompatibilityCategory;
}

export interface StoreItem_Platforms_VRSupport {
	vrhmd?: boolean;
	vrhmd_only?: boolean;
	htc_vive?: boolean;
	oculus_rift?: boolean;
	windows_mr?: boolean;
	valve_index?: boolean;
}

export interface StoreItem_PurchaseOption {
	packageid?: number;
	bundleid?: number;
	purchase_option_name?: string;
	final_price_in_cents?: string;
	original_price_in_cents?: string;
	user_final_price_in_cents?: string;
	formatted_final_price?: string;
	formatted_original_price?: string;
	discount_pct?: number;
	user_discount_pct?: number;
	bundle_discount_pct?: number;
	active_discounts?: StoreItem_PurchaseOption_Discount[];
	user_active_discounts?: StoreItem_PurchaseOption_Discount[];
	inactive_discounts?: StoreItem_PurchaseOption_Discount[];
	user_can_purchase?: boolean;
	user_can_purchase_as_gift?: boolean;
	is_commercial_license?: boolean;
	should_suppress_discount_pct?: boolean;
}

export interface StoreItem_PurchaseOption_Discount {
	discount_amount?: string;
	discount_description?: string;
	discount_end_date?: number;
}

export interface StoreItem_Screenshots {
	all_ages_screenshots?: StoreItem_Screenshots_Screenshot[];
	mature_content_screenshots?: StoreItem_Screenshots_Screenshot[];
}

export interface StoreItem_Screenshots_Screenshot {
	filename?: string;
	ordinal?: number;
}

export interface StoreItem_Trailers {
	highlights?: StoreItem_Trailers_Trailer[];
	other_trailers?: StoreItem_Trailers_Trailer[];
}

export interface StoreItem_Trailers_VideoSource {
	filename?: string;
	type?: string;
}

export interface StoreItem_Trailers_Trailer {
	trailer_name?: string;
	trailer_url_format?: string;
	trailer_480p?: StoreItem_Trailers_VideoSource[];
	trailer_max?: StoreItem_Trailers_VideoSource[];
	microtrailer?: StoreItem_Trailers_VideoSource[];
	screenshot_medium?: string;
	screenshot_full?: string;
	trailer_base_id?: number;
}

export interface StoreItem_SupportedLanguage {
	elanguage?: number;
	supported?: boolean;
	full_audio?: boolean;
	subtitles?: boolean;
}

export interface StoreItem_FreeWeekend {
	start_time?: number;
	end_time?: number;
	text?: string;
}

export interface CStoreBrowse_GetItems_Response {
	store_items?: StoreItem[];
}

export interface CStoreBrowse_GetStoreCategories_Request {
	language?: string;
	elanguage?: number;
}

export interface CStoreBrowse_GetStoreCategories_Response {
	categories?: CStoreBrowse_GetStoreCategories_Response_Category[];
}

export interface CStoreBrowse_GetStoreCategories_Response_Category {
	categoryid?: number;
	type?: EStoreCategoryType;
	internal_name?: string;
	display_name?: string;
	image_url?: string;
	show_in_search?: boolean;
}

export interface CStoreBrowse_GetDLCForApps_Request {
	context?: StoreBrowseContext;
	store_page_filter?: CStorePageFilter;
	appids?: StoreItemID[];
	steamid?: string;
}

export interface CStoreBrowse_GetDLCForApps_Response {
	dlc_data?: CStoreBrowse_GetDLCForApps_Response_DLCData[];
	playtime?: CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp[];
}

export interface CStoreBrowse_GetDLCForApps_Response_DLCData {
	appid?: number;
	parentappid?: number;
	release_date?: number;
	coming_soon?: boolean;
	price?: string;
	discount?: number;
	free?: boolean;
}

export interface CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp {
	appid?: number;
	playtime?: number;
	last_played?: number;
}

export interface CStoreBrowse_GetDLCForAppsSolr_Request {
	context?: StoreBrowseContext;
	appids?: number[];
	flavor?: string;
	count?: number;
	store_page_filter?: CStorePageFilter;
}

export interface CStoreBrowse_GetDLCForAppsSolr_Response {
	dlc_lists?: CStoreBrowse_GetDLCForAppsSolr_Response_DLCList[];
}

export interface CStoreBrowse_GetDLCForAppsSolr_Response_DLCList {
	parent_appid?: number;
	dlc_appids?: number[];
}

export interface StoreBrowse {
}

///////////////////////////////////////////////
// steammessages_offline.steamclient.proto
///////////////////////////////////////////////

export interface COffline_GetOfflineLogonTicket_Request {
	priority?: number;
	perform_encryption?: boolean;
}

export interface COffline_GetOfflineLogonTicket_Response {
	serialized_ticket?: Buffer;
	signature?: Buffer;
	encrypted_ticket?: Offline_Ticket;
}

export interface COffline_GetUnsignedOfflineLogonTicket_Request {
}

export interface COffline_OfflineLogonTicket {
	accountid?: number;
	rtime32_creation_time?: number;
}

export interface COffline_GetUnsignedOfflineLogonTicket_Response {
	ticket?: COffline_OfflineLogonTicket;
}

export interface Offline {
}

///////////////////////////////////////////////
// steammessages_parental.steamclient.proto
///////////////////////////////////////////////

export interface ParentalApp {
	appid?: number;
	is_allowed?: boolean;
}

export interface ParentalSettings {
	steamid?: string;
	applist_base_id?: number;
	applist_base_description?: string;
	applist_base?: ParentalApp[];
	applist_custom?: ParentalApp[];
	passwordhashtype?: number;
	salt?: Buffer;
	passwordhash?: Buffer;
	is_enabled?: boolean;
	enabled_features?: number;
	recovery_email?: string;
	is_site_license_lock?: boolean;
}

export interface CParental_EnableParentalSettings_Request {
	password?: string;
	settings?: ParentalSettings;
	sessionid?: string;
	enablecode?: number;
	steamid?: string;
}

export interface CParental_EnableParentalSettings_Response {
}

export interface CParental_DisableParentalSettings_Request {
	password?: string;
	steamid?: string;
}

export interface CParental_DisableParentalSettings_Response {
}

export interface CParental_GetParentalSettings_Request {
	steamid?: string;
}

export interface CParental_GetParentalSettings_Response {
	settings?: ParentalSettings;
}

export interface CParental_GetSignedParentalSettings_Request {
	priority?: number;
}

export interface CParental_GetSignedParentalSettings_Response {
	serialized_settings?: Buffer;
	signature?: Buffer;
}

export interface CParental_SetParentalSettings_Request {
	password?: string;
	settings?: ParentalSettings;
	new_password?: string;
	sessionid?: string;
	steamid?: string;
}

export interface CParental_SetParentalSettings_Response {
}

export interface CParental_ValidateToken_Request {
	unlock_token?: string;
}

export interface CParental_ValidateToken_Response {
}

export interface CParental_ValidatePassword_Request {
	password?: string;
	session?: string;
	send_unlock_on_success?: boolean;
}

export interface CParental_ValidatePassword_Response {
	token?: string;
}

export interface CParental_LockClient_Request {
	session?: string;
}

export interface CParental_LockClient_Response {
}

export interface CParental_RequestRecoveryCode_Request {
}

export interface CParental_RequestRecoveryCode_Response {
}

export interface CParental_DisableWithRecoveryCode_Request {
	recovery_code?: number;
	steamid?: string;
}

export interface CParental_DisableWithRecoveryCode_Response {
}

export interface CParental_ParentalSettingsChange_Notification {
	serialized_settings?: Buffer;
	signature?: Buffer;
	password?: string;
	sessionid?: string;
}

export interface CParental_ParentalUnlock_Notification {
	password?: string;
	sessionid?: string;
}

export interface CParental_ParentalLock_Notification {
	sessionid?: string;
}

export interface Parental {
}

export interface ParentalClient {
}

///////////////////////////////////////////////
// steammessages_parties.steamclient.proto
///////////////////////////////////////////////

export interface CParties_JoinParty_Request {
	steamid?: string;
	beacon_id?: string;
}

export interface CParties_JoinParty_Response {
	beacon_id?: string;
	connect_string?: string;
}

export interface CParties_BeaconLocation {
	location_type?: number;
	location_id?: string;
}

export interface CParties_CreateBeacon_Request {
	appid?: number;
	num_open_slots?: number;
	locations?: CParties_BeaconLocation[];
	connect_string?: string;
	metadata?: string;
}

export interface CParties_CreateBeacon_Response {
	beacon_id?: string;
}

export interface CParties_OnReservationCompleted_Request {
	beacon_id?: string;
	user_steamid?: string;
}

export interface CParties_OnReservationCompleted_Response {
	beacon_id?: string;
}

export interface CParties_CancelReservation_Request {
	beacon_id?: string;
	user_steamid?: string;
}

export interface CParties_CancelReservation_Response {
	beacon_id?: string;
}

export interface CParties_ChangeNumOpenSlots_Request {
	beacon_id?: string;
	num_open_slots?: number;
}

export interface CParties_ChangeNumOpenSlots_Response {
	beacon_id?: string;
}

export interface CParties_DestroyBeacon_Request {
	beacon_id?: string;
}

export interface CParties_DestroyBeacon_Response {
	beacon_id?: string;
}

export interface Parties {
}

///////////////////////////////////////////////
// steammessages_partnerapps.steamclient.proto
///////////////////////////////////////////////

export interface CPartnerApps_RequestUploadToken_Request {
	filename?: string;
	appid?: number;
}

export interface CPartnerApps_RequestUploadToken_Response {
	upload_token?: string;
	location?: string;
	routing_id?: string;
}

export interface CPartnerApps_FinishUpload_Request {
	upload_token?: string;
	routing_id?: string;
	app_id?: number;
}

export interface CPartnerApps_FinishUploadKVSign_Response {
	signed_installscript?: string;
}

export interface CPartnerApps_FinishUploadLegacyDRM_Request {
	upload_token?: string;
	routing_id?: string;
	app_id?: number;
	flags?: number;
	tool_name?: string;
}

export interface CPartnerApps_FinishUploadLegacyDRM_Response {
	file_id?: string;
}

export interface CPartnerApps_FinishUpload_Response {
}

export interface CPartnerApps_FinishUploadDepot_Request {
	upload_token?: string;
	routing_id?: string;
	app_id?: number;
	depot_id?: number;
	build_flags?: number;
}

export interface CPartnerApps_FinishUploadDepot_Response {
	build_routing_id?: string;
}

export interface CPartnerApps_GetDepotBuildResult_Request {
	upload_token?: string;
	routing_id?: string;
}

export interface CPartnerApps_GetDepotBuildResult_Response {
	manifest_id?: string;
	error_msg?: string;
}

export interface CPartnerApps_FindDRMUploads_Request {
	app_id?: number;
}

export interface CPartnerApps_ExistingDRMUpload {
	file_id?: string;
	app_id?: number;
	actor_id?: number;
	supplied_name?: string;
	flags?: number;
	mod_type?: string;
	timestamp?: number;
	orig_file_id?: string;
}

export interface CPartnerApps_FindDRMUploads_Response {
	uploads?: CPartnerApps_ExistingDRMUpload[];
}

export interface CPartnerApps_Download_Request {
	file_id?: string;
	app_id?: number;
}

export interface CPartnerApps_Download_Response {
	download_url?: string;
	app_id?: number;
}

export interface PartnerApps {
}

///////////////////////////////////////////////
// steammessages_player.steamclient.proto
///////////////////////////////////////////////

export interface CPlayer_GetMutualFriendsForIncomingInvites_Request {
}

export interface CPlayer_IncomingInviteMutualFriendList {
	steamid?: string;
	mutual_friend_account_ids?: number[];
}

export interface CPlayer_GetMutualFriendsForIncomingInvites_Response {
	incoming_invite_mutual_friends_lists?: CPlayer_IncomingInviteMutualFriendList[];
}

export interface CPlayer_GetOwnedGames_Request {
	steamid?: string;
	include_appinfo?: boolean;
	include_played_free_games?: boolean;
	appids_filter?: number[];
	include_free_sub?: boolean;
	skip_unvetted_apps?: boolean;
	language?: string;
	include_extended_appinfo?: boolean;
}

export interface CPlayer_GetOwnedGames_Response {
	game_count?: number;
	games?: CPlayer_GetOwnedGames_Response_Game[];
}

export interface CPlayer_GetOwnedGames_Response_Game {
	appid?: number;
	name?: string;
	playtime_2weeks?: number;
	playtime_forever?: number;
	img_icon_url?: string;
	has_community_visible_stats?: boolean;
	playtime_windows_forever?: number;
	playtime_mac_forever?: number;
	playtime_linux_forever?: number;
	rtime_last_played?: number;
	capsule_filename?: string;
	sort_as?: string;
	has_workshop?: boolean;
	has_market?: boolean;
	has_dlc?: boolean;
	has_leaderboards?: boolean;
	content_descriptorids?: number[];
}

export interface CPlayer_GetPlayNext_Request {
	max_age_seconds?: number;
	ignore_appids?: number[];
}

export interface CPlayer_GetPlayNext_Response {
	last_update_time?: number;
	appids?: number[];
}

export interface CPlayer_GetFriendsGameplayInfo_Request {
	appid?: number;
}

export interface CPlayer_GetFriendsGameplayInfo_Response {
	your_info?: CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo;
	in_game?: CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo[];
	played_recently?: CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo[];
	played_ever?: CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo[];
	owns?: CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo[];
	in_wishlist?: CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo[];
}

export interface CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo {
	steamid?: string;
	minutes_played?: number;
	minutes_played_forever?: number;
}

export interface CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo {
	steamid?: string;
	minutes_played?: number;
	minutes_played_forever?: number;
	in_wishlist?: boolean;
	owned?: boolean;
}

export interface CPlayer_GetGameBadgeLevels_Request {
	appid?: number;
}

export interface CPlayer_GetGameBadgeLevels_Response {
	player_level?: number;
	badges?: CPlayer_GetGameBadgeLevels_Response_Badge[];
}

export interface CPlayer_GetGameBadgeLevels_Response_Badge {
	level?: number;
	series?: number;
	border_color?: number;
}

export interface CPlayer_GetProfileBackground_Request {
	steamid?: string;
	language?: string;
}

export interface ProfileItem {
	communityitemid?: string;
	image_small?: string;
	image_large?: string;
	name?: string;
	item_title?: string;
	item_description?: string;
	appid?: number;
	item_type?: number;
	item_class?: number;
	movie_webm?: string;
	movie_mp4?: string;
	movie_webm_small?: string;
	movie_mp4_small?: string;
	equipped_flags?: number;
	profile_colors?: ProfileItem_ProfileColor[];
}

export interface ProfileItem_ProfileColor {
	style_name?: string;
	color?: string;
}

export interface CPlayer_GetProfileBackground_Response {
	profile_background?: ProfileItem;
}

export interface CPlayer_SetProfileBackground_Request {
	communityitemid?: string;
}

export interface CPlayer_SetProfileBackground_Response {
}

export interface CPlayer_GetMiniProfileBackground_Request {
	steamid?: string;
	language?: string;
}

export interface CPlayer_GetMiniProfileBackground_Response {
	profile_background?: ProfileItem;
}

export interface CPlayer_SetMiniProfileBackground_Request {
	communityitemid?: string;
}

export interface CPlayer_SetMiniProfileBackground_Response {
}

export interface CPlayer_GetAvatarFrame_Request {
	steamid?: string;
	language?: string;
}

export interface CPlayer_GetAvatarFrame_Response {
	avatar_frame?: ProfileItem;
}

export interface CPlayer_SetAvatarFrame_Request {
	communityitemid?: string;
}

export interface CPlayer_SetAvatarFrame_Response {
}

export interface CPlayer_GetAnimatedAvatar_Request {
	steamid?: string;
	language?: string;
}

export interface CPlayer_GetAnimatedAvatar_Response {
	avatar?: ProfileItem;
}

export interface CPlayer_SetAnimatedAvatar_Request {
	communityitemid?: string;
}

export interface CPlayer_SetAnimatedAvatar_Response {
}

export interface CPlayer_GetSteamDeckKeyboardSkin_Request {
	steamid?: string;
	language?: string;
}

export interface CPlayer_GetSteamDeckKeyboardSkin_Response {
	steam_deck_keyboard_skin?: ProfileItem;
}

export interface CPlayer_SetSteamDeckKeyboardSkin_Request {
	communityitemid?: string;
}

export interface CPlayer_SetSteamDeckKeyboardSkin_Response {
}

export interface CPlayer_GetProfileItemsOwned_Request {
	language?: string;
	filters?: ECommunityItemClass[];
}

export interface CPlayer_GetProfileItemsOwned_Response {
	profile_backgrounds?: ProfileItem[];
	mini_profile_backgrounds?: ProfileItem[];
	avatar_frames?: ProfileItem[];
	animated_avatars?: ProfileItem[];
	profile_modifiers?: ProfileItem[];
	steam_deck_keyboard_skins?: ProfileItem[];
	steam_deck_startup_movies?: ProfileItem[];
}

export interface CPlayer_GetProfileItemsEquipped_Request {
	steamid?: string;
	language?: string;
}

export interface CPlayer_GetProfileItemsEquipped_Response {
	profile_background?: ProfileItem;
	mini_profile_background?: ProfileItem;
	avatar_frame?: ProfileItem;
	animated_avatar?: ProfileItem;
	profile_modifier?: ProfileItem;
	steam_deck_keyboard_skin?: ProfileItem;
}

export interface CPlayer_SetEquippedProfileItemFlags_Request {
	communityitemid?: string;
	flags?: number;
}

export interface CPlayer_SetEquippedProfileItemFlags_Response {
}

export interface CPlayer_GetEmoticonList_Request {
}

export interface CPlayer_GetEmoticonList_Response {
	emoticons?: CPlayer_GetEmoticonList_Response_Emoticon[];
}

export interface CPlayer_GetEmoticonList_Response_Emoticon {
	name?: string;
	count?: number;
	time_last_used?: number;
	use_count?: number;
	time_received?: number;
	appid?: number;
}

export interface CPlayer_GetTopAchievementsForGames_Request {
	steamid?: string;
	language?: string;
	max_achievements?: number;
	appids?: number[];
}

export interface CPlayer_GetTopAchievementsForGames_Response {
	games?: CPlayer_GetTopAchievementsForGames_Response_Game[];
}

export interface CPlayer_GetTopAchievementsForGames_Response_Achievement {
	statid?: number;
	bit?: number;
	name?: string;
	desc?: string;
	icon?: string;
	icon_gray?: string;
	hidden?: boolean;
	player_percent_unlocked?: string;
}

export interface CPlayer_GetTopAchievementsForGames_Response_Game {
	appid?: number;
	total_achievements?: number;
	achievements?: CPlayer_GetTopAchievementsForGames_Response_Achievement[];
}

export interface CPlayer_GetAchievementsProgress_Request {
	steamid?: string;
	language?: string;
	appids?: number[];
}

export interface CPlayer_GetAchievementsProgress_Response {
	achievement_progress?: CPlayer_GetAchievementsProgress_Response_AchievementProgress[];
}

export interface CPlayer_GetAchievementsProgress_Response_AchievementProgress {
	appid?: number;
	unlocked?: number;
	total?: number;
	percentage?: number;
	all_unlocked?: boolean;
	cache_time?: number;
}

export interface CPlayer_GetGameAchievements_Request {
	appid?: number;
	language?: string;
}

export interface CPlayer_GetGameAchievements_Response {
	achievements?: CPlayer_GetGameAchievements_Response_Achievement[];
}

export interface CPlayer_GetGameAchievements_Response_Achievement {
	internal_name?: string;
	localized_name?: string;
	localized_desc?: string;
	icon?: string;
	icon_gray?: string;
	hidden?: boolean;
	player_percent_unlocked?: string;
}

export interface CPlayer_GetFavoriteBadge_Request {
	steamid?: string;
}

export interface CPlayer_GetFavoriteBadge_Response {
	has_favorite_badge?: boolean;
	badgeid?: number;
	communityitemid?: string;
	item_type?: number;
	border_color?: number;
	appid?: number;
	level?: number;
}

export interface CPlayer_SetFavoriteBadge_Request {
	communityitemid?: string;
	badgeid?: number;
}

export interface CPlayer_SetFavoriteBadge_Response {
}

export interface CPlayer_GetProfileCustomization_Request {
	steamid?: string;
	include_inactive_customizations?: boolean;
	include_purchased_customizations?: boolean;
}

export interface ProfileCustomizationSlot {
	slot?: number;
	appid?: number;
	publishedfileid?: string;
	item_assetid?: string;
	item_contextid?: string;
	notes?: string;
	title?: string;
	accountid?: number;
	badgeid?: number;
	border_color?: number;
	item_classid?: string;
	item_instanceid?: string;
	ban_check_result?: EBanContentCheckResult;
	replay_year?: number;
}

export interface ProfileCustomization {
	customization_type?: EProfileCustomizationType;
	large?: boolean;
	slots?: ProfileCustomizationSlot[];
	active?: boolean;
	customization_style?: EProfileCustomizationStyle;
	purchaseid?: string;
	level?: number;
}

export interface ProfileTheme {
	theme_id?: string;
	title?: string;
}

export interface ProfilePreferences {
	hide_profile_awards?: boolean;
}

export interface CPlayer_GetProfileCustomization_Response {
	customizations?: ProfileCustomization[];
	slots_available?: number;
	profile_theme?: ProfileTheme;
	purchased_customizations?: CPlayer_GetProfileCustomization_Response_PurchasedCustomization[];
	profile_preferences?: ProfilePreferences;
}

export interface CPlayer_GetProfileCustomization_Response_PurchasedCustomization {
	purchaseid?: string;
	customization_type?: EProfileCustomizationType;
	level?: number;
}

export interface CPlayer_GetPurchasedProfileCustomizations_Request {
	steamid?: string;
}

export interface CPlayer_GetPurchasedProfileCustomizations_Response {
	purchased_customizations?: CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization[];
}

export interface CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization {
	purchaseid?: string;
	customization_type?: EProfileCustomizationType;
}

export interface CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request {
	steamid?: string;
}

export interface CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response {
	purchased_customizations?: CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization[];
	upgraded_customizations?: CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization[];
}

export interface CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization {
	customization_type?: EProfileCustomizationType;
	count?: number;
}

export interface CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization {
	customization_type?: EProfileCustomizationType;
	level?: number;
}

export interface CPlayer_GetProfileThemesAvailable_Request {
}

export interface CPlayer_GetProfileThemesAvailable_Response {
	profile_themes?: ProfileTheme[];
}

export interface CPlayer_SetProfileTheme_Request {
	theme_id?: string;
}

export interface CPlayer_SetProfileTheme_Response {
}

export interface CPlayer_SetProfilePreferences_Request {
	profile_preferences?: ProfilePreferences;
}

export interface CPlayer_SetProfilePreferences_Response {
}

export interface CPlayer_PostStatusToFriends_Request {
	appid?: number;
	status_text?: string;
}

export interface CPlayer_PostStatusToFriends_Response {
}

export interface CPlayer_GetPostedStatus_Request {
	steamid?: string;
	postid?: string;
}

export interface CPlayer_GetPostedStatus_Response {
	accountid?: number;
	postid?: string;
	status_text?: string;
	deleted?: boolean;
	appid?: number;
}

export interface CPlayer_DeletePostedStatus_Request {
	postid?: string;
}

export interface CPlayer_DeletePostedStatus_Response {
}

export interface CPlayer_GetLastPlayedTimes_Request {
	min_last_played?: number;
}

export interface CPlayer_GetLastPlayedTimes_Response {
	games?: CPlayer_GetLastPlayedTimes_Response_Game[];
}

export interface CPlayer_GetLastPlayedTimes_Response_Game {
	appid?: number;
	last_playtime?: number;
	playtime_2weeks?: number;
	playtime_forever?: number;
	first_playtime?: number;
	playtime_windows_forever?: number;
	playtime_mac_forever?: number;
	playtime_linux_forever?: number;
	first_windows_playtime?: number;
	first_mac_playtime?: number;
	first_linux_playtime?: number;
	last_windows_playtime?: number;
	last_mac_playtime?: number;
	last_linux_playtime?: number;
}

export interface CPlayer_GetTimeSSAAccepted_Request {
}

export interface CPlayer_GetTimeSSAAccepted_Response {
	time_ssa_accepted?: number;
	time_ssa_updated?: number;
	time_chinassa_accepted?: number;
}

export interface CPlayer_AcceptSSA_Request {
	agreement_type?: EAgreementType;
	time_signed_utc?: number;
}

export interface CPlayer_AcceptSSA_Response {
}

export interface CPlayer_GetNicknameList_Request {
}

export interface CPlayer_GetNicknameList_Response {
	nicknames?: CPlayer_GetNicknameList_Response_PlayerNickname[];
}

export interface CPlayer_GetNicknameList_Response_PlayerNickname {
	accountid?: number;
	nickname?: string;
}

export interface CPlayer_GetPerFriendPreferences_Request {
}

export interface PerFriendPreferences {
	accountid?: number;
	nickname?: string;
	notifications_showingame?: ENotificationSetting;
	notifications_showonline?: ENotificationSetting;
	notifications_showmessages?: ENotificationSetting;
	sounds_showingame?: ENotificationSetting;
	sounds_showonline?: ENotificationSetting;
	sounds_showmessages?: ENotificationSetting;
	notifications_sendmobile?: ENotificationSetting;
}

export interface CPlayer_GetPerFriendPreferences_Response {
	preferences?: PerFriendPreferences[];
}

export interface CPlayer_SetPerFriendPreferences_Request {
	preferences?: PerFriendPreferences;
}

export interface CPlayer_SetPerFriendPreferences_Response {
}

export interface CPlayer_AddFriend_Request {
	steamid?: string;
}

export interface CPlayer_AddFriend_Response {
	invite_sent?: boolean;
	friend_relationship?: number;
	result?: EResult;
}

export interface CPlayer_RemoveFriend_Request {
	steamid?: string;
}

export interface CPlayer_RemoveFriend_Response {
	friend_relationship?: number;
}

export interface CPlayer_IgnoreFriend_Request {
	steamid?: string;
	unignore?: boolean;
}

export interface CPlayer_IgnoreFriend_Response {
	friend_relationship?: number;
}

export interface CPlayer_GetCommunityPreferences_Request {
}

export interface CPlayer_CommunityPreferences {
	parenthesize_nicknames?: boolean;
	text_filter_setting?: ETextFilterSetting;
	text_filter_ignore_friends?: boolean;
	text_filter_words_revision?: number;
	timestamp_updated?: number;
}

export interface CPlayer_GetCommunityPreferences_Response {
	preferences?: CPlayer_CommunityPreferences;
}

export interface CPlayer_SetCommunityPreferences_Request {
	preferences?: CPlayer_CommunityPreferences;
}

export interface CPlayer_SetCommunityPreferences_Response {
}

export interface CPlayer_GetTextFilterWords_Request {
}

export interface CPlayer_TextFilterWords {
	text_filter_custom_banned_words?: string[];
	text_filter_custom_clean_words?: string[];
	text_filter_words_revision?: number;
}

export interface CPlayer_GetTextFilterWords_Response {
	words?: CPlayer_TextFilterWords;
}

export interface CPlayer_GetNewSteamAnnouncementState_Request {
	language?: number;
}

export interface CPlayer_GetNewSteamAnnouncementState_Response {
	state?: ENewSteamAnnouncementState;
	announcement_headline?: string;
	announcement_url?: string;
	time_posted?: number;
	announcement_gid?: string;
}

export interface CPlayer_UpdateSteamAnnouncementLastRead_Request {
	announcement_gid?: string;
	time_posted?: number;
}

export interface CPlayer_UpdateSteamAnnouncementLastRead_Response {
}

export interface CPlayer_GetPrivacySettings_Request {
}

export interface CPrivacySettings {
	privacy_state?: number;
	privacy_state_inventory?: number;
	privacy_state_gifts?: number;
	privacy_state_ownedgames?: number;
	privacy_state_playtime?: number;
	privacy_state_friendslist?: number;
}

export interface CPlayer_GetPrivacySettings_Response {
	privacy_settings?: CPrivacySettings;
}

export interface CPlayer_GetDurationControl_Request {
	appid?: number;
}

export interface CPlayer_GetDurationControl_Response {
	is_enabled?: boolean;
	seconds?: number;
	seconds_today?: number;
	is_steamchina_account?: boolean;
	is_age_verified?: boolean;
	seconds_allowed_today?: number;
	age_verification_pending?: boolean;
	block_minors?: boolean;
}

export interface CPlayer_RecordDisconnectedPlaytime_Request {
	play_sessions?: CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory[];
}

export interface CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory {
	appid?: number;
	session_time_start?: number;
	seconds?: number;
	offline?: boolean;
}

export interface CPlayer_RecordDisconnectedPlaytime_Response {
}

export interface CPlayer_LastPlayedTimes_Notification {
	games?: CPlayer_GetLastPlayedTimes_Response_Game[];
}

export interface CPlayer_FriendNicknameChanged_Notification {
	accountid?: number;
	nickname?: string;
	is_echo_to_self?: boolean;
}

export interface CPlayer_FriendEquippedProfileItemsChanged_Notification {
	accountid?: number;
}

export interface CPlayer_NewSteamAnnouncementState_Notification {
	state?: ENewSteamAnnouncementState;
	announcement_headline?: string;
	announcement_url?: string;
	time_posted?: number;
	announcement_gid?: string;
}

export interface CPlayer_CommunityPreferencesChanged_Notification {
	preferences?: CPlayer_CommunityPreferences;
}

export interface CPlayer_TextFilterWordsChanged_Notification {
	words?: CPlayer_TextFilterWords;
}

export interface CPlayer_PerFriendPreferencesChanged_Notification {
	accountid?: number;
	preferences?: PerFriendPreferences;
}

export interface CPlayer_PrivacySettingsChanged_Notification {
	privacy_settings?: CPrivacySettings;
}

export interface Player {
}

export interface PlayerClient {
}

///////////////////////////////////////////////
// steammessages_publishedfile.steamclient.proto
///////////////////////////////////////////////

export interface CPublishedFile_Vote_Request {
	publishedfileid?: string;
	vote_up?: boolean;
}

export interface CPublishedFile_Vote_Response {
}

export interface CPublishedFile_Subscribe_Request {
	publishedfileid?: string;
	list_type?: number;
	appid?: number;
	notify_client?: boolean;
}

export interface CPublishedFile_Subscribe_Response {
}

export interface CPublishedFile_Unsubscribe_Request {
	publishedfileid?: string;
	list_type?: number;
	appid?: number;
	notify_client?: boolean;
}

export interface CPublishedFile_Unsubscribe_Response {
}

export interface CPublishedFile_CanSubscribe_Request {
	publishedfileid?: string;
}

export interface CPublishedFile_CanSubscribe_Response {
	can_subscribe?: boolean;
}

export interface CPublishedFile_GetSubSectionData_Request {
	publishedfileid?: string;
	for_table_of_contents?: boolean;
	specific_sectionid?: string;
	desired_revision?: EPublishedFileRevision;
}

export interface PublishedFileSubSection {
	sectionid?: string;
	title?: string;
	description_text?: string;
	sort_order?: number;
}

export interface CPublishedFile_GetSubSectionData_Response {
	sub_sections?: PublishedFileSubSection[];
}

export interface CPublishedFile_Publish_Request {
	appid?: number;
	consumer_appid?: number;
	cloudfilename?: string;
	preview_cloudfilename?: string;
	title?: string;
	file_description?: string;
	file_type?: number;
	consumer_shortcut_name?: string;
	youtube_username?: string;
	youtube_videoid?: string;
	visibility?: number;
	redirect_uri?: string;
	tags?: string[];
	collection_type?: string;
	game_type?: string;
	url?: string;
}

export interface CPublishedFile_Publish_Response {
	publishedfileid?: string;
	redirect_uri?: string;
}

export interface CPublishedFile_GetDetails_Request {
	publishedfileids?: string[];
	includetags?: boolean;
	includeadditionalpreviews?: boolean;
	includechildren?: boolean;
	includekvtags?: boolean;
	includevotes?: boolean;
	short_description?: boolean;
	includeforsaledata?: boolean;
	includemetadata?: boolean;
	language?: number;
	return_playtime_stats?: number;
	appid?: number;
	strip_description_bbcode?: boolean;
	desired_revision?: EPublishedFileRevision;
	includereactions?: boolean;
}

export interface PublishedFileDetails {
	result?: EResult;
	publishedfileid?: string;
	creator?: string;
	creator_appid?: number;
	consumer_appid?: number;
	consumer_shortcutid?: number;
	filename?: string;
	file_size?: string;
	preview_file_size?: string;
	file_url?: string;
	preview_url?: string;
	youtubevideoid?: string;
	url?: string;
	hcontent_file?: string;
	hcontent_preview?: string;
	title?: string;
	file_description?: string;
	short_description?: string;
	time_created?: number;
	time_updated?: number;
	visibility?: number;
	flags?: number;
	workshop_file?: boolean;
	workshop_accepted?: boolean;
	show_subscribe_all?: boolean;
	num_comments_developer?: number;
	num_comments_public?: number;
	banned?: boolean;
	ban_reason?: string;
	banner?: string;
	can_be_deleted?: boolean;
	incompatible?: boolean;
	app_name?: string;
	file_type?: number;
	can_subscribe?: boolean;
	subscriptions?: number;
	favorited?: number;
	followers?: number;
	lifetime_subscriptions?: number;
	lifetime_favorited?: number;
	lifetime_followers?: number;
	lifetime_playtime?: string;
	lifetime_playtime_sessions?: string;
	views?: number;
	image_width?: number;
	image_height?: number;
	image_url?: string;
	spoiler_tag?: boolean;
	shortcutid?: number;
	shortcutname?: string;
	num_children?: number;
	num_reports?: number;
	previews?: PublishedFileDetails_Preview[];
	tags?: PublishedFileDetails_Tag[];
	children?: PublishedFileDetails_Child[];
	kvtags?: PublishedFileDetails_KVTag[];
	vote_data?: PublishedFileDetails_VoteData;
	playtime_stats?: PublishedFileDetails_PlaytimeStats;
	time_subscribed?: number;
	for_sale_data?: PublishedFileDetails_ForSaleData;
	metadata?: string;
	language?: number;
	maybe_inappropriate_sex?: boolean;
	maybe_inappropriate_violence?: boolean;
	content_descriptorids?: EContentDescriptorID[];
	revision_change_number?: string;
	revision?: EPublishedFileRevision;
	available_revisions?: EPublishedFileRevision[];
	reactions?: PublishedFileDetails_Reaction[];
	ban_text_check_result?: EBanContentCheckResult;
}

export interface PublishedFileDetails_Tag {
	tag?: string;
	adminonly?: boolean;
	display_name?: string;
}

export interface PublishedFileDetails_Preview {
	previewid?: string;
	sortorder?: number;
	url?: string;
	size?: number;
	filename?: string;
	youtubevideoid?: string;
	preview_type?: number;
	external_reference?: string;
}

export interface PublishedFileDetails_Child {
	publishedfileid?: string;
	sortorder?: number;
	file_type?: number;
}

export interface PublishedFileDetails_KVTag {
	key?: string;
	value?: string;
}

export interface PublishedFileDetails_VoteData {
	score?: number;
	votes_up?: number;
	votes_down?: number;
}

export interface PublishedFileDetails_ForSaleData {
	is_for_sale?: boolean;
	price_category?: number;
	estatus?: EPublishedFileForSaleStatus;
	price_category_floor?: number;
	price_is_pay_what_you_want?: boolean;
	discount_percentage?: number;
}

export interface PublishedFileDetails_PlaytimeStats {
	playtime_seconds?: string;
	num_sessions?: string;
}

export interface PublishedFileDetails_Reaction {
	reactionid?: number;
	count?: number;
}

export interface CPublishedFile_GetDetails_Response {
	publishedfiledetails?: PublishedFileDetails[];
}

export interface CPublishedFile_GetItemInfo_Request {
	appid?: number;
	last_time_updated?: number;
	workshop_items?: CPublishedFile_GetItemInfo_Request_WorkshopItem[];
}

export interface CPublishedFile_GetItemInfo_Request_WorkshopItem {
	published_file_id?: string;
	time_updated?: number;
	desired_revision?: EPublishedFileRevision;
}

export interface CPublishedFile_GetItemInfo_Response {
	update_time?: number;
	workshop_items?: CPublishedFile_GetItemInfo_Response_WorkshopItemInfo[];
	private_items?: string[];
}

export interface CPublishedFile_GetItemInfo_Response_WorkshopItemInfo {
	published_file_id?: string;
	time_updated?: number;
	manifest_id?: string;
	flags?: number;
}

export interface CPublishedFile_GetUserFiles_Request {
	steamid?: string;
	appid?: number;
	page?: number;
	numperpage?: number;
	type?: string;
	sortmethod?: string;
	privacy?: number;
	requiredtags?: string[];
	excludedtags?: string[];
	required_kv_tags?: CPublishedFile_GetUserFiles_Request_KVTag[];
	filetype?: number;
	creator_appid?: number;
	match_cloud_filename?: string;
	cache_max_age_seconds?: number;
	language?: number;
	taggroups?: CPublishedFile_GetUserFiles_Request_TagGroup[];
	totalonly?: boolean;
	ids_only?: boolean;
	return_vote_data?: boolean;
	return_tags?: boolean;
	return_kv_tags?: boolean;
	return_previews?: boolean;
	return_children?: boolean;
	return_short_description?: boolean;
	return_for_sale_data?: boolean;
	return_metadata?: boolean;
	return_playtime_stats?: number;
	strip_description_bbcode?: boolean;
	return_reactions?: boolean;
	startindex_override?: number;
	desired_revision?: EPublishedFileRevision;
	return_apps?: boolean;
}

export interface CPublishedFile_GetUserFiles_Request_KVTag {
	key?: string;
	value?: string;
}

export interface CPublishedFile_GetUserFiles_Request_TagGroup {
	tags?: string[];
}

export interface CPublishedFile_GetUserFiles_Response {
	total?: number;
	startindex?: number;
	publishedfiledetails?: PublishedFileDetails[];
	apps?: CPublishedFile_GetUserFiles_Response_App[];
}

export interface CPublishedFile_GetUserFiles_Response_App {
	appid?: number;
	name?: string;
	shortcutid?: number;
	private?: boolean;
}

export interface CPublishedFile_AreFilesInSubscriptionList_Request {
	appid?: number;
	publishedfileids?: string[];
	listtype?: number;
	filetype?: number;
	workshopfiletype?: number;
}

export interface CPublishedFile_AreFilesInSubscriptionList_Response {
	files?: CPublishedFile_AreFilesInSubscriptionList_Response_InList[];
}

export interface CPublishedFile_AreFilesInSubscriptionList_Response_InList {
	publishedfileid?: string;
	inlist?: boolean;
}

export interface CPublishedFile_Update_Request {
	appid?: number;
	publishedfileid?: string;
	title?: string;
	file_description?: string;
	visibility?: number;
	tags?: string[];
	filename?: string;
	preview_filename?: string;
	spoiler_tag?: boolean;
	image_width?: number;
	image_height?: number;
}

export interface CPublishedFile_Update_Response {
}

export interface CPublishedFile_Delete_Request {
	publishedfileid?: string;
}

export interface CPublishedFile_Delete_Response {
}

export interface CPublishedFile_GetChangeHistoryEntry_Request {
	publishedfileid?: string;
	timestamp?: number;
	language?: number;
}

export interface CPublishedFile_GetChangeHistoryEntry_Response {
	change_description?: string;
	language?: number;
}

export interface CPublishedFile_GetChangeHistory_Request {
	publishedfileid?: string;
	total_only?: boolean;
	startindex?: number;
	count?: number;
	language?: number;
}

export interface CPublishedFile_GetChangeHistory_Response {
	changes?: CPublishedFile_GetChangeHistory_Response_ChangeLog[];
	total?: number;
}

export interface CPublishedFile_GetChangeHistory_Response_ChangeLog {
	timestamp?: number;
	change_description?: string;
	language?: number;
}

export interface CPublishedFile_RefreshVotingQueue_Request {
	appid?: number;
	matching_file_type?: number;
	tags?: string[];
	match_all_tags?: boolean;
	excluded_tags?: string[];
	desired_queue_size?: number;
	desired_revision?: EPublishedFileRevision;
}

export interface CPublishedFile_RefreshVotingQueue_Response {
}

export interface CPublishedFile_QueryFiles_Request {
	query_type?: number;
	page?: number;
	cursor?: string;
	numperpage?: number;
	creator_appid?: number;
	appid?: number;
	requiredtags?: string[];
	excludedtags?: string[];
	match_all_tags?: boolean;
	required_flags?: string[];
	omitted_flags?: string[];
	search_text?: string;
	filetype?: number;
	child_publishedfileid?: string;
	days?: number;
	include_recent_votes_only?: boolean;
	cache_max_age_seconds?: number;
	language?: number;
	required_kv_tags?: CPublishedFile_QueryFiles_Request_KVTag[];
	taggroups?: CPublishedFile_QueryFiles_Request_TagGroup[];
	date_range_created?: CPublishedFile_QueryFiles_Request_DateRange;
	date_range_updated?: CPublishedFile_QueryFiles_Request_DateRange;
	totalonly?: boolean;
	ids_only?: boolean;
	return_vote_data?: boolean;
	return_tags?: boolean;
	return_kv_tags?: boolean;
	return_previews?: boolean;
	return_children?: boolean;
	return_short_description?: boolean;
	return_for_sale_data?: boolean;
	return_metadata?: boolean;
	return_playtime_stats?: number;
	return_details?: boolean;
	strip_description_bbcode?: boolean;
	desired_revision?: EPublishedFileRevision;
	return_reactions?: boolean;
}

export interface CPublishedFile_QueryFiles_Request_KVTag {
	key?: string;
	value?: string;
}

export interface CPublishedFile_QueryFiles_Request_TagGroup {
	tags?: string[];
}

export interface CPublishedFile_QueryFiles_Request_DateRange {
	timestamp_start?: number;
	timestamp_end?: number;
}

export interface CPublishedFile_QueryFiles_Response {
	total?: number;
	publishedfiledetails?: PublishedFileDetails[];
	next_cursor?: string;
}

export interface CPublishedFile_AddAppRelationship_Request {
	publishedfileid?: string;
	appid?: number;
	relationship?: number;
}

export interface CPublishedFile_AddAppRelationship_Response {
}

export interface CPublishedFile_RemoveAppRelationship_Request {
	publishedfileid?: string;
	appid?: number;
	relationship?: number;
}

export interface CPublishedFile_RemoveAppRelationship_Response {
}

export interface CPublishedFile_GetAppRelationships_Request {
	publishedfileid?: string;
}

export interface CPublishedFile_GetAppRelationships_Response {
	app_relationships?: CPublishedFile_GetAppRelationships_Response_AppRelationship[];
}

export interface CPublishedFile_GetAppRelationships_Response_AppRelationship {
	appid?: number;
	relationship?: number;
}

export interface CPublishedFile_GetAppRelationshipsBatched_Request {
	publishedfileids?: string[];
	filter_relationship?: number;
}

export interface CPublishedFile_GetAppRelationshipsBatched_Response {
	relationships?: CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship[];
}

export interface CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship {
	appid?: number;
	relationship?: number;
}

export interface CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship {
	publishedfileid?: string;
	result?: EResult;
	app_relationships?: CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship[];
}

export interface CPublishedFile_StartPlaytimeTracking_Request {
	appid?: number;
	publishedfileids?: string[];
}

export interface CPublishedFile_StartPlaytimeTracking_Response {
}

export interface CPublishedFile_StopPlaytimeTracking_Request {
	appid?: number;
	publishedfileids?: string[];
}

export interface CPublishedFile_StopPlaytimeTracking_Response {
}

export interface CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request {
	appid?: number;
}

export interface CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response {
}

export interface CPublishedFile_SetPlaytimeForControllerConfigs_Request {
	appid?: number;
	controller_config_usage?: CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage[];
}

export interface CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage {
	publishedfileid?: string;
	seconds_active?: number;
}

export interface CPublishedFile_SetPlaytimeForControllerConfigs_Response {
}

export interface CPublishedFile_AddChild_Request {
	publishedfileid?: string;
	child_publishedfileid?: string;
}

export interface CPublishedFile_AddChild_Response {
}

export interface CPublishedFile_RemoveChild_Request {
	publishedfileid?: string;
	child_publishedfileid?: string;
}

export interface CPublishedFile_RemoveChild_Response {
}

export interface CPublishedFile_GetUserVoteSummary_Request {
	publishedfileids?: string[];
}

export interface CPublishedFile_GetUserVoteSummary_Response {
	summaries?: CPublishedFile_GetUserVoteSummary_Response_VoteSummary[];
}

export interface CPublishedFile_GetUserVoteSummary_Response_VoteSummary {
	publishedfileid?: string;
	vote_for?: boolean;
	vote_against?: boolean;
	reported?: boolean;
}

export interface CPublishedFile_GetItemChanges_Request {
	appid?: number;
	last_time_updated?: number;
	num_items_max?: number;
}

export interface CPublishedFile_GetItemChanges_Response {
	update_time?: number;
	workshop_items?: CPublishedFile_GetItemChanges_Response_WorkshopItemInfo[];
}

export interface CPublishedFile_GetItemChanges_Response_WorkshopItemInfo {
	published_file_id?: string;
	time_updated?: number;
	manifest_id?: string;
}

export interface CPublishedFile_FileSubscribed_Notification {
	published_file_id?: string;
	app_id?: number;
	file_hcontent?: string;
	file_size?: number;
	rtime_subscribed?: number;
	is_depot_content?: boolean;
	rtime_updated?: number;
	revisions?: CPublishedFile_FileSubscribed_Notification_RevisionData[];
}

export interface CPublishedFile_FileSubscribed_Notification_RevisionData {
	revision?: EPublishedFileRevision;
	file_hcontent?: string;
	rtime_updated?: number;
}

export interface CPublishedFile_FileUnsubscribed_Notification {
	published_file_id?: string;
	app_id?: number;
}

export interface CPublishedFile_FileDeleted_Client_Notification {
	published_file_id?: string;
	app_id?: number;
}

export interface PublishedFile {
}

export interface PublishedFileClient {
}

///////////////////////////////////////////////
// steammessages_qms.steamclient.proto
///////////////////////////////////////////////

export interface GameSearchParam {
	key_name?: string;
	value?: string[];
}

export interface CQueuedMatchmaking_SearchForGame_Request {
	appid?: number;
	action?: EGameSearchAction;
	params?: GameSearchParam[];
	player_min?: number;
	player_max?: number;
	steamidlobby?: string;
	searchid?: string;
}

export interface CQueuedMatchmaking_SearchForGame_Response {
	gamesearchresult?: EGameSearchResult;
	searchid?: string;
	seconds_time_estimate?: number;
	poll_frequency?: number;
	count_searching?: number;
	players_in_match?: number;
	players_accepted?: number;
	connect_string?: string;
	steamidhost?: string;
	rtime_match_made?: number;
	rtime_now?: number;
	steamid_canceled_search?: string;
}

export interface CQueuedMatchmakingGameHost_SearchForPlayers_Request {
	appid?: number;
	action?: EGameSearchAction;
	params?: GameSearchParam[];
	player_min?: number;
	player_max?: number;
	player_max_team_size?: number;
	connection_string?: string;
	searchid?: string;
}

export interface PlayerFound {
	steamid?: string;
	action?: EGameSearchAction;
	params?: GameSearchParam[];
	team_number?: number;
}

export interface CQueuedMatchmakingGameHost_SearchForPlayers_Response {
	gamesearchresult?: EGameSearchResult;
	searchid?: string;
	poll_frequency?: number;
	matchid?: string;
	players?: PlayerFound[];
	rtime_match_made?: number;
	rtime_now?: number;
}

export interface PlayerResult {
	steamid?: string;
	value?: number;
}

export interface CQueuedMatchmakingGameHost_SubmitPlayerResult_Request {
	appid?: number;
	matchid?: string;
	player_results?: PlayerResult[];
}

export interface CQueuedMatchmakingGameHost_SubmitPlayerResult_Response {
}

export interface CQueuedMatchmakingGameHost_EndGame_Request {
	appid?: number;
	matchid?: string;
}

export interface CQueuedMatchmakingGameHost_EndGame_Response {
}

export interface QueuedMatchmaking {
}

export interface QueuedMatchmakingGameHost {
}

///////////////////////////////////////////////
// steammessages_remoteclient.proto
///////////////////////////////////////////////

export interface CMsgRemoteClientStatus {
	client_id?: string;
	instance_id?: string;
	status?: CMsgRemoteClientBroadcastStatus;
}

export interface CMsgRemoteClientAppStatus {
	status_updates?: CMsgRemoteClientAppStatus_AppStatus[];
}

export interface CMsgRemoteClientAppStatus_AppUpdateInfo {
	time_update_start?: number;
	bytes_to_download?: string;
	bytes_downloaded?: string;
	bytes_to_process?: string;
	bytes_processed?: string;
	estimated_seconds_remaining?: number;
	update_result?: number;
	update_state?: number;
}

export interface CMsgRemoteClientAppStatus_ShortcutInfo {
	name?: string;
	icon?: string;
	categories?: string[];
	exepath?: string;
}

export interface CMsgRemoteClientAppStatus_AppStatus {
	app_id?: number;
	app_state?: number;
	update_info?: CMsgRemoteClientAppStatus_AppUpdateInfo;
	shortcut_info?: CMsgRemoteClientAppStatus_ShortcutInfo;
	launch_available?: boolean;
}

export interface CMsgRemoteClientStartStream {
	app_id?: number;
	environment?: number;
	gamepad_count?: number;
	launch_option?: number;
	lock_parental_lock?: boolean;
	unlock_parental_lock?: string;
	maximum_resolution_x?: number;
	maximum_resolution_y?: number;
	gamepads?: CMsgRemoteClientStartStream_ReservedGamepad[];
	audio_channel_count?: number;
	supported_transport?: EStreamTransport[];
}

export interface CMsgRemoteClientStartStream_ReservedGamepad {
	controller_type?: number;
	controller_subtype?: number;
}

export interface CMsgRemoteClientStartStreamResponse {
	e_launch_result?: number;
	stream_port?: number;
	launch_options?: number[];
	auth_token?: Buffer;
	transport?: EStreamTransport;
	relay_server?: string;
	launch_task?: string;
	launch_task_detail?: string;
	launch_tasks_done?: number;
	launch_tasks_total?: number;
}

export interface CMsgRemoteClientPing {
}

export interface CMsgRemoteClientPingResponse {
}

export interface CMsgRemoteClientAcceptEULA {
	app_id?: number[];
	eula_id?: string[];
	eula_version?: number[];
}

export interface CMsgRemoteClientGetControllerConfig {
	app_id?: number;
	controller_index?: number;
}

export interface CMsgRemoteClientGetControllerConfigResponse {
	eresult?: EResult;
	config_vdf?: Buffer;
}

export interface CMsgRemoteClientStreamingEnabled {
	enabled: boolean;
}

export interface CMsgRemoteClientBroadcastHeader {
	client_id?: string;
	msg_type?: ERemoteClientBroadcastMsg;
	instance_id?: string;
	device_id?: string;
	device_token?: Buffer;
}

export interface CMsgRemoteClientBroadcastStatus {
	version?: number;
	min_version?: number;
	connect_port?: number;
	hostname?: string;
	enabled_services?: number;
	ostype?: number;
	is64bit?: boolean;
	users?: CMsgRemoteClientBroadcastStatus_User[];
	euniverse?: number;
	timestamp?: number;
	screen_locked?: boolean;
	games_running?: boolean;
	mac_addresses?: string[];
	download_lan_peer_group?: number;
	broadcasting_active?: boolean;
	vr_active?: boolean;
	content_cache_port?: number;
	ip_addresses?: string[];
	public_ip_address?: string;
	remoteplay_active?: boolean;
	supported_services?: number;
	steam_deck?: boolean;
	steam_version?: string;
}

export interface CMsgRemoteClientBroadcastStatus_User {
	steamid?: string;
	auth_key_id?: number;
}

export interface CMsgRemoteClientBroadcastDiscovery {
	seq_num?: number;
	client_ids?: string[];
}

export interface CMsgRemoteClientBroadcastClientIDDeconflict {
	client_ids?: string[];
}

export interface CMsgRemoteDeviceAuthorizationRequest {
	device_token: Buffer;
	device_name?: string;
	encrypted_request: Buffer;
	auth_key?: Buffer;
}

export interface CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket {
	password?: Buffer;
	identifier?: string;
	payload?: Buffer;
	timestamp?: number;
	usage?: CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage;
	device_name?: string;
	device_model?: string;
	device_serial?: string;
	device_provisioning_id?: number;
}

export enum CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage {
	k_EKeyEscrowUsageStreamingDevice = 0,
}

export interface CMsgRemoteDeviceAuthorizationCancelRequest {
}

export interface CMsgRemoteDeviceAuthorizationResponse {
	result: ERemoteDeviceAuthorizationResult;
	steamid?: string;
	auth_key?: Buffer;
	device_token?: Buffer;
}

export interface CMsgRemoteDeviceAuthorizationConfirmed {
	result: ERemoteDeviceAuthorizationResult;
}

export interface CMsgRemoteDeviceStreamingRequest {
	request_id: number;
	maximum_resolution_x?: number;
	maximum_resolution_y?: number;
	audio_channel_count?: number;
	device_version?: string;
	stream_desktop?: boolean;
	device_token?: Buffer;
	pin?: Buffer;
	enable_video_streaming?: boolean;
	enable_audio_streaming?: boolean;
	enable_input_streaming?: boolean;
	network_test?: boolean;
	client_id?: string;
	supported_transport?: EStreamTransport[];
	restricted?: boolean;
	form_factor?: EStreamDeviceFormFactor;
	gamepad_count?: number;
	gamepads?: CMsgRemoteDeviceStreamingRequest_ReservedGamepad[];
	gameid?: string;
	stream_interface?: EStreamInterface;
}

export interface CMsgRemoteDeviceStreamingRequest_ReservedGamepad {
	controller_type?: number;
	controller_subtype?: number;
}

export interface CMsgRemoteDeviceStreamingCancelRequest {
	request_id: number;
}

export interface CMsgRemoteDeviceStreamingProgress {
	request_id: number;
	progress?: number;
}

export interface CMsgRemoteDeviceStreamingResponse {
	request_id: number;
	result: ERemoteDeviceStreamingResult;
	port?: number;
	encrypted_session_key?: Buffer;
	transport?: EStreamTransport;
	relay_server?: string;
	cert?: string;
}

export interface CMsgRemoteDeviceProofRequest {
	challenge: Buffer;
	request_id?: number;
	update_secret?: boolean;
}

export interface CMsgRemoteDeviceProofResponse {
	response: Buffer;
	request_id?: number;
	updated_secret?: boolean;
}

export interface CMsgRemoteDeviceStreamTransportSignal {
	token?: Buffer;
	payload?: Buffer;
}

///////////////////////////////////////////////
// steammessages_remoteclient_discovery.proto
///////////////////////////////////////////////

///////////////////////////////////////////////
// steammessages_remoteclient_service.steamclient.proto
///////////////////////////////////////////////

export interface RemoteClient {
}

export interface RemoteClientSteamClient {
}

export interface CRemoteClient_CreateSession_Request {
}

export interface CRemoteClient_CreateSession_Response {
	session_id?: string;
	euniverse?: number;
}

export interface CRemoteClient_StartPairing_Request {
	session_id?: string;
}

export interface CRemoteClient_StartPairing_Response {
	pin?: number;
}

export interface CRemoteClient_SetPairingInfo_Request {
	session_id?: string;
	device_id?: string;
	request?: Buffer;
}

export interface CRemoteClient_SetPairingInfo_Response {
}

export interface CRemoteClient_GetPairingInfo_Request {
	pin?: number;
}

export interface CRemoteClient_GetPairingInfo_Response {
	session_id?: string;
	device_id?: string;
	request?: Buffer;
}

export interface CRemoteClient_CancelPairing_Request {
	session_id?: string;
}

export interface CRemoteClient_CancelPairing_Response {
}

export interface CRemoteClient_RegisterStatusUpdate_Notification {
	session_id?: string;
	steamid?: string;
	device_id?: string;
}

export interface CRemoteClient_UnregisterStatusUpdate_Notification {
	session_id?: string;
	steamid?: string;
}

export interface CRemoteClient_Online_Notification {
	steamid?: string;
	remote_client_id?: string;
}

export interface CRemoteClient_RemotePacket_Notification {
	session_id?: string;
	steamid?: string;
	payload?: Buffer;
}

export interface CRemoteClient_ReplyPacket_Notification {
	session_id?: string;
	payload?: Buffer;
}

export interface CRemoteClient_GetReplies_Request {
	session_id?: string;
}

export interface CRemoteClient_GetReplies_Response {
	payload?: Buffer[];
}

export interface CRemoteClient_AllocateTURNServer_Request {
	cellid?: number;
	credentials?: string;
}

export interface CRemoteClient_AllocateTURNServer_Response {
	turn_server?: string;
}

export interface CRemoteClient_AllocateRelayServer_Request {
	cellid?: number;
	credentials?: string;
}

export interface CRemoteClient_AllocateRelayServer_Response {
	relay_server?: string;
}

export interface CRemoteClient_AllocateSDR_Request {
	appid?: number;
}

export interface CRemoteClient_AllocateSDR_Response {
}

export interface CRemoteClient_SteamBroadcast_Notification {
	steamid?: string;
	clientid?: string;
	payload?: Buffer;
}

export interface CRemoteClient_SteamToSteam_Notification {
	steamid?: string;
	src_clientid?: string;
	dst_clientid?: string;
	secretid?: number;
	encrypted_payload?: Buffer;
}

export interface CRemotePlay_SessionStarted_Request {
	host_account_id?: number;
	client_account_id?: number;
	appid?: number;
	device_form_factor?: number;
	remote_play_together?: boolean;
	guest_session?: boolean;
}

export interface CRemotePlay_SessionStarted_Response {
	record_id?: string;
}

export interface CRemotePlay_SessionStopped_Notification {
	record_id?: string;
	used_x264?: boolean;
	used_h264?: boolean;
	used_hevc?: boolean;
}

export interface CRemotePlayTogether_Notification {
	steamid?: string;
	group_updated?: CRemotePlayTogether_Notification_GroupUpdated;
}

export interface CRemotePlayTogether_Notification_Player {
	steamid?: string;
	guestid?: number;
	avatar_hash?: Buffer;
	keyboard_enabled?: boolean;
	mouse_enabled?: boolean;
	controller_enabled?: boolean;
}

export interface CRemotePlayTogether_Notification_ControllerSlot_obsolete {
	slotid?: number;
	steamid?: string;
}

export interface CRemotePlayTogether_Notification_ControllerSlot {
	slotid?: number;
	player?: CRemotePlayTogether_Notification_Player;
	controller_type?: number;
}

export interface CRemotePlayTogether_Notification_GroupUpdated {
	host_steamid?: string;
	host_clientid?: string;
	players_obsolete?: string[];
	host_gameid?: string;
	controller_slots_obsolete?: CRemotePlayTogether_Notification_ControllerSlot_obsolete[];
	has_new_players?: boolean;
	player_slots?: CRemotePlayTogether_Notification_Player[];
	controller_slots?: CRemotePlayTogether_Notification_ControllerSlot[];
}

export interface CRemoteClient_CreateRemotePlayTogetherInvitation_Request {
	appid?: number;
	launch_parameters?: string;
}

export interface CRemoteClient_CreateRemotePlayTogetherInvitation_Response {
	invitation_code?: string;
}

export interface CRemoteClient_DeleteRemotePlayTogetherInvitation_Request {
	invitation_code?: string;
}

export interface CRemoteClient_DeleteRemotePlayTogetherInvitation_Response {
}

export interface CRemoteClient_LookupRemotePlayTogetherInvitation_Request {
	invitation_code?: string;
}

export interface CRemoteClient_LookupRemotePlayTogetherInvitation_Response {
	invitation_url?: string;
}

///////////////////////////////////////////////
// steammessages_remoteclient_service_messages.proto
///////////////////////////////////////////////

///////////////////////////////////////////////
// steammessages_remoteplay.proto
///////////////////////////////////////////////

export interface CDiscoveryPingRequest {
	sequence?: number;
	packet_size_requested?: number;
}

export interface CDiscoveryPingResponse {
	sequence?: number;
	packet_size_received?: number;
}

export interface CStreamingClientHandshakeInfo {
	network_test?: number;
}

export interface CClientHandshakeMsg {
	info: CStreamingClientHandshakeInfo;
}

export interface CStreamingServerHandshakeInfo {
	mtu?: number;
}

export interface CServerHandshakeMsg {
	info: CStreamingServerHandshakeInfo;
}

export interface CAuthenticationRequestMsg {
	token?: Buffer;
	version?: EStreamVersion;
	steamid?: string;
}

export interface CAuthenticationResponseMsg {
	result?: CAuthenticationResponseMsg_AuthenticationResult;
	version?: EStreamVersion;
}

export enum CAuthenticationResponseMsg_AuthenticationResult {
	SUCCEEDED = 0,
	FAILED = 1,
}

export interface CKeepAliveMsg {
}

export interface CStartNetworkTestMsg {
	frames?: number;
	framerate?: number;
	bitrate_kbps?: number;
	burst_bitrate_kbps?: number;
	bandwidth_test?: boolean;
}

export interface CStreamVideoMode {
	width: number;
	height: number;
	refresh_rate?: number;
	refresh_rate_numerator?: number;
	refresh_rate_denominator?: number;
}

export interface CStreamingClientCaps {
	system_info?: string;
	system_can_suspend?: boolean;
	maximum_decode_bitrate_kbps?: number;
	maximum_burst_bitrate_kbps?: number;
	supports_video_hevc?: boolean;
	disable_steam_store?: boolean;
	disable_client_cursor?: boolean;
	disable_intel_hardware_encoding?: boolean;
	disable_amd_hardware_encoding?: boolean;
	disable_nvidia_hardware_encoding?: boolean;
	form_factor?: number;
	has_on_screen_keyboard?: boolean;
	supported_colorspaces?: EStreamColorspace[];
}

export interface CStreamingClientConfig {
	quality?: EStreamQualityPreference;
	maximum_resolution_x?: number;
	maximum_resolution_y?: number;
	maximum_framerate_numerator?: number;
	maximum_framerate_denominator?: number;
	maximum_bitrate_kbps?: number;
	enable_hardware_decoding?: boolean;
	enable_performance_overlay?: boolean;
	enable_video_streaming?: boolean;
	enable_audio_streaming?: boolean;
	enable_input_streaming?: boolean;
	audio_channels?: number;
	enable_video_hevc?: boolean;
	enable_performance_icons?: boolean;
	enable_microphone_streaming?: boolean;
	controller_overlay_hotkey?: string;
	enable_touch_controller_OBSOLETE?: boolean;
	p2p_scope?: EStreamP2PScope;
	enable_audio_uncompressed?: boolean;
}

export interface CStreamingServerConfig {
	change_desktop_resolution?: boolean;
	dynamically_adjust_resolution?: boolean;
	enable_capture_nvfbc?: boolean;
	enable_hardware_encoding_nvidia?: boolean;
	enable_hardware_encoding_amd?: boolean;
	enable_hardware_encoding_intel?: boolean;
	software_encoding_threads?: number;
	enable_traffic_priority?: boolean;
	host_play_audio?: EStreamHostPlayAudioPreference;
}

export interface CNegotiatedConfig {
	reliable_data?: boolean;
	selected_audio_codec?: EStreamAudioCodec;
	selected_video_codec?: EStreamVideoCodec;
	available_video_modes?: CStreamVideoMode[];
	enable_remote_hid?: boolean;
	enable_touch_input?: boolean;
	disable_client_cursor?: boolean;
}

export interface CNegotiationInitMsg {
	reliable_data?: boolean;
	supported_audio_codecs?: EStreamAudioCodec[];
	supported_video_codecs?: EStreamVideoCodec[];
	supports_remote_hid?: boolean;
	supports_touch_input?: boolean;
}

export interface CNegotiationSetConfigMsg {
	config: CNegotiatedConfig;
	streaming_client_config?: CStreamingClientConfig;
	streaming_client_caps?: CStreamingClientCaps;
}

export interface CNegotiationCompleteMsg {
}

export interface CStartAudioDataMsg {
	channel: number;
	codec?: EStreamAudioCodec;
	codec_data?: Buffer;
	frequency?: number;
	channels?: number;
}

export interface CStopAudioDataMsg {
}

export interface CStartVideoDataMsg {
	channel: number;
	codec?: EStreamVideoCodec;
	codec_data?: Buffer;
	width?: number;
	height?: number;
}

export interface CStopVideoDataMsg {
}

export interface CStartNeptuneDataMsg {
	channel: number;
}

export interface CStopNeptuneDataMsg {
}

export interface CRecordedInput {
	type?: EStreamControlMessage;
	timestamp?: number;
	finger_down?: CInputTouchFingerDownMsg;
	finger_motion?: CInputTouchFingerMotionMsg;
	finger_up?: CInputTouchFingerUpMsg;
	mouse_motion?: CInputMouseMotionMsg;
	mouse_wheel?: CInputMouseWheelMsg;
	mouse_down?: CInputMouseDownMsg;
	mouse_up?: CInputMouseUpMsg;
	key_down?: CInputKeyDownMsg;
	key_up?: CInputKeyUpMsg;
	text?: CInputTextMsg;
	hid?: CRemoteHIDMsg;
}

export interface CRecordedInputStream {
	entries?: CRecordedInput[];
}

export interface CInputLatencyTestMsg {
	input_mark: number;
	color?: number;
}

export interface CInputTouchFingerDownMsg {
	input_mark?: number;
	fingerid?: string;
	x_normalized?: number;
	y_normalized?: number;
}

export interface CInputTouchFingerMotionMsg {
	input_mark?: number;
	fingerid?: string;
	x_normalized?: number;
	y_normalized?: number;
}

export interface CInputTouchFingerUpMsg {
	input_mark?: number;
	fingerid?: string;
	x_normalized?: number;
	y_normalized?: number;
}

export interface CInputMouseMotionMsg {
	input_mark?: number;
	x_normalized?: number;
	y_normalized?: number;
	dx?: number;
	dy?: number;
}

export interface CInputMouseWheelMsg {
	input_mark?: number;
	direction: EStreamMouseWheelDirection;
}

export interface CInputMouseDownMsg {
	input_mark?: number;
	button: EStreamMouseButton;
}

export interface CInputMouseUpMsg {
	input_mark?: number;
	button: EStreamMouseButton;
}

export interface CInputKeyDownMsg {
	input_mark?: number;
	scancode: number;
}

export interface CInputKeyUpMsg {
	input_mark?: number;
	scancode: number;
}

export interface CInputTextMsg {
	input_mark?: number;
	text_utf8: string;
}

export interface CSetTitleMsg {
	text?: string;
}

export interface CSetCaptureSizeMsg {
	width?: number;
	height?: number;
}

export interface CSetIconMsg {
	width?: number;
	height?: number;
	image?: Buffer;
}

export interface CSetFlashStateMsg {
	flags?: number;
	count?: number;
	timeout_ms?: number;
}

export interface CShowCursorMsg {
	x_normalized?: number;
	y_normalized?: number;
}

export interface CHideCursorMsg {
}

export interface CSetCursorMsg {
	cursor_id: string;
}

export interface CGetCursorImageMsg {
	cursor_id: string;
}

export interface CSetCursorImageMsg {
	cursor_id: string;
	width?: number;
	height?: number;
	hot_x?: number;
	hot_y?: number;
	image?: Buffer;
}

export interface CVideoDecoderInfoMsg {
	info?: string;
	threads?: number;
}

export interface CVideoEncoderInfoMsg {
	info?: string;
}

export interface CPauseMsg {
}

export interface CResumeMsg {
}

export interface CEnableHighResCaptureMsg {
}

export interface CDisableHighResCaptureMsg {
}

export interface CEnableNeptuneDataMsg {
}

export interface CDisableNeptuneDataMsg {
}

export interface CToggleMagnificationMsg {
}

export interface CSetCapslockMsg {
	pressed?: boolean;
}

export interface CStreamingKeymapEntry {
	scancode?: number;
	normal_keycode?: number;
	shift_keycode?: number;
	capslock_keycode?: number;
	shift_capslock_keycode?: number;
	altgr_keycode?: number;
	altgr_shift_keycode?: number;
	altgr_capslock_keycode?: number;
	altgr_shift_capslock_keycode?: number;
}

export interface CStreamingKeymap {
	entries?: CStreamingKeymapEntry[];
}

export interface CSetKeymapMsg {
	keymap?: CStreamingKeymap;
}

export interface CStopRequest {
}

export interface CQuitRequest {
}

export interface CDeleteCursorMsg {
	cursor_id: string;
}

export interface CSetStreamingClientConfig {
	config: CStreamingClientConfig;
}

export interface CSetQoSMsg {
	use_qos: boolean;
}

export interface CSetTargetFramerateMsg {
	framerate: number;
	reasons?: number;
	framerate_numerator?: number;
	framerate_denominator?: number;
}

export interface CSetTargetBitrateMsg {
	bitrate: number;
}

export interface COverlayEnabledMsg {
	enabled: boolean;
}

export interface CSetGammaRampMsg {
	gamma_ramp?: Buffer;
}

export interface CSetActivityMsg {
	activity?: EStreamActivity;
	appid?: number;
	gameid?: string;
	game_name?: string;
}

export interface CSystemSuspendMsg {
}

export interface CVirtualHereRequestMsg {
	hostname?: string;
}

export interface CVirtualHereReadyMsg {
	licensed_device_count?: number;
}

export interface CVirtualHereShareDeviceMsg {
	device_address?: string;
}

export interface CSetSpectatorModeMsg {
	enabled?: boolean;
}

export interface CRemoteHIDMsg {
	data?: Buffer;
	active_input?: boolean;
}

export interface CTouchConfigActiveMsg {
	appid?: number;
	revision?: number;
	creator?: string;
}

export interface CGetTouchConfigDataMsg {
	appid?: number;
}

export interface CSetTouchConfigDataMsg {
	appid?: number;
	revision?: number;
	data?: Buffer;
	layout?: Buffer;
	creator?: string;
}

export interface CSaveTouchConfigLayoutMsg {
	appid?: number;
	layout?: Buffer;
}

export interface CTouchActionSetActiveMsg {
	appid?: number;
	actionset_id?: number;
}

export interface CTouchActionSetLayerAddedMsg {
	appid?: number;
	actionset_id?: number;
}

export interface CTouchActionSetLayerRemovedMsg {
	appid?: number;
	actionset_id?: number;
}

export interface CGetTouchIconDataMsg {
	appid?: number;
	icon?: string;
}

export interface CSetTouchIconDataMsg {
	appid?: number;
	icon?: string;
	data?: Buffer;
}

export interface CRemotePlayTogetherGroupUpdateMsg {
	players?: CRemotePlayTogetherGroupUpdateMsg_Player[];
	player_index?: number;
	miniprofile_location?: string;
	game_name?: string;
	avatar_location?: string;
}

export interface CRemotePlayTogetherGroupUpdateMsg_Player {
	accountid?: number;
	guestid?: number;
	keyboard_enabled?: boolean;
	mouse_enabled?: boolean;
	controller_enabled?: boolean;
	controller_slots?: number[];
	avatar_hash?: Buffer;
}

export interface CSetInputTemporarilyDisabledMsg {
	disabled?: boolean;
}

export interface CSetQualityOverrideMsg {
	value?: number;
}

export interface CSetBitrateOverrideMsg {
	value?: number;
}

export interface CShowOnScreenKeyboardMsg {
}

export interface CControllerPersonalizationUpdateMsg {
	controller_path?: string;
	controller_name?: string;
	reverse_diamond_button_layout?: boolean;
}

export interface CStreamDataLostMsg {
	packets?: number[];
}

export interface CAudioFormat {
	format: EAudioFormat;
	frequency?: number;
	channels?: number;
}

export interface CVideoFormat {
	format: EVideoFormat;
	width?: number;
	height?: number;
}

export interface CFrameEvent {
	event_id: EStreamFrameEvent;
	timestamp: number;
}

export interface CFrameStats {
	frame_id: number;
	input_mark?: number;
	events?: CFrameEvent[];
	result: EStreamFrameResult;
	frame_start_delta?: number;
	frame_display_delta?: number;
	ping_time?: number;
	server_bitrate?: number;
	client_bitrate?: number;
	link_bandwidth?: number;
	packet_loss?: number;
	frame_size?: number;
}

export interface CFrameStatAccumulatedValue {
	stat_type: EFrameAccumulatedStat;
	count: number;
	average: number;
	stddev?: number;
}

export interface CFrameStatsListMsg {
	data_type: EStreamingDataType;
	stats?: CFrameStats[];
	accumulated_stats?: CFrameStatAccumulatedValue[];
	latest_frame_id: number;
}

export interface CStreamingSessionStats {
	frame_loss_percentage?: number;
	average_network_time_ms?: number;
	stddev_network_time_ms?: number;
}

export interface CDebugDumpMsg {
	screenshot?: Buffer;
}

export interface CLogMsg {
	type?: number;
	message?: string;
}

export interface CLogUploadMsg {
	type?: ELogFileType;
	data?: Buffer;
}

export interface CTransportSignalMsg {
	webrtc?: CTransportSignalMsg_WebRTCMessage;
	sdr?: Buffer[];
}

export interface CTransportSignalMsg_WebRTCMessage {
	greeting?: boolean;
	offer?: string;
	answer?: string;
	candidate?: CTransportSignalMsg_WebRTCMessage_Candidate;
}

export interface CTransportSignalMsg_WebRTCMessage_Candidate {
	sdp_mid?: string;
	sdp_mline_index?: number;
	candidate?: string;
}

export interface CControllerConfigMsg {
	type: EStreamControllerConfigMsg;
	controllerPath?: string;
	appid?: number;
	personalizationResponse?: CControllerConfigMsg_ControllerPersonalizationResponse;
	configResponse?: CControllerConfigMsg_ControllerConfigResponse[];
	activeConfigChangeMsg?: CControllerConfigMsg_ControllerActiveConfigMsg;
}

export interface CControllerConfigMsg_ControllerConfigResponse {
	appid?: number;
	configURL?: string;
	controllerType?: number;
	controllerData?: string;
	selectionOrder?: number;
	actionBlock?: boolean;
}

export interface CControllerConfigMsg_ControllerPersonalizationResponse {
	personalizationData?: string;
}

export interface CControllerConfigMsg_ControllerActiveConfigChangeResponse {
	configURL?: string;
	controllerType?: number;
	controllerData?: string;
	selectionOrder?: number;
}

export interface CControllerConfigMsg_ControllerActiveConfigMsg {
	appid?: number;
	configURL?: string;
	controllerType?: number;
	controllerData?: string;
}

///////////////////////////////////////////////
// steammessages_secrets.steamclient.proto
///////////////////////////////////////////////

export interface CKeyEscrow_Request {
	rsa_oaep_sha_ticket?: Buffer;
	password?: Buffer;
	usage?: EKeyEscrowUsage;
	device_name?: string;
}

export interface CKeyEscrow_Ticket {
	password?: Buffer;
	identifier?: string;
	payload?: Buffer;
	timestamp?: number;
	usage?: EKeyEscrowUsage;
	device_name?: string;
	device_model?: string;
	device_serial?: string;
	device_provisioning_id?: number;
}

export interface CKeyEscrow_Response {
	ticket?: CKeyEscrow_Ticket;
}

export interface Secrets {
}

///////////////////////////////////////////////
// steammessages_shader.steamclient.proto
///////////////////////////////////////////////

export interface CShader_RegisterShader_Request {
	appid?: number;
	gpu_desc?: string;
	driver_desc?: string;
	shaders?: CShader_RegisterShader_Request_Shader[];
}

export interface CShader_RegisterShader_Request_Shader {
	cache_key_sha?: Buffer;
	shader_code_sha?: Buffer;
}

export interface CShader_RegisterShader_Response {
	requested_codeids?: number[];
}

export interface CShader_SendShader_Request {
	appid?: number;
	shaders?: CShader_SendShader_Request_ShaderCode[];
}

export interface CShader_SendShader_Request_ShaderCode {
	shader_code_sha?: Buffer;
	shader_code?: Buffer;
}

export interface CShader_SendShader_Response {
}

export interface CShader_GetBucketManifest_Request {
	appid?: number;
	gpu_desc?: string;
	driver_desc?: string;
}

export interface CShader_GetBucketManifest_Response {
	manifestid?: string;
	depotsize?: string;
	bucketid?: string;
}

export interface CShader_GetStaleBucket_Request {
	gpu_desc?: string;
	driver_desc?: string;
}

export interface CShader_GetStaleBucket_Response {
	bucketid?: string;
	appid?: number;
	manifestid?: string;
	gpu_desc?: string;
	driver_desc?: string;
	depot_encryption_key?: Buffer;
}

export interface CShader_ReportExternalBuild_Request {
	appid?: number;
	gpu_desc?: string;
	driver_desc?: string;
	manifestid?: string;
	source_gpu_desc?: string;
	source_driver_desc?: string;
	depotsize?: string;
}

export interface CShader_ReportExternalBuild_Response {
}

export interface Shader {
}

///////////////////////////////////////////////
// steammessages_sitelicenseclient.proto
///////////////////////////////////////////////

export interface CMsgClientSiteInfo {
	site_id?: string;
	site_name?: string;
	allow_cached_credentials?: boolean;
}

export interface CMsgClientSiteLicenseCheckout {
	appid?: number;
}

export interface CMsgClientSiteLicenseCheckoutResponse {
	eresult?: EResult;
}

export interface CMsgClientSiteLicenseGetAvailableSeats {
	appid?: number;
}

export interface CMsgClientSiteLicenseGetAvailableSeatsResponse {
	eresult?: EResult;
	seats?: number;
}

export interface CMsgClientSiteLicenseGetContentCacheInfo {
}

export interface CMsgClientSiteLicenseGetContentCacheInfoResponse {
	use_cache?: boolean;
	ipv4_address?: number;
	port_number?: number;
	p2p_group?: number;
	ip_address?: string;
}

///////////////////////////////////////////////
// steammessages_siteserverui.proto
///////////////////////////////////////////////

export interface SiteServerUI_Login_Request {
	username?: string;
	password?: string;
	steamguardcode?: string;
	remember_password?: boolean;
}

export interface SiteServerUI_Login_Response {
	logon_state?: number;
	logon_eresult?: number;
}

export interface SiteServerUI_LoginStatus_Request {
}

export interface SiteServerUI_LoginStatus_Response {
	username?: string;
	cached_credentials?: boolean;
	logon_state?: number;
	logon_eresult?: number;
}

export interface SiteServerUI_CancelLogin_Request {
}

export interface SiteServerUI_CancelLogin_Response {
	logon_state?: number;
	logon_eresult?: number;
}

export interface SiteServerUI_Logout_Request {
}

export interface SiteServerUI_Logout_Response {
	logon_state?: number;
	logout_eresult?: number;
}

export interface SiteServerUI_Quit_Request {
	restart?: boolean;
}

export interface SiteServerUI_Quit_Response {
}

export interface SiteServerUI_Status_Request {
}

export interface SiteServerUI_Status_Response {
	logon_state?: number;
	logon_eresult?: number;
	connected?: boolean;
	cache_enabled?: boolean;
	acct_status?: number;
}

export interface SiteServerUI_GetLanguage_Request {
}

export interface SiteServerUI_GetLanguage_Response {
	language?: string;
}

export interface SiteServerUI_SetLanguage_Request {
	language?: string;
}

export interface SiteServerUI_SetLanguage_Response {
}

export interface SiteServerUI_ClientStatus_Request {
}

export interface SiteServerUI_ClientStatus_Response {
	clients?: SiteServerUI_ClientStatus_Response_ClientInfo[];
	payments?: SiteServerUI_ClientStatus_Response_Payment[];
}

export interface SiteServerUI_ClientStatus_Response_ClientInfo {
	ip?: number;
	hostname?: string;
	connected?: boolean;
	instance_id?: string;
}

export interface SiteServerUI_ClientStatus_Response_Payment {
	transid?: string;
	steamid?: string;
	amount?: string;
	time_created?: number;
	purchase_status?: number;
	hostname?: string;
	persona_name?: string;
	profile_url?: string;
	avatar_url?: string;
}

export interface SiteServerUI_ContentCacheStatus_Request {
}

export interface SiteServerUI_ContentCacheStatus_Response {
	enabled?: boolean;
	port?: number;
	cache_location?: string;
	max_size_gb?: number;
	p2p_enabled?: boolean;
	explicit_ip_address?: string;
	external_process?: boolean;
	current_size_gb?: number;
	current_bw?: string;
	total_bytes_served?: string;
}

export interface SiteServerUI_ContentCacheConfig_Request {
	enabled?: boolean;
	port?: number;
	cache_location?: string;
	max_size_gb?: number;
	p2p_enabled?: boolean;
	external_process?: boolean;
	explicit_ip_address?: string;
}

export interface SiteServerUI_ContentCacheConfig_Response {
}

///////////////////////////////////////////////
// steammessages_site_license.steamclient.proto
///////////////////////////////////////////////

export interface CSiteManagerClient_IncomingClient_Request {
	site_instanceid?: string;
	client_steamid?: string;
	client_local_ip?: number;
	connection_key?: Buffer;
}

export interface CSiteManagerClient_IncomingClient_Response {
}

export interface CSiteLicense_ClientSeatCheckout_Notification {
	appid?: number;
	eresult?: EResult;
}

export interface CSiteManagerClient_TrackedPayments_Notification {
	site_id?: string;
	payments?: CSiteManagerClient_TrackedPayments_Notification_Payment[];
}

export interface CSiteManagerClient_TrackedPayments_Notification_Payment {
	transid?: string;
	steamid?: string;
	amount?: string;
	ecurrency?: number;
	time_created?: number;
	purchase_status?: number;
	machine_name?: string;
	persona_name?: string;
	profile_url?: string;
	avatar_url?: string;
}

export interface CSiteLicense_InitiateAssociation_Request {
	site_steamid?: string;
	site_instanceid?: string;
	client_local_ip?: number;
}

export interface CSiteLicense_InitiateAssociation_Response {
	connection_key?: Buffer;
}

export interface CSiteLicense_LCSAuthenticate_Request {
	instanceid?: string;
}

export interface CSiteLicense_LCSAuthenticate_Response {
	site_id?: string;
	site_name?: string;
	new_session?: boolean;
	no_site_licenses?: boolean;
}

export interface CSiteLicense_LCSAssociateUser_Request {
	steamid?: string;
	local_ip?: number;
	instanceid?: string;
	machine_name?: string;
}

export interface CSiteLicense_LCSAssociateUser_Response {
}

export interface CSiteLicense_ClientSeatCheckout_Request {
	steamid?: string;
	instanceid?: string;
	appid?: number;
}

export interface CSiteLicense_ClientSeatCheckout_Response {
}

export interface CSiteLicense_ClientGetAvailableSeats_Request {
	steamid?: string;
	instanceid?: string;
	appid?: number;
}

export interface CSiteLicense_ClientGetAvailableSeats_Response {
	available_seats?: number;
}

export interface SiteManagerClient {
}

export interface SiteLicense {
}

///////////////////////////////////////////////
// steammessages_star.steamclient.proto
///////////////////////////////////////////////

export interface CSTAR_KeyValueQuery {
	key?: string;
	value?: string;
}

export interface CSTAR_GlyphQueryParams {
	bundle_id?: string;
	queries?: CSTAR_KeyValueQuery[];
}

export interface CSTAR_ReadGlyphData_Request {
	query_params?: CSTAR_GlyphQueryParams;
	last_modified_time_lower_limit?: string;
}

export interface CSTAR_GlyphData {
	glyph_guid?: Buffer;
	glyph_last_modified?: string;
	glyph_json_data?: string;
}

export interface CSTAR_WriteGlyphData_Request {
	bundle_id?: string;
	glyph_data?: CSTAR_GlyphData[];
}

export interface CSTAR_Request {
	read_glyph_data?: CSTAR_ReadGlyphData_Request;
	write_glyph_data?: CSTAR_WriteGlyphData_Request;
}

export interface CSTAR_ReadGlyphData_Response {
	bundle_id?: string;
	glyph_data?: CSTAR_GlyphData[];
}

export interface CSTAR_WriteGlyphData_Response {
	result?: E_STAR_GlyphWriteResult[];
}

export interface CSTAR_Response {
	read_glyph_data?: CSTAR_ReadGlyphData_Response;
	write_glyph_data?: CSTAR_WriteGlyphData_Response;
}

export interface STAR {
}

///////////////////////////////////////////////
// steammessages_steamtv.steamclient.proto
///////////////////////////////////////////////

export interface CSteamTV_CreateBroadcastChannel_Request {
	unique_name?: string;
}

export interface CSteamTV_CreateBroadcastChannel_Response {
	broadcast_channel_id?: string;
}

export interface CSteamTV_GetBroadcastChannelID_Request {
	unique_name?: string;
}

export interface CSteamTV_GetBroadcastChannelID_Response {
	broadcast_channel_id?: string;
	unique_name?: string;
	steamid?: string;
}

export interface CSteamTV_SetBroadcastChannelProfile_Request {
	broadcast_channel_id?: string;
	name?: string;
	language?: string;
	headline?: string;
	summary?: string;
	avatar_hash?: string;
	schedule?: string;
	rules?: string;
	panels?: string;
}

export interface CSteamTV_SetBroadcastChannelProfile_Response {
}

export interface CSteamTV_GetBroadcastChannelProfile_Request {
	broadcast_channel_id?: string;
}

export interface CSteamTV_GetBroadcastChannelProfile_Response {
	unique_name?: string;
	owner_steamid?: string;
	name?: string;
	language?: string;
	headline?: string;
	summary?: string;
	schedule?: string;
	rules?: string;
	panels?: string;
	is_partnered?: boolean;
}

export interface CSteamTV_SetBroadcastChannelImage_Request {
	broadcast_channel_id?: string;
	image_type?: EBroadcastImageType;
	image_index?: number;
	image_width?: number;
	image_height?: number;
	file_size?: number;
	file_extension?: string;
	file_hash?: string;
	undo?: boolean;
}

export interface CSteamTV_SetBroadcastChannelImage_Response {
	replace_image_hash?: string;
}

export interface CSteamTV_GetBroadcastChannelImages_Request {
	broadcast_channel_id?: string;
	image_types?: EBroadcastImageType[];
}

export interface CSteamTV_GetBroadcastChannelImages_Response {
	images?: CSteamTV_GetBroadcastChannelImages_Response_Images[];
}

export interface CSteamTV_GetBroadcastChannelImages_Response_Images {
	image_type?: EBroadcastImageType;
	image_path?: string;
	image_index?: number;
}

export interface CSteamTV_SetBroadcastChannelLinkRegions_Request {
	broadcast_channel_id?: string;
	links?: CSteamTV_SetBroadcastChannelLinkRegions_Request_Links[];
}

export interface CSteamTV_SetBroadcastChannelLinkRegions_Request_Links {
	link_index?: number;
	url?: string;
	link_description?: string;
	left?: number;
	top?: number;
	width?: number;
	height?: number;
}

export interface CSteamTV_SetBroadcastChannelLinkRegions_Response {
}

export interface CSteamTV_GetBroadcastChannelLinks_Request {
	broadcast_channel_id?: string;
}

export interface CSteamTV_GetBroadcastChannelLinks_Response {
	links?: CSteamTV_GetBroadcastChannelLinks_Response_Links[];
}

export interface CSteamTV_GetBroadcastChannelLinks_Response_Links {
	link_index?: number;
	url?: string;
	link_description?: string;
	left?: number;
	top?: number;
	width?: number;
	height?: number;
}

export interface CSteamTV_GetBroadcastChannelBroadcasters_Request {
	broadcast_channel_id?: string;
}

export interface CSteamTV_GetBroadcastChannelBroadcasters_Response {
	broadcasters?: CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster[];
}

export interface CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster {
	steamid?: string;
	name?: string;
	rtmp_token?: string;
}

export interface CSteamTV_GetFollowedChannels_Request {
}

export interface GetBroadcastChannelEntry {
	broadcast_channel_id?: string;
	unique_name?: string;
	name?: string;
	appid?: number;
	viewers?: string;
	views?: string;
	thumbnail_url?: string;
	followers?: string;
	headline?: string;
	avatar_url?: string;
	broadcaster_steamid?: string;
	subscribers?: string;
	background_url?: string;
	is_featured?: boolean;
	is_disabled?: boolean;
	is_live?: boolean;
	language?: string;
	reports?: number;
	is_partnered?: boolean;
}

export interface CSteamTV_GetFollowedChannels_Response {
	results?: GetBroadcastChannelEntry[];
}

export interface CSteamTV_GetSubscribedChannels_Request {
}

export interface CSteamTV_GetSubscribedChannels_Response {
	results?: GetBroadcastChannelEntry[];
}

export interface CSteamTV_GetBroadcastChannelStatus_Request {
	broadcast_channel_id?: string;
}

export interface CSteamTV_GetBroadcastChannelStatus_Response {
	is_live?: boolean;
	is_disabled?: boolean;
	appid?: number;
	viewers?: string;
	views?: string;
	broadcaster_steamid?: string;
	thumbnail_url?: string;
	followers?: string;
	subscribers?: string;
	unique_name?: string;
	broadcast_session_id?: string;
}

export interface CSteamTV_FollowBroadcastChannel_Request {
	broadcast_channel_id?: string;
	undo?: boolean;
}

export interface CSteamTV_FollowBroadcastChannel_Response {
	is_followed?: boolean;
}

export interface CSteamTV_SubscribeBroadcastChannel_Request {
	broadcast_channel_id?: string;
}

export interface CSteamTV_SubscribeBroadcastChannel_Response {
	is_subscribed?: boolean;
}

export interface CSteamTV_GetBroadcastChannelClips_Request {
	broadcast_channel_id?: string;
}

export interface CSteamTV_BroadcastClipInfo {
	broadcast_clip_id?: string;
	channel_id?: string;
	app_id?: number;
	broadcaster_steamid?: string;
	creator_steamid?: string;
	video_description?: string;
	live_time?: number;
	length_ms?: number;
	thumbnail_path?: string;
}

export interface CSteamTV_GetBroadcastChannelClips_Response {
	clips?: CSteamTV_BroadcastClipInfo[];
	thumbnail_host?: string;
}

export interface CSteamTV_ReportBroadcastChannel_Request {
	broadcast_channel_id?: string;
	reason?: string;
}

export interface CSteamTV_ReportBroadcastChannel_Response {
}

export interface CSteamTV_GetBroadcastChannelInteraction_Request {
	broadcast_channel_id?: string;
}

export interface CSteamTV_GetBroadcastChannelInteraction_Response {
	is_followed?: boolean;
	is_subscribed?: boolean;
}

export interface CSteamTV_GetGames_Request {
	appid?: number;
	algorithm?: EGetGamesAlgorithm;
	count?: number;
}

export interface CSteamTV_Game {
	appid?: number;
	name?: string;
	image?: string;
	viewers?: string;
	channels?: GetBroadcastChannelEntry[];
	release_date?: string;
	developer?: string;
	publisher?: string;
}

export interface CSteamTV_GetGames_Response {
	results?: CSteamTV_Game[];
}

export interface CSteamTV_GetChannels_Request {
	algorithm?: EGetChannelsAlgorithm;
	count?: number;
	appid?: number;
}

export interface CSteamTV_GetChannels_Response {
	results?: GetBroadcastChannelEntry[];
}

export interface CSteamTV_AddChatBan_Request {
	broadcast_channel_id?: string;
	chatter_steamid?: string;
	duration?: number;
	permanent?: boolean;
	undo?: boolean;
}

export interface CSteamTV_AddChatBan_Response {
}

export interface CSteamTV_GetChatBans_Request {
	broadcast_channel_id?: string;
}

export interface CSteamTV_ChatBan {
	issuer_steamid?: string;
	chatter_steamid?: string;
	time_expires?: string;
	permanent?: boolean;
	name?: string;
}

export interface CSteamTV_GetChatBans_Response {
	results?: CSteamTV_ChatBan[];
}

export interface CSteamTV_AddChatModerator_Request {
	broadcast_channel_id?: string;
	moderator_steamid?: string;
	undo?: boolean;
}

export interface CSteamTV_AddChatModerator_Response {
}

export interface CSteamTV_GetChatModerators_Request {
	broadcast_channel_id?: string;
}

export interface CSteamTV_ChatModerator {
	steamid?: string;
	name?: string;
}

export interface CSteamTV_GetChatModerators_Response {
	results?: CSteamTV_ChatModerator[];
}

export interface CSteamTV_AddWordBan_Request {
	broadcast_channel_id?: string;
	word?: string;
	undo?: boolean;
}

export interface CSteamTV_AddWordBan_Response {
}

export interface CSteamTV_GetWordBans_Request {
	broadcast_channel_id?: string;
}

export interface CSteamTV_GetWordBans_Response {
	results?: string[];
}

export interface CSteamTV_JoinChat_Request {
	broadcast_channel_id?: string;
}

export interface CSteamTV_JoinChat_Response {
	chat_id?: string;
	view_url_template?: string;
	flair_group_ids?: string[];
}

export interface CSteamTV_Search_Request {
	term?: string;
}

export interface CSteamTV_Search_Response {
	results?: GetBroadcastChannelEntry[];
}

export interface CSteamTV_GetSteamTVUserSettings_Request {
}

export interface CSteamTV_GetSteamTVUserSettings_Response {
	stream_live_email?: boolean;
	stream_live_notification?: boolean;
}

export interface CSteamTV_SetSteamTVUserSettings_Request {
	stream_live_email?: boolean;
	stream_live_notification?: boolean;
}

export interface CSteamTV_SetSteamTVUserSettings_Response {
}

export interface CSteamTV_GetMyBroadcastChannels_Request {
}

export interface CSteamTV_GetMyBroadcastChannels_Response {
	results?: GetBroadcastChannelEntry[];
}

export interface CSteamTV_GetHomePageContents_Request {
}

export interface CSteamTV_HomePageTemplate_Takeover {
	broadcasts?: GetBroadcastChannelEntry[];
}

export interface CSteamTV_HomePageTemplate_SingleGame {
	broadcasts?: GetBroadcastChannelEntry[];
	appid?: number;
	title?: string;
}

export interface GameListEntry {
	appid?: number;
	game_name?: string;
	broadcast?: GetBroadcastChannelEntry;
}

export interface CSteamTV_HomePageTemplate_GameList {
	entries?: GameListEntry[];
	title?: string;
}

export interface CSteamTV_HomePageTemplate_QuickExplore {
	broadcasts?: GetBroadcastChannelEntry[];
	title?: string;
}

export interface CSteamTV_HomePageTemplate_ConveyorBelt {
	broadcasts?: GetBroadcastChannelEntry[];
	title?: string;
}

export interface CSteamTV_HomePageTemplate_WatchParty {
	broadcast?: GetBroadcastChannelEntry;
	title?: string;
	chat_group_id?: string;
}

export interface CSteamTV_HomePageTemplate_Developer {
	broadcast?: GetBroadcastChannelEntry;
	title?: string;
}

export interface CSteamTV_HomePageTemplate_Event {
	title?: string;
}

export interface CSteamTV_HomePageContentRow {
	template_type?: ESteamTVContentTemplate;
	takeover?: CSteamTV_HomePageTemplate_Takeover;
	single_game?: CSteamTV_HomePageTemplate_SingleGame;
	game_list?: CSteamTV_HomePageTemplate_GameList;
	quick_explore?: CSteamTV_HomePageTemplate_QuickExplore;
	conveyor_belt?: CSteamTV_HomePageTemplate_ConveyorBelt;
	watch_party?: CSteamTV_HomePageTemplate_WatchParty;
	developer?: CSteamTV_HomePageTemplate_Developer;
	event?: CSteamTV_HomePageTemplate_Event;
}

export interface CSteamTV_GetHomePageContents_Response {
	rows?: CSteamTV_HomePageContentRow[];
}

export interface CSteamTV_AppCheer_SingleCheerType {
	cheer_type?: number;
	cheer_amount?: number;
}

export interface CSteamTV_AppCheer_Request {
	app_id?: number;
	cheer_target_id?: string;
	cheers?: CSteamTV_AppCheer_SingleCheerType[];
}

export interface CSteamTV_AppCheer_Response {
	aggregation_delay_ms?: number;
}

export interface SteamTV {
}

///////////////////////////////////////////////
// steammessages_store.steamclient.proto
///////////////////////////////////////////////

export interface CStore_RegisterCDKey_Request {
	activation_code?: string;
	purchase_platform?: number;
	is_request_from_client?: boolean;
}

export interface CStore_PurchaseReceiptInfo {
	transactionid?: string;
	packageid?: number;
	purchase_status?: number;
	result_detail?: number;
	transaction_time?: number;
	payment_method?: number;
	base_price?: string;
	total_discount?: string;
	tax?: string;
	shipping?: string;
	currency_code?: number;
	country_code?: string;
	error_headline?: string;
	error_string?: string;
	error_link_text?: string;
	error_link_url?: string;
	error_appid?: number;
	line_items?: CStore_PurchaseReceiptInfo_LineItem[];
}

export interface CStore_PurchaseReceiptInfo_LineItem {
	packageid?: number;
	appid?: number;
	line_item_description?: string;
}

export interface CStore_RegisterCDKey_Response {
	purchase_result_details?: number;
	purchase_receipt_info?: CStore_PurchaseReceiptInfo;
}

export interface CStore_GetMostPopularTags_Request {
	language?: string;
}

export interface CStore_GetMostPopularTags_Response {
	tags?: CStore_GetMostPopularTags_Response_Tag[];
}

export interface CStore_GetMostPopularTags_Response_Tag {
	tagid?: number;
	name?: string;
}

export interface CStore_GetLocalizedNameForTags_Request {
	language?: string;
	tagids?: number[];
}

export interface CStore_GetLocalizedNameForTags_Response {
	tags?: CStore_GetLocalizedNameForTags_Response_Tag[];
}

export interface CStore_GetLocalizedNameForTags_Response_Tag {
	tagid?: number;
	english_name?: string;
	name?: string;
	normalized_name?: string;
}

export interface CStoreDiscoveryQueueSettings {
	os_win?: boolean;
	os_mac?: boolean;
	os_linux?: boolean;
	full_controller_support?: boolean;
	native_steam_controller?: boolean;
	include_coming_soon?: boolean;
	excluded_tagids?: number[];
	exclude_early_access?: boolean;
	exclude_videos?: boolean;
	exclude_software?: boolean;
	exclude_dlc?: boolean;
	exclude_soundtracks?: boolean;
	featured_tagids?: number[];
}

export interface CStore_GetDiscoveryQueue_Request {
	queue_type?: EStoreDiscoveryQueueType;
	country_code?: string;
	rebuild_queue?: boolean;
	settings_changed?: boolean;
	settings?: CStoreDiscoveryQueueSettings;
	rebuild_queue_if_stale?: boolean;
	ignore_user_preferences?: boolean;
	no_experimental_results?: boolean;
	experimental_cohort?: number;
	debug_get_solr_query?: boolean;
	store_page_filter?: CStorePageFilter;
}

export interface CStore_GetDiscoveryQueue_Response {
	appids?: number[];
	country_code?: string;
	settings?: CStoreDiscoveryQueueSettings;
	skipped?: number;
	exhausted?: boolean;
	experimental_cohort?: number;
	debug_solr_query?: string;
}

export interface CStore_GetDiscoveryQueueSettings_Request {
	queue_type?: EStoreDiscoveryQueueType;
	store_page_filter?: CStorePageFilter;
}

export interface CStore_GetDiscoveryQueueSettings_Response {
	country_code?: string;
	settings?: CStoreDiscoveryQueueSettings;
}

export interface CStore_SkipDiscoveryQueueItem_Request {
	queue_type?: EStoreDiscoveryQueueType;
	appid?: number;
	store_page_filter?: CStorePageFilter;
}

export interface CStore_SkipDiscoveryQueueItem_Response {
}

export interface CStore_GetUserGameInterestState_Request {
	appid?: number;
	store_appid?: number;
	beta_appid?: number;
}

export interface CStore_GetUserGameInterestState_Response {
	owned?: boolean;
	wishlist?: boolean;
	ignored?: boolean;
	following?: boolean;
	in_queues?: EStoreDiscoveryQueueType[];
	queues_with_skip?: EStoreDiscoveryQueueType[];
	queue_items_remaining?: number[];
	queue_items_next_appid?: number[];
	temporarily_owned?: boolean;
	queues?: CStore_GetUserGameInterestState_Response_InQueue[];
	ignored_reason?: number;
	beta_status?: EPlaytestStatus;
}

export interface CStore_GetUserGameInterestState_Response_InQueue {
	type?: EStoreDiscoveryQueueType;
	skipped?: boolean;
	items_remaining?: number;
	next_appid?: number;
	experimental_cohort?: number;
}

export interface CStore_GetDiscoveryQueueSkippedApps_Request {
	steamid?: string;
	queue_type?: EStoreDiscoveryQueueType;
	store_page_filter?: CStorePageFilter;
}

export interface CStore_GetDiscoveryQueueSkippedApps_Response {
	appids?: number[];
}

export interface CStore_GetStorePreferences_Request {
}

export interface CStore_UserPreferences {
	primary_language?: number;
	secondary_languages?: number;
	platform_windows?: boolean;
	platform_mac?: boolean;
	platform_linux?: boolean;
	timestamp_updated?: number;
	hide_store_broadcast?: boolean;
	review_score_preference?: EUserReviewScorePreference;
	timestamp_content_descriptor_preferences_updated?: number;
	provide_deck_feedback?: EProvideDeckFeedbackPreference;
	additional_languages?: string;
}

export interface CStore_UserTagPreferences {
	tags_to_exclude?: CStore_UserTagPreferences_Tag[];
}

export interface CStore_UserTagPreferences_Tag {
	tagid?: number;
	name?: string;
	timestamp_added?: number;
}

export interface CStore_UserContentDescriptorPreferences {
	content_descriptors_to_exclude?: CStore_UserContentDescriptorPreferences_ContentDescriptor[];
}

export interface CStore_UserContentDescriptorPreferences_ContentDescriptor {
	content_descriptorid?: number;
	timestamp_added?: number;
}

export interface CStore_GetStorePreferences_Response {
	preferences?: CStore_UserPreferences;
	tag_preferences?: CStore_UserTagPreferences;
	content_descriptor_preferences?: CStore_UserContentDescriptorPreferences;
}

export interface CStore_GetTrendingAppsAmongFriends_Request {
	num_apps?: number;
	num_top_friends?: number;
}

export interface CStore_GetTrendingAppsAmongFriends_Response {
	trending_apps?: CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData[];
}

export interface CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData {
	appid?: number;
	steamids_top_friends?: string[];
	total_friends?: number;
}

export interface CSteamDeckCompatibility_SetFeedback_Request {
	appid?: number;
	feedback?: ESteamDeckCompatibilityFeedback;
}

export interface CSteamDeckCompatibility_SetFeedback_Response {
}

export interface CSteamDeckCompatibility_ShouldPrompt_Request {
	appid?: number;
}

export interface CSteamDeckCompatibility_ShouldPrompt_Response {
	prompt?: boolean;
	feedback_eligible?: boolean;
	existing_feedback?: ESteamDeckCompatibilityFeedback;
}

export interface CStore_StorePreferencesChanged_Notification {
	preferences?: CStore_UserPreferences;
	tag_preferences?: CStore_UserTagPreferences;
	content_descriptor_preferences?: CStore_UserContentDescriptorPreferences;
}

export interface Store {
}

export interface StoreClient {
}

///////////////////////////////////////////////
// steammessages_storebrowse.steamclient.proto
///////////////////////////////////////////////

///////////////////////////////////////////////
// steammessages_timedtrial.steamclient.proto
///////////////////////////////////////////////

export interface CTimedTrial_GetTimeRemaining_Request {
	appid?: number;
}

export interface CTimedTrial_GetTimeRemaining_Response {
	seconds_played?: number;
	seconds_allowed?: number;
	packageid?: number;
	mastersub_appid?: number;
}

export interface CTimedTrial_RecordPlaytime_Request {
	appid?: number;
	seconds_played?: number;
}

export interface CTimedTrial_RecordPlaytime_Response {
	seconds_played?: number;
	seconds_allowed?: number;
}

export interface CTimedTrial_ResetPlaytime_Request {
	appid?: number;
}

export interface CTimedTrial_ResetPlaytime_Response {
	seconds_played?: number;
	seconds_allowed?: number;
}

export interface TimedTrial {
}

///////////////////////////////////////////////
// steammessages_twofactor.steamclient.proto
///////////////////////////////////////////////

export interface CTwoFactor_Time_Request {
	sender_time?: string;
}

export interface CTwoFactor_Time_Response {
	server_time?: string;
	skew_tolerance_seconds?: string;
	large_time_jink?: string;
	probe_frequency_seconds?: number;
	adjusted_time_probe_frequency_seconds?: number;
	hint_probe_frequency_seconds?: number;
	sync_timeout?: number;
	try_again_seconds?: number;
	max_attempts?: number;
}

export interface CTwoFactor_Status_Request {
	steamid?: string;
}

export interface CTwoFactor_Status_Response {
	state?: number;
	inactivation_reason?: number;
	authenticator_type?: number;
	authenticator_allowed?: boolean;
	steamguard_scheme?: number;
	token_gid?: string;
	email_validated?: boolean;
	device_identifier?: string;
	time_created?: number;
	revocation_attempts_remaining?: number;
	classified_agent?: string;
	allow_external_authenticator?: boolean;
	time_transferred?: number;
	version?: number;
}

export interface CTwoFactor_AddAuthenticator_Request {
	steamid?: string;
	authenticator_time?: string;
	serial_number?: string;
	authenticator_type?: number;
	device_identifier?: string;
	sms_phone_id?: string;
	http_headers?: string[];
	version?: number;
}

export interface CTwoFactor_AddAuthenticator_Response {
	shared_secret?: Buffer;
	serial_number?: string;
	revocation_code?: string;
	uri?: string;
	server_time?: string;
	account_name?: string;
	token_gid?: string;
	identity_secret?: Buffer;
	secret_1?: Buffer;
	status?: number;
	phone_number_hint?: string;
}

export interface CTwoFactor_SendEmail_Request {
	steamid?: string;
	email_type?: number;
	include_activation_code?: boolean;
}

export interface CTwoFactor_SendEmail_Response {
}

export interface CTwoFactor_FinalizeAddAuthenticator_Request {
	steamid?: string;
	authenticator_code?: string;
	authenticator_time?: string;
	activation_code?: string;
	http_headers?: string[];
	validate_sms_code?: boolean;
}

export interface CTwoFactor_FinalizeAddAuthenticator_Response {
	success?: boolean;
	want_more?: boolean;
	server_time?: string;
	status?: number;
}

export interface CTwoFactor_UpdateTokenVersion_Request {
	steamid?: string;
	version?: number;
	signature?: Buffer;
}

export interface CTwoFactor_UpdateTokenVersion_Response {
}

export interface CTwoFactor_RemoveAuthenticator_Request {
	revocation_code?: string;
	revocation_reason?: number;
	steamguard_scheme?: number;
	remove_all_steamguard_cookies?: boolean;
}

export interface CTwoFactor_RemoveAuthenticator_Response {
	success?: boolean;
	server_time?: string;
	revocation_attempts_remaining?: number;
}

export interface CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request {
}

export interface CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response {
	success?: boolean;
}

export interface CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request {
	sms_code?: string;
	generate_new_token?: boolean;
	version?: number;
}

export interface CRemoveAuthenticatorViaChallengeContinue_Replacement_Token {
	shared_secret?: Buffer;
	serial_number?: string;
	revocation_code?: string;
	uri?: string;
	server_time?: string;
	account_name?: string;
	token_gid?: string;
	identity_secret?: Buffer;
	secret_1?: Buffer;
	status?: number;
	steamguard_scheme?: number;
	steamid?: string;
}

export interface CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response {
	success?: boolean;
	replacement_token?: CRemoveAuthenticatorViaChallengeContinue_Replacement_Token;
}

export interface TwoFactor {
}

///////////////////////////////////////////////
// steammessages_unified_base.steamclient.proto
///////////////////////////////////////////////

///////////////////////////////////////////////
// steammessages_unified_test.steamclient.proto
///////////////////////////////////////////////

export interface CMsgTest_MessageToClient_Request {
	some_text?: string;
}

export interface CMsgTest_MessageToClient_Response {
	some_text?: string;
}

export interface CMsgTest_NotifyClient_Notification {
	some_text?: string;
}

export interface CMsgTest_MessageToServer_Request {
	some_text?: string;
}

export interface CMsgTest_MessageToServer_Response {
	some_text?: string;
}

export interface CMsgTest_NotifyServer_Notification {
	some_text?: string;
}

export interface CMsgTest_NoBody_Request {
}

export interface CMsgTest_CallClient_Response {
	testvalue?: number;
}

export interface TestSteamClient {
}

export interface TestServerFromClient {
}

export interface TestExternalPrivilege {
}

///////////////////////////////////////////////
// steammessages_useraccount.steamclient.proto
///////////////////////////////////////////////

export interface CUserAccount_GetAvailableValveDiscountPromotions_Request {
	country_code?: string;
}

export interface CUserAccount_GetAvailableValveDiscountPromotions_Response {
	promotions?: CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails[];
}

export interface CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails {
	promotionid?: number;
	promotion_description?: string;
	minimum_cart_amount?: string;
	minimum_cart_amount_for_display?: string;
	discount_amount?: string;
	currency_code?: number;
	available_use_count?: number;
	promotional_discount_type?: number;
	loyalty_reward_id?: number;
	localized_name_token?: string;
	max_use_count?: number;
}

export interface CUserAccount_GetClientWalletDetails_Request {
	include_balance_in_usd?: boolean;
	wallet_region?: number;
	include_formatted_balance?: boolean;
}

export interface CUserAccount_GetWalletDetails_Response {
	has_wallet?: boolean;
	user_country_code?: string;
	wallet_country_code?: string;
	wallet_state?: string;
	balance?: string;
	delayed_balance?: string;
	currency_code?: number;
	time_most_recent_txn?: number;
	most_recent_txnid?: string;
	balance_in_usd?: string;
	delayed_balance_in_usd?: string;
	has_wallet_in_other_regions?: boolean;
	other_regions?: number[];
	formatted_balance?: string;
}

export interface CUserAccount_GetAccountLinkStatus_Request {
}

export interface CUserAccount_GetAccountLinkStatus_Response {
	pwid?: number;
	identity_verification?: number;
	performed_age_verification?: boolean;
}

export interface CUserAccount_CancelLicenseForApp_Request {
	appid?: number;
}

export interface CUserAccount_CancelLicenseForApp_Response {
}

export interface CUserAccount_GetUserCountry_Request {
	steamid?: string;
}

export interface CUserAccount_GetUserCountry_Response {
	country?: string;
}

export interface CUserAccount_CreateFriendInviteToken_Request {
	invite_limit?: number;
	invite_duration?: number;
	invite_note?: string;
}

export interface CUserAccount_CreateFriendInviteToken_Response {
	invite_token?: string;
	invite_limit?: string;
	invite_duration?: string;
	time_created?: number;
	valid?: boolean;
}

export interface CUserAccount_GetFriendInviteTokens_Request {
}

export interface CUserAccount_GetFriendInviteTokens_Response {
	tokens?: CUserAccount_CreateFriendInviteToken_Response[];
}

export interface CUserAccount_ViewFriendInviteToken_Request {
	steamid?: string;
	invite_token?: string;
}

export interface CUserAccount_ViewFriendInviteToken_Response {
	valid?: boolean;
	steamid?: string;
	invite_duration?: string;
}

export interface CUserAccount_RedeemFriendInviteToken_Request {
	steamid?: string;
	invite_token?: string;
}

export interface CUserAccount_RedeemFriendInviteToken_Response {
}

export interface CUserAccount_RevokeFriendInviteToken_Request {
	invite_token?: string;
}

export interface CUserAccount_RevokeFriendInviteToken_Response {
}

export interface CUserAccount_RegisterCompatTool_Request {
	compat_tool?: number;
}

export interface CUserAccount_RegisterCompatTool_Response {
}

export interface CAccountLinking_GetLinkedAccountInfo_Request {
	account_type?: EInternalAccountType;
	account_id?: string;
	filter?: EExternalAccountType;
	return_access_token?: boolean;
}

export interface CAccountLinking_GetLinkedAccountInfo_Response {
	external_accounts?: CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response[];
}

export interface CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response {
	external_type?: EExternalAccountType;
	external_id?: string;
	external_user_name?: string;
	external_url?: string;
	access_token?: string;
	access_token_secret?: string;
	is_valid?: boolean;
}

export interface CEmbeddedClient_AuthorizeCurrentDevice_Request {
	steamid?: string;
	appid?: number;
	device_info?: string;
	deviceid?: number;
}

export interface CEmbeddedClient_Token {
	steamid?: string;
	client_token?: Buffer;
	expiry?: number;
	deviceid?: number;
}

export interface CEmbeddedClient_AuthorizeDevice_Response {
	result?: EResult;
	token?: CEmbeddedClient_Token;
}

export interface UserAccount {
}

export interface AccountLinking {
}

export interface EmbeddedClient {
}

///////////////////////////////////////////////
// steammessages_vac.steamclient.proto
///////////////////////////////////////////////

export interface CFileVerification_SignatureCheck_Request {
	steamid?: string;
	appid?: number;
	file_size?: string;
	file_timestamp?: number;
	file_timestamp2?: number;
	signature_result?: number;
	filename?: string;
	client_package_version?: number;
	sha1hash?: Buffer;
}

export interface CFileVerification_SignatureCheck_Response {
	deny_operation?: boolean;
}

export interface CFileVerification_SteamServiceCheck_Request {
	service_status?: number;
	client_package_version?: number;
	launcher_type?: number;
	os_type?: number;
	service_repair?: number;
}

export interface CFileVerification_SteamServiceCheck_Response {
	attempt_repair?: boolean;
}

export interface FileVerification {
}

///////////////////////////////////////////////
// steammessages_video.steamclient.proto
///////////////////////////////////////////////

export interface CVideo_ClientGetVideoURL_Request {
	video_id?: string;
	client_cellid?: number;
}

export interface CVideo_ClientGetVideoURL_Response {
	video_id?: string;
	video_url?: string;
}

export interface VideoBookmark {
	app_id?: number;
	playback_position_in_seconds?: number;
	video_track_id?: string;
	audio_track_id?: string;
	timedtext_track_id?: string;
	last_modified?: number;
	hide_from_watch_history?: boolean;
	hide_from_library?: boolean;
}

export interface CVideo_SetVideoBookmark_Notification {
	bookmarks?: VideoBookmark[];
}

export interface CVideo_GetVideoBookmarks_Request {
	appids?: number[];
	updated_since?: number;
}

export interface CVideo_GetVideoBookmarks_Response {
	bookmarks?: VideoBookmark[];
}

export interface CVideo_UnlockedH264_Notification {
	encryption_key?: Buffer;
}

export interface CFovasVideo_ClientGetOPFSettings_Request {
	app_id?: number;
	client_cellid?: number;
}

export interface CFovasVideo_ClientGetOPFSettings_Response {
	app_id?: number;
	opf_settings?: string;
}

export interface Video {
}

export interface VideoClient {
}

export interface FovasVideo {
}

///////////////////////////////////////////////
// steammessages_virtualcontroller.proto
///////////////////////////////////////////////

export interface CVirtualControllerElement {
	type?: EControllerElementType;
	visible?: boolean;
	x_position?: number;
	y_position?: number;
	x_scale?: number;
	y_scale?: number;
}

export interface CVirtualControllerColor {
	r?: number;
	g?: number;
	b?: number;
	a?: number;
}

export interface CVirtualControllerLayout {
	layout_version?: number;
	actionset_id?: number;
	elements?: CVirtualControllerElement[];
	color?: CVirtualControllerColor;
}

export interface CVirtualControllerLayouts {
	layouts?: CVirtualControllerLayout[];
	input_mode?: EInputMode;
	mouse_mode?: EMouseMode;
	trackpad_sensitivity?: number;
	pinch_zoom_enabled?: boolean;
	pinch_zoom_x?: number;
	pinch_zoom_y?: number;
	pinch_zoom_scale?: number;
	shaken?: boolean;
	mouse_offscreen?: boolean;
}

export interface CVirtualControllerConfig {
	name?: string;
	actionsets?: CVirtualControllerConfig_ActionSet[];
	default_mouse_mode?: EMouseMode;
}

export interface CVirtualControllerConfig_Control {
	name?: string;
	icon?: string;
	input_source?: number;
	input_mode?: number;
	input_element?: number;
	output_gamepad?: number;
	output_keyboard?: number;
	output_mouse?: number;
	icon_foreground?: string;
	icon_background?: string;
	input_toggle?: boolean;
	input_activate_stick_or_trackpad?: number;
	activation_type?: number;
	long_press_ms?: number;
	double_press_ms?: number;
}

export interface CVirtualControllerConfig_ActionSet {
	id?: number;
	parent_id?: number;
	name?: string;
	controls?: CVirtualControllerConfig_Control[];
}

export interface CVirtualControllerLayoutPackage {
	appid?: number;
	creator?: string;
	initial_revision?: number;
	saved_revision?: number;
	config?: CVirtualControllerConfig;
	layouts?: CVirtualControllerLayouts;
}

export interface CVirtualControllerGlobalConfig {
	feedback_enabled?: boolean;
	gyroscope_enabled?: boolean;
	auto_fade_enabled?: boolean;
	rumble_enabled?: boolean;
	shake_fade_enabled?: boolean;
}

///////////////////////////////////////////////
// steammessages_workshop.steamclient.proto
///////////////////////////////////////////////

export interface CWorkshop_GetEULAStatus_Request {
	appid?: number;
}

export interface CWorkshop_GetEULAStatus_Response {
	version?: number;
	timestamp_action?: number;
	accepted?: boolean;
	needs_action?: boolean;
}

export interface Workshop {
}

///////////////////////////////////////////////
// steamnetworkingsockets_messages.proto
///////////////////////////////////////////////

///////////////////////////////////////////////
// steamnetworkingsockets_messages_certs.proto
///////////////////////////////////////////////

///////////////////////////////////////////////
// steamnetworkingsockets_messages_udp.proto
///////////////////////////////////////////////

export interface CMsgSteamSockets_UDP_ChallengeRequest {
	connection_id?: number;
	my_timestamp?: string;
	protocol_version?: number;
}

export interface CMsgSteamSockets_UDP_ChallengeReply {
	connection_id?: number;
	challenge?: string;
	your_timestamp?: string;
	protocol_version?: number;
}

export interface CMsgSteamSockets_UDP_ConnectRequest {
	client_connection_id?: number;
	challenge?: string;
	my_timestamp?: string;
	ping_est_ms?: number;
	crypt?: CMsgSteamDatagramSessionCryptInfoSigned;
	cert?: CMsgSteamDatagramCertificateSigned;
	legacy_protocol_version?: number;
	identity_string?: string;
	legacy_client_steam_id?: string;
	legacy_identity_binary?: CMsgSteamNetworkingIdentityLegacyBinary;
}

export interface CMsgSteamSockets_UDP_ConnectOK {
	client_connection_id?: number;
	server_connection_id?: number;
	your_timestamp?: string;
	delay_time_usec?: number;
	crypt?: CMsgSteamDatagramSessionCryptInfoSigned;
	cert?: CMsgSteamDatagramCertificateSigned;
	identity_string?: string;
	legacy_server_steam_id?: string;
	legacy_identity_binary?: CMsgSteamNetworkingIdentityLegacyBinary;
}

export interface CMsgSteamSockets_UDP_ConnectionClosed {
	to_connection_id?: number;
	from_connection_id?: number;
	debug?: string;
	reason_code?: number;
}

export interface CMsgSteamSockets_UDP_NoConnection {
	from_connection_id?: number;
	to_connection_id?: number;
}

export interface CMsgSteamSockets_UDP_Stats {
	stats?: CMsgSteamDatagramConnectionQuality;
	flags?: number;
}

export enum CMsgSteamSockets_UDP_Stats_Flags {
	ACK_REQUEST_E2E = 2,
	ACK_REQUEST_IMMEDIATE = 4,
	NOT_PRIMARY_TRANSPORT_E2E = 16,
}

